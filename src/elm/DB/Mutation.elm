-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module DB.Mutation exposing (CreateAssetRequiredArguments, CreateBlogPostRequiredArguments, CreateContactRequiredArguments, CreateProjectRequiredArguments, DeleteAssetRequiredArguments, DeleteBlogPostRequiredArguments, DeleteColorRequiredArguments, DeleteContactRequiredArguments, DeleteLocationRequiredArguments, DeleteManyAssetsOptionalArguments, DeleteManyBlogPostsOptionalArguments, DeleteManyColorsOptionalArguments, DeleteManyContactsOptionalArguments, DeleteManyLocationsOptionalArguments, DeleteManyProjectsOptionalArguments, DeleteProjectRequiredArguments, UpdateAssetRequiredArguments, UpdateBlogPostRequiredArguments, UpdateContactRequiredArguments, UpdateManyAssetsOptionalArguments, UpdateManyAssetsRequiredArguments, UpdateManyBlogPostsOptionalArguments, UpdateManyBlogPostsRequiredArguments, UpdateManyContactsOptionalArguments, UpdateManyContactsRequiredArguments, UpdateManyProjectsOptionalArguments, UpdateManyProjectsRequiredArguments, UpdateProjectRequiredArguments, UpsertAssetRequiredArguments, UpsertBlogPostRequiredArguments, UpsertContactRequiredArguments, UpsertProjectRequiredArguments, createAsset, createBlogPost, createColor, createContact, createLocation, createProject, deleteAsset, deleteBlogPost, deleteColor, deleteContact, deleteLocation, deleteManyAssets, deleteManyBlogPosts, deleteManyColors, deleteManyContacts, deleteManyLocations, deleteManyProjects, deleteProject, updateAsset, updateBlogPost, updateContact, updateManyAssets, updateManyBlogPosts, updateManyContacts, updateManyProjects, updateProject, upsertAsset, upsertBlogPost, upsertContact, upsertProject)

import DB.InputObject
import DB.Interface
import DB.Object
import DB.Scalar
import DB.ScalarDecoders
import DB.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateAssetRequiredArguments =
    { data : DB.InputObject.AssetCreateInput }


createAsset : CreateAssetRequiredArguments -> SelectionSet decodesTo DB.Object.Asset -> SelectionSet decodesTo RootMutation
createAsset requiredArgs object_ =
    Object.selectionForCompositeField "createAsset" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeAssetCreateInput ] object_ identity


createColor : SelectionSet decodesTo DB.Object.Color -> SelectionSet decodesTo RootMutation
createColor object_ =
    Object.selectionForCompositeField "createColor" [] object_ identity


createLocation : SelectionSet decodesTo DB.Object.Location -> SelectionSet decodesTo RootMutation
createLocation object_ =
    Object.selectionForCompositeField "createLocation" [] object_ identity


type alias CreateBlogPostRequiredArguments =
    { data : DB.InputObject.BlogPostCreateInput }


createBlogPost : CreateBlogPostRequiredArguments -> SelectionSet decodesTo DB.Object.BlogPost -> SelectionSet decodesTo RootMutation
createBlogPost requiredArgs object_ =
    Object.selectionForCompositeField "createBlogPost" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeBlogPostCreateInput ] object_ identity


type alias CreateContactRequiredArguments =
    { data : DB.InputObject.ContactCreateInput }


createContact : CreateContactRequiredArguments -> SelectionSet decodesTo DB.Object.Contact -> SelectionSet decodesTo RootMutation
createContact requiredArgs object_ =
    Object.selectionForCompositeField "createContact" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeContactCreateInput ] object_ identity


type alias CreateProjectRequiredArguments =
    { data : DB.InputObject.ProjectCreateInput }


createProject : CreateProjectRequiredArguments -> SelectionSet decodesTo DB.Object.Project -> SelectionSet decodesTo RootMutation
createProject requiredArgs object_ =
    Object.selectionForCompositeField "createProject" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeProjectCreateInput ] object_ identity


type alias UpdateAssetRequiredArguments =
    { data : DB.InputObject.AssetUpdateInput
    , where_ : DB.InputObject.AssetWhereUniqueInput
    }


updateAsset : UpdateAssetRequiredArguments -> SelectionSet decodesTo DB.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
updateAsset requiredArgs object_ =
    Object.selectionForCompositeField "updateAsset" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeAssetUpdateInput, Argument.required "where" requiredArgs.where_ DB.InputObject.encodeAssetWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpdateBlogPostRequiredArguments =
    { data : DB.InputObject.BlogPostUpdateInput
    , where_ : DB.InputObject.BlogPostWhereUniqueInput
    }


updateBlogPost : UpdateBlogPostRequiredArguments -> SelectionSet decodesTo DB.Object.BlogPost -> SelectionSet (Maybe decodesTo) RootMutation
updateBlogPost requiredArgs object_ =
    Object.selectionForCompositeField "updateBlogPost" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeBlogPostUpdateInput, Argument.required "where" requiredArgs.where_ DB.InputObject.encodeBlogPostWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpdateContactRequiredArguments =
    { data : DB.InputObject.ContactUpdateInput
    , where_ : DB.InputObject.ContactWhereUniqueInput
    }


updateContact : UpdateContactRequiredArguments -> SelectionSet decodesTo DB.Object.Contact -> SelectionSet (Maybe decodesTo) RootMutation
updateContact requiredArgs object_ =
    Object.selectionForCompositeField "updateContact" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeContactUpdateInput, Argument.required "where" requiredArgs.where_ DB.InputObject.encodeContactWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpdateProjectRequiredArguments =
    { data : DB.InputObject.ProjectUpdateInput
    , where_ : DB.InputObject.ProjectWhereUniqueInput
    }


updateProject : UpdateProjectRequiredArguments -> SelectionSet decodesTo DB.Object.Project -> SelectionSet (Maybe decodesTo) RootMutation
updateProject requiredArgs object_ =
    Object.selectionForCompositeField "updateProject" [ Argument.required "data" requiredArgs.data DB.InputObject.encodeProjectUpdateInput, Argument.required "where" requiredArgs.where_ DB.InputObject.encodeProjectWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteAssetRequiredArguments =
    { where_ : DB.InputObject.AssetWhereUniqueInput }


deleteAsset : DeleteAssetRequiredArguments -> SelectionSet decodesTo DB.Object.Asset -> SelectionSet (Maybe decodesTo) RootMutation
deleteAsset requiredArgs object_ =
    Object.selectionForCompositeField "deleteAsset" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeAssetWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteColorRequiredArguments =
    { where_ : DB.InputObject.ColorWhereUniqueInput }


deleteColor : DeleteColorRequiredArguments -> SelectionSet decodesTo DB.Object.Color -> SelectionSet (Maybe decodesTo) RootMutation
deleteColor requiredArgs object_ =
    Object.selectionForCompositeField "deleteColor" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeColorWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteLocationRequiredArguments =
    { where_ : DB.InputObject.LocationWhereUniqueInput }


deleteLocation : DeleteLocationRequiredArguments -> SelectionSet decodesTo DB.Object.Location -> SelectionSet (Maybe decodesTo) RootMutation
deleteLocation requiredArgs object_ =
    Object.selectionForCompositeField "deleteLocation" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeLocationWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteBlogPostRequiredArguments =
    { where_ : DB.InputObject.BlogPostWhereUniqueInput }


deleteBlogPost : DeleteBlogPostRequiredArguments -> SelectionSet decodesTo DB.Object.BlogPost -> SelectionSet (Maybe decodesTo) RootMutation
deleteBlogPost requiredArgs object_ =
    Object.selectionForCompositeField "deleteBlogPost" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeBlogPostWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteContactRequiredArguments =
    { where_ : DB.InputObject.ContactWhereUniqueInput }


deleteContact : DeleteContactRequiredArguments -> SelectionSet decodesTo DB.Object.Contact -> SelectionSet (Maybe decodesTo) RootMutation
deleteContact requiredArgs object_ =
    Object.selectionForCompositeField "deleteContact" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeContactWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias DeleteProjectRequiredArguments =
    { where_ : DB.InputObject.ProjectWhereUniqueInput }


deleteProject : DeleteProjectRequiredArguments -> SelectionSet decodesTo DB.Object.Project -> SelectionSet (Maybe decodesTo) RootMutation
deleteProject requiredArgs object_ =
    Object.selectionForCompositeField "deleteProject" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeProjectWhereUniqueInput ] object_ (identity >> Decode.nullable)


type alias UpsertAssetRequiredArguments =
    { where_ : DB.InputObject.AssetWhereUniqueInput
    , create : DB.InputObject.AssetCreateInput
    , update : DB.InputObject.AssetUpdateInput
    }


upsertAsset : UpsertAssetRequiredArguments -> SelectionSet decodesTo DB.Object.Asset -> SelectionSet decodesTo RootMutation
upsertAsset requiredArgs object_ =
    Object.selectionForCompositeField "upsertAsset" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeAssetWhereUniqueInput, Argument.required "create" requiredArgs.create DB.InputObject.encodeAssetCreateInput, Argument.required "update" requiredArgs.update DB.InputObject.encodeAssetUpdateInput ] object_ identity


type alias UpsertBlogPostRequiredArguments =
    { where_ : DB.InputObject.BlogPostWhereUniqueInput
    , create : DB.InputObject.BlogPostCreateInput
    , update : DB.InputObject.BlogPostUpdateInput
    }


upsertBlogPost : UpsertBlogPostRequiredArguments -> SelectionSet decodesTo DB.Object.BlogPost -> SelectionSet decodesTo RootMutation
upsertBlogPost requiredArgs object_ =
    Object.selectionForCompositeField "upsertBlogPost" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeBlogPostWhereUniqueInput, Argument.required "create" requiredArgs.create DB.InputObject.encodeBlogPostCreateInput, Argument.required "update" requiredArgs.update DB.InputObject.encodeBlogPostUpdateInput ] object_ identity


type alias UpsertContactRequiredArguments =
    { where_ : DB.InputObject.ContactWhereUniqueInput
    , create : DB.InputObject.ContactCreateInput
    , update : DB.InputObject.ContactUpdateInput
    }


upsertContact : UpsertContactRequiredArguments -> SelectionSet decodesTo DB.Object.Contact -> SelectionSet decodesTo RootMutation
upsertContact requiredArgs object_ =
    Object.selectionForCompositeField "upsertContact" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeContactWhereUniqueInput, Argument.required "create" requiredArgs.create DB.InputObject.encodeContactCreateInput, Argument.required "update" requiredArgs.update DB.InputObject.encodeContactUpdateInput ] object_ identity


type alias UpsertProjectRequiredArguments =
    { where_ : DB.InputObject.ProjectWhereUniqueInput
    , create : DB.InputObject.ProjectCreateInput
    , update : DB.InputObject.ProjectUpdateInput
    }


upsertProject : UpsertProjectRequiredArguments -> SelectionSet decodesTo DB.Object.Project -> SelectionSet decodesTo RootMutation
upsertProject requiredArgs object_ =
    Object.selectionForCompositeField "upsertProject" [ Argument.required "where" requiredArgs.where_ DB.InputObject.encodeProjectWhereUniqueInput, Argument.required "create" requiredArgs.create DB.InputObject.encodeProjectCreateInput, Argument.required "update" requiredArgs.update DB.InputObject.encodeProjectUpdateInput ] object_ identity


type alias UpdateManyAssetsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.AssetWhereInput }


type alias UpdateManyAssetsRequiredArguments =
    { data : DB.InputObject.AssetUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyAssets : (UpdateManyAssetsOptionalArguments -> UpdateManyAssetsOptionalArguments) -> UpdateManyAssetsRequiredArguments -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyAssets fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeAssetWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyAssets" (optionalArgs ++ [ Argument.required "data" requiredArgs.data DB.InputObject.encodeAssetUpdateManyMutationInput ]) object_ identity


type alias UpdateManyBlogPostsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.BlogPostWhereInput }


type alias UpdateManyBlogPostsRequiredArguments =
    { data : DB.InputObject.BlogPostUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyBlogPosts : (UpdateManyBlogPostsOptionalArguments -> UpdateManyBlogPostsOptionalArguments) -> UpdateManyBlogPostsRequiredArguments -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyBlogPosts fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeBlogPostWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyBlogPosts" (optionalArgs ++ [ Argument.required "data" requiredArgs.data DB.InputObject.encodeBlogPostUpdateManyMutationInput ]) object_ identity


type alias UpdateManyContactsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.ContactWhereInput }


type alias UpdateManyContactsRequiredArguments =
    { data : DB.InputObject.ContactUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyContacts : (UpdateManyContactsOptionalArguments -> UpdateManyContactsOptionalArguments) -> UpdateManyContactsRequiredArguments -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyContacts fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeContactWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyContacts" (optionalArgs ++ [ Argument.required "data" requiredArgs.data DB.InputObject.encodeContactUpdateManyMutationInput ]) object_ identity


type alias UpdateManyProjectsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.ProjectWhereInput }


type alias UpdateManyProjectsRequiredArguments =
    { data : DB.InputObject.ProjectUpdateManyMutationInput }


{-|

  - where\_ -

-}
updateManyProjects : (UpdateManyProjectsOptionalArguments -> UpdateManyProjectsOptionalArguments) -> UpdateManyProjectsRequiredArguments -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
updateManyProjects fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeProjectWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "updateManyProjects" (optionalArgs ++ [ Argument.required "data" requiredArgs.data DB.InputObject.encodeProjectUpdateManyMutationInput ]) object_ identity


type alias DeleteManyAssetsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.AssetWhereInput }


{-|

  - where\_ -

-}
deleteManyAssets : (DeleteManyAssetsOptionalArguments -> DeleteManyAssetsOptionalArguments) -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyAssets fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeAssetWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyAssets" optionalArgs object_ identity


type alias DeleteManyColorsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.ColorWhereInput }


{-|

  - where\_ -

-}
deleteManyColors : (DeleteManyColorsOptionalArguments -> DeleteManyColorsOptionalArguments) -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyColors fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeColorWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyColors" optionalArgs object_ identity


type alias DeleteManyLocationsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.LocationWhereInput }


{-|

  - where\_ -

-}
deleteManyLocations : (DeleteManyLocationsOptionalArguments -> DeleteManyLocationsOptionalArguments) -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyLocations fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeLocationWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyLocations" optionalArgs object_ identity


type alias DeleteManyBlogPostsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.BlogPostWhereInput }


{-|

  - where\_ -

-}
deleteManyBlogPosts : (DeleteManyBlogPostsOptionalArguments -> DeleteManyBlogPostsOptionalArguments) -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyBlogPosts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeBlogPostWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyBlogPosts" optionalArgs object_ identity


type alias DeleteManyContactsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.ContactWhereInput }


{-|

  - where\_ -

-}
deleteManyContacts : (DeleteManyContactsOptionalArguments -> DeleteManyContactsOptionalArguments) -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyContacts fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeContactWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyContacts" optionalArgs object_ identity


type alias DeleteManyProjectsOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.ProjectWhereInput }


{-|

  - where\_ -

-}
deleteManyProjects : (DeleteManyProjectsOptionalArguments -> DeleteManyProjectsOptionalArguments) -> SelectionSet decodesTo DB.Object.BatchPayload -> SelectionSet decodesTo RootMutation
deleteManyProjects fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeProjectWhereInput ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "deleteManyProjects" optionalArgs object_ identity
