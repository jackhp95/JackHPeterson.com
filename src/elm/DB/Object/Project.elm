-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module DB.Object.Project exposing (ImagesOptionalArguments, createdAt, description, id, images, link, myWork, name, picture, status, tags, updatedAt)

import DB.Enum.AssetOrderByInput
import DB.Enum.Status
import DB.InputObject
import DB.Object
import DB.Scalar
import DB.ScalarDecoders
import Graphql.Internal.Builder.Argument as Argument
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


status : SelectionSet DB.Enum.Status.Status DB.Object.Project
status =
    Object.selectionForField "Enum.Status.Status" "status" [] DB.Enum.Status.decoder


id : SelectionSet DB.ScalarDecoders.Id DB.Object.Project
id =
    Object.selectionForField "ScalarDecoders.Id" "id" [] (DB.ScalarDecoders.decoders |> DB.Scalar.unwrapDecoders |> .decoderId)


createdAt : SelectionSet DB.ScalarDecoders.DateTime DB.Object.Project
createdAt =
    Object.selectionForField "ScalarDecoders.DateTime" "createdAt" [] (DB.ScalarDecoders.decoders |> DB.Scalar.unwrapDecoders |> .decoderDateTime)


updatedAt : SelectionSet DB.ScalarDecoders.DateTime DB.Object.Project
updatedAt =
    Object.selectionForField "ScalarDecoders.DateTime" "updatedAt" [] (DB.ScalarDecoders.decoders |> DB.Scalar.unwrapDecoders |> .decoderDateTime)


name : SelectionSet String DB.Object.Project
name =
    Object.selectionForField "String" "name" [] Decode.string


description : SelectionSet (Maybe String) DB.Object.Project
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


myWork : SelectionSet (Maybe String) DB.Object.Project
myWork =
    Object.selectionForField "(Maybe String)" "myWork" [] (Decode.string |> Decode.nullable)


tags : SelectionSet (List String) DB.Object.Project
tags =
    Object.selectionForField "(List String)" "tags" [] (Decode.string |> Decode.list)


type alias ImagesOptionalArguments =
    { where_ : OptionalArgument DB.InputObject.AssetWhereInput
    , orderBy : OptionalArgument DB.Enum.AssetOrderByInput.AssetOrderByInput
    , skip : OptionalArgument Int
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-|

  - where\_ -

-}
images : (ImagesOptionalArguments -> ImagesOptionalArguments) -> SelectionSet decodesTo DB.Object.Asset -> SelectionSet (Maybe (List decodesTo)) DB.Object.Project
images fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { where_ = Absent, orderBy = Absent, skip = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs =
            [ Argument.optional "where" filledInOptionals.where_ DB.InputObject.encodeAssetWhereInput, Argument.optional "orderBy" filledInOptionals.orderBy (Encode.enum DB.Enum.AssetOrderByInput.toString), Argument.optional "skip" filledInOptionals.skip Encode.int, Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "images" optionalArgs object_ (identity >> Decode.list >> Decode.nullable)


link : SelectionSet (Maybe String) DB.Object.Project
link =
    Object.selectionForField "(Maybe String)" "link" [] (Decode.string |> Decode.nullable)


picture : SelectionSet decodesTo DB.Object.Asset -> SelectionSet (Maybe decodesTo) DB.Object.Project
picture object_ =
    Object.selectionForCompositeField "picture" [] object_ (identity >> Decode.nullable)
