-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module DB.InputObject exposing (AssetCreateInput(..), AssetCreateInputOptionalFields, AssetCreateInputRaw, AssetCreateInputRequiredFields, AssetCreateManyWithoutImagesProjectsInput(..), AssetCreateManyWithoutImagesProjectsInputOptionalFields, AssetCreateManyWithoutImagesProjectsInputRaw, AssetCreateOneWithoutPictureBlogPostInput(..), AssetCreateOneWithoutPictureBlogPostInputOptionalFields, AssetCreateOneWithoutPictureBlogPostInputRaw, AssetCreateOneWithoutPictureProjectsInput(..), AssetCreateOneWithoutPictureProjectsInputOptionalFields, AssetCreateOneWithoutPictureProjectsInputRaw, AssetCreateWithoutImagesProjectsInput(..), AssetCreateWithoutImagesProjectsInputOptionalFields, AssetCreateWithoutImagesProjectsInputRaw, AssetCreateWithoutImagesProjectsInputRequiredFields, AssetCreateWithoutPictureBlogPostInput(..), AssetCreateWithoutPictureBlogPostInputOptionalFields, AssetCreateWithoutPictureBlogPostInputRaw, AssetCreateWithoutPictureBlogPostInputRequiredFields, AssetCreateWithoutPictureProjectsInput(..), AssetCreateWithoutPictureProjectsInputOptionalFields, AssetCreateWithoutPictureProjectsInputRaw, AssetCreateWithoutPictureProjectsInputRequiredFields, AssetScalarWhereInput(..), AssetScalarWhereInputOptionalFields, AssetScalarWhereInputRaw, AssetSubscriptionWhereInput(..), AssetSubscriptionWhereInputOptionalFields, AssetSubscriptionWhereInputRaw, AssetTransformationInput, AssetTransformationInputOptionalFields, AssetUpdateInput(..), AssetUpdateInputOptionalFields, AssetUpdateInputRaw, AssetUpdateManyDataInput, AssetUpdateManyDataInputOptionalFields, AssetUpdateManyMutationInput, AssetUpdateManyMutationInputOptionalFields, AssetUpdateManyWithWhereNestedInput(..), AssetUpdateManyWithWhereNestedInputRaw, AssetUpdateManyWithWhereNestedInputRequiredFields, AssetUpdateManyWithoutImagesProjectsInput(..), AssetUpdateManyWithoutImagesProjectsInputOptionalFields, AssetUpdateManyWithoutImagesProjectsInputRaw, AssetUpdateOneWithoutPictureBlogPostInput(..), AssetUpdateOneWithoutPictureBlogPostInputOptionalFields, AssetUpdateOneWithoutPictureBlogPostInputRaw, AssetUpdateOneWithoutPictureProjectsInput(..), AssetUpdateOneWithoutPictureProjectsInputOptionalFields, AssetUpdateOneWithoutPictureProjectsInputRaw, AssetUpdateWithWhereUniqueWithoutImagesProjectsInput(..), AssetUpdateWithWhereUniqueWithoutImagesProjectsInputRaw, AssetUpdateWithWhereUniqueWithoutImagesProjectsInputRequiredFields, AssetUpdateWithoutImagesProjectsDataInput(..), AssetUpdateWithoutImagesProjectsDataInputOptionalFields, AssetUpdateWithoutImagesProjectsDataInputRaw, AssetUpdateWithoutPictureBlogPostDataInput(..), AssetUpdateWithoutPictureBlogPostDataInputOptionalFields, AssetUpdateWithoutPictureBlogPostDataInputRaw, AssetUpdateWithoutPictureProjectsDataInput(..), AssetUpdateWithoutPictureProjectsDataInputOptionalFields, AssetUpdateWithoutPictureProjectsDataInputRaw, AssetUpsertWithWhereUniqueWithoutImagesProjectsInput(..), AssetUpsertWithWhereUniqueWithoutImagesProjectsInputRaw, AssetUpsertWithWhereUniqueWithoutImagesProjectsInputRequiredFields, AssetUpsertWithoutPictureBlogPostInput(..), AssetUpsertWithoutPictureBlogPostInputRaw, AssetUpsertWithoutPictureBlogPostInputRequiredFields, AssetUpsertWithoutPictureProjectsInput(..), AssetUpsertWithoutPictureProjectsInputRaw, AssetUpsertWithoutPictureProjectsInputRequiredFields, AssetWhereInput(..), AssetWhereInputOptionalFields, AssetWhereInputRaw, AssetWhereUniqueInput, AssetWhereUniqueInputOptionalFields, BlogPostCreateInput(..), BlogPostCreateInputOptionalFields, BlogPostCreateInputRaw, BlogPostCreateInputRequiredFields, BlogPostCreateManyWithoutPictureInput(..), BlogPostCreateManyWithoutPictureInputOptionalFields, BlogPostCreateManyWithoutPictureInputRaw, BlogPostCreateWithoutPictureInput, BlogPostCreateWithoutPictureInputOptionalFields, BlogPostCreateWithoutPictureInputRequiredFields, BlogPostCreatetagsInput, BlogPostCreatetagsInputOptionalFields, BlogPostScalarWhereInput(..), BlogPostScalarWhereInputOptionalFields, BlogPostScalarWhereInputRaw, BlogPostSubscriptionWhereInput(..), BlogPostSubscriptionWhereInputOptionalFields, BlogPostSubscriptionWhereInputRaw, BlogPostUpdateInput(..), BlogPostUpdateInputOptionalFields, BlogPostUpdateInputRaw, BlogPostUpdateManyDataInput, BlogPostUpdateManyDataInputOptionalFields, BlogPostUpdateManyMutationInput, BlogPostUpdateManyMutationInputOptionalFields, BlogPostUpdateManyWithWhereNestedInput(..), BlogPostUpdateManyWithWhereNestedInputRaw, BlogPostUpdateManyWithWhereNestedInputRequiredFields, BlogPostUpdateManyWithoutPictureInput(..), BlogPostUpdateManyWithoutPictureInputOptionalFields, BlogPostUpdateManyWithoutPictureInputRaw, BlogPostUpdateWithWhereUniqueWithoutPictureInput, BlogPostUpdateWithWhereUniqueWithoutPictureInputRequiredFields, BlogPostUpdateWithoutPictureDataInput, BlogPostUpdateWithoutPictureDataInputOptionalFields, BlogPostUpdatetagsInput, BlogPostUpdatetagsInputOptionalFields, BlogPostUpsertWithWhereUniqueWithoutPictureInput, BlogPostUpsertWithWhereUniqueWithoutPictureInputRequiredFields, BlogPostWhereInput(..), BlogPostWhereInputOptionalFields, BlogPostWhereInputRaw, BlogPostWhereUniqueInput, BlogPostWhereUniqueInputOptionalFields, ColorSubscriptionWhereInput(..), ColorSubscriptionWhereInputOptionalFields, ColorSubscriptionWhereInputRaw, ColorWhereInput(..), ColorWhereInputOptionalFields, ColorWhereInputRaw, ColorWhereUniqueInput, ColorWhereUniqueInputOptionalFields, ContactCreateInput, ContactCreateInputOptionalFields, ContactCreateInputRequiredFields, ContactSubscriptionWhereInput(..), ContactSubscriptionWhereInputOptionalFields, ContactSubscriptionWhereInputRaw, ContactUpdateInput, ContactUpdateInputOptionalFields, ContactUpdateManyMutationInput, ContactUpdateManyMutationInputOptionalFields, ContactWhereInput(..), ContactWhereInputOptionalFields, ContactWhereInputRaw, ContactWhereUniqueInput, ContactWhereUniqueInputOptionalFields, DocumentOutputInput, DocumentOutputInputOptionalFields, DocumentTransformationInput, DocumentTransformationInputOptionalFields, ImageResizeInput, ImageResizeInputOptionalFields, ImageTransformationInput, ImageTransformationInputOptionalFields, LocationSubscriptionWhereInput(..), LocationSubscriptionWhereInputOptionalFields, LocationSubscriptionWhereInputRaw, LocationWhereInput(..), LocationWhereInputOptionalFields, LocationWhereInputRaw, LocationWhereUniqueInput, LocationWhereUniqueInputOptionalFields, ProjectsCreateInput(..), ProjectsCreateInputOptionalFields, ProjectsCreateInputRaw, ProjectsCreateInputRequiredFields, ProjectsCreateManyWithoutImagesInput(..), ProjectsCreateManyWithoutImagesInputOptionalFields, ProjectsCreateManyWithoutImagesInputRaw, ProjectsCreateManyWithoutPictureInput(..), ProjectsCreateManyWithoutPictureInputOptionalFields, ProjectsCreateManyWithoutPictureInputRaw, ProjectsCreateWithoutImagesInput(..), ProjectsCreateWithoutImagesInputOptionalFields, ProjectsCreateWithoutImagesInputRaw, ProjectsCreateWithoutImagesInputRequiredFields, ProjectsCreateWithoutPictureInput(..), ProjectsCreateWithoutPictureInputOptionalFields, ProjectsCreateWithoutPictureInputRaw, ProjectsCreateWithoutPictureInputRequiredFields, ProjectsCreatetagsInput, ProjectsCreatetagsInputOptionalFields, ProjectsScalarWhereInput(..), ProjectsScalarWhereInputOptionalFields, ProjectsScalarWhereInputRaw, ProjectsSubscriptionWhereInput(..), ProjectsSubscriptionWhereInputOptionalFields, ProjectsSubscriptionWhereInputRaw, ProjectsUpdateInput(..), ProjectsUpdateInputOptionalFields, ProjectsUpdateInputRaw, ProjectsUpdateManyDataInput, ProjectsUpdateManyDataInputOptionalFields, ProjectsUpdateManyMutationInput, ProjectsUpdateManyMutationInputOptionalFields, ProjectsUpdateManyWithWhereNestedInput(..), ProjectsUpdateManyWithWhereNestedInputRaw, ProjectsUpdateManyWithWhereNestedInputRequiredFields, ProjectsUpdateManyWithoutImagesInput(..), ProjectsUpdateManyWithoutImagesInputOptionalFields, ProjectsUpdateManyWithoutImagesInputRaw, ProjectsUpdateManyWithoutPictureInput(..), ProjectsUpdateManyWithoutPictureInputOptionalFields, ProjectsUpdateManyWithoutPictureInputRaw, ProjectsUpdateWithWhereUniqueWithoutImagesInput(..), ProjectsUpdateWithWhereUniqueWithoutImagesInputRaw, ProjectsUpdateWithWhereUniqueWithoutImagesInputRequiredFields, ProjectsUpdateWithWhereUniqueWithoutPictureInput(..), ProjectsUpdateWithWhereUniqueWithoutPictureInputRaw, ProjectsUpdateWithWhereUniqueWithoutPictureInputRequiredFields, ProjectsUpdateWithoutImagesDataInput(..), ProjectsUpdateWithoutImagesDataInputOptionalFields, ProjectsUpdateWithoutImagesDataInputRaw, ProjectsUpdateWithoutPictureDataInput(..), ProjectsUpdateWithoutPictureDataInputOptionalFields, ProjectsUpdateWithoutPictureDataInputRaw, ProjectsUpdatetagsInput, ProjectsUpdatetagsInputOptionalFields, ProjectsUpsertWithWhereUniqueWithoutImagesInput(..), ProjectsUpsertWithWhereUniqueWithoutImagesInputRaw, ProjectsUpsertWithWhereUniqueWithoutImagesInputRequiredFields, ProjectsUpsertWithWhereUniqueWithoutPictureInput(..), ProjectsUpsertWithWhereUniqueWithoutPictureInputRaw, ProjectsUpsertWithWhereUniqueWithoutPictureInputRequiredFields, ProjectsWhereInput(..), ProjectsWhereInputOptionalFields, ProjectsWhereInputRaw, ProjectsWhereUniqueInput, ProjectsWhereUniqueInputOptionalFields, buildAssetCreateInput, buildAssetCreateManyWithoutImagesProjectsInput, buildAssetCreateOneWithoutPictureBlogPostInput, buildAssetCreateOneWithoutPictureProjectsInput, buildAssetCreateWithoutImagesProjectsInput, buildAssetCreateWithoutPictureBlogPostInput, buildAssetCreateWithoutPictureProjectsInput, buildAssetScalarWhereInput, buildAssetSubscriptionWhereInput, buildAssetTransformationInput, buildAssetUpdateInput, buildAssetUpdateManyDataInput, buildAssetUpdateManyMutationInput, buildAssetUpdateManyWithWhereNestedInput, buildAssetUpdateManyWithoutImagesProjectsInput, buildAssetUpdateOneWithoutPictureBlogPostInput, buildAssetUpdateOneWithoutPictureProjectsInput, buildAssetUpdateWithWhereUniqueWithoutImagesProjectsInput, buildAssetUpdateWithoutImagesProjectsDataInput, buildAssetUpdateWithoutPictureBlogPostDataInput, buildAssetUpdateWithoutPictureProjectsDataInput, buildAssetUpsertWithWhereUniqueWithoutImagesProjectsInput, buildAssetUpsertWithoutPictureBlogPostInput, buildAssetUpsertWithoutPictureProjectsInput, buildAssetWhereInput, buildAssetWhereUniqueInput, buildBlogPostCreateInput, buildBlogPostCreateManyWithoutPictureInput, buildBlogPostCreateWithoutPictureInput, buildBlogPostCreatetagsInput, buildBlogPostScalarWhereInput, buildBlogPostSubscriptionWhereInput, buildBlogPostUpdateInput, buildBlogPostUpdateManyDataInput, buildBlogPostUpdateManyMutationInput, buildBlogPostUpdateManyWithWhereNestedInput, buildBlogPostUpdateManyWithoutPictureInput, buildBlogPostUpdateWithWhereUniqueWithoutPictureInput, buildBlogPostUpdateWithoutPictureDataInput, buildBlogPostUpdatetagsInput, buildBlogPostUpsertWithWhereUniqueWithoutPictureInput, buildBlogPostWhereInput, buildBlogPostWhereUniqueInput, buildColorSubscriptionWhereInput, buildColorWhereInput, buildColorWhereUniqueInput, buildContactCreateInput, buildContactSubscriptionWhereInput, buildContactUpdateInput, buildContactUpdateManyMutationInput, buildContactWhereInput, buildContactWhereUniqueInput, buildDocumentOutputInput, buildDocumentTransformationInput, buildImageResizeInput, buildImageTransformationInput, buildLocationSubscriptionWhereInput, buildLocationWhereInput, buildLocationWhereUniqueInput, buildProjectsCreateInput, buildProjectsCreateManyWithoutImagesInput, buildProjectsCreateManyWithoutPictureInput, buildProjectsCreateWithoutImagesInput, buildProjectsCreateWithoutPictureInput, buildProjectsCreatetagsInput, buildProjectsScalarWhereInput, buildProjectsSubscriptionWhereInput, buildProjectsUpdateInput, buildProjectsUpdateManyDataInput, buildProjectsUpdateManyMutationInput, buildProjectsUpdateManyWithWhereNestedInput, buildProjectsUpdateManyWithoutImagesInput, buildProjectsUpdateManyWithoutPictureInput, buildProjectsUpdateWithWhereUniqueWithoutImagesInput, buildProjectsUpdateWithWhereUniqueWithoutPictureInput, buildProjectsUpdateWithoutImagesDataInput, buildProjectsUpdateWithoutPictureDataInput, buildProjectsUpdatetagsInput, buildProjectsUpsertWithWhereUniqueWithoutImagesInput, buildProjectsUpsertWithWhereUniqueWithoutPictureInput, buildProjectsWhereInput, buildProjectsWhereUniqueInput, encodeAssetCreateInput, encodeAssetCreateManyWithoutImagesProjectsInput, encodeAssetCreateOneWithoutPictureBlogPostInput, encodeAssetCreateOneWithoutPictureProjectsInput, encodeAssetCreateWithoutImagesProjectsInput, encodeAssetCreateWithoutPictureBlogPostInput, encodeAssetCreateWithoutPictureProjectsInput, encodeAssetScalarWhereInput, encodeAssetSubscriptionWhereInput, encodeAssetTransformationInput, encodeAssetUpdateInput, encodeAssetUpdateManyDataInput, encodeAssetUpdateManyMutationInput, encodeAssetUpdateManyWithWhereNestedInput, encodeAssetUpdateManyWithoutImagesProjectsInput, encodeAssetUpdateOneWithoutPictureBlogPostInput, encodeAssetUpdateOneWithoutPictureProjectsInput, encodeAssetUpdateWithWhereUniqueWithoutImagesProjectsInput, encodeAssetUpdateWithoutImagesProjectsDataInput, encodeAssetUpdateWithoutPictureBlogPostDataInput, encodeAssetUpdateWithoutPictureProjectsDataInput, encodeAssetUpsertWithWhereUniqueWithoutImagesProjectsInput, encodeAssetUpsertWithoutPictureBlogPostInput, encodeAssetUpsertWithoutPictureProjectsInput, encodeAssetWhereInput, encodeAssetWhereUniqueInput, encodeBlogPostCreateInput, encodeBlogPostCreateManyWithoutPictureInput, encodeBlogPostCreateWithoutPictureInput, encodeBlogPostCreatetagsInput, encodeBlogPostScalarWhereInput, encodeBlogPostSubscriptionWhereInput, encodeBlogPostUpdateInput, encodeBlogPostUpdateManyDataInput, encodeBlogPostUpdateManyMutationInput, encodeBlogPostUpdateManyWithWhereNestedInput, encodeBlogPostUpdateManyWithoutPictureInput, encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput, encodeBlogPostUpdateWithoutPictureDataInput, encodeBlogPostUpdatetagsInput, encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput, encodeBlogPostWhereInput, encodeBlogPostWhereUniqueInput, encodeColorSubscriptionWhereInput, encodeColorWhereInput, encodeColorWhereUniqueInput, encodeContactCreateInput, encodeContactSubscriptionWhereInput, encodeContactUpdateInput, encodeContactUpdateManyMutationInput, encodeContactWhereInput, encodeContactWhereUniqueInput, encodeDocumentOutputInput, encodeDocumentTransformationInput, encodeImageResizeInput, encodeImageTransformationInput, encodeLocationSubscriptionWhereInput, encodeLocationWhereInput, encodeLocationWhereUniqueInput, encodeProjectsCreateInput, encodeProjectsCreateManyWithoutImagesInput, encodeProjectsCreateManyWithoutPictureInput, encodeProjectsCreateWithoutImagesInput, encodeProjectsCreateWithoutPictureInput, encodeProjectsCreatetagsInput, encodeProjectsScalarWhereInput, encodeProjectsSubscriptionWhereInput, encodeProjectsUpdateInput, encodeProjectsUpdateManyDataInput, encodeProjectsUpdateManyMutationInput, encodeProjectsUpdateManyWithWhereNestedInput, encodeProjectsUpdateManyWithoutImagesInput, encodeProjectsUpdateManyWithoutPictureInput, encodeProjectsUpdateWithWhereUniqueWithoutImagesInput, encodeProjectsUpdateWithWhereUniqueWithoutPictureInput, encodeProjectsUpdateWithoutImagesDataInput, encodeProjectsUpdateWithoutPictureDataInput, encodeProjectsUpdatetagsInput, encodeProjectsUpsertWithWhereUniqueWithoutImagesInput, encodeProjectsUpsertWithWhereUniqueWithoutPictureInput, encodeProjectsWhereInput, encodeProjectsWhereUniqueInput)

import DB.Enum.DocumentFileTypes
import DB.Enum.ImageFit
import DB.Enum.MutationType
import DB.Enum.Status
import DB.Scalar
import DB.ScalarDecoders
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))


buildAssetCreateInput : AssetCreateInputRequiredFields -> (AssetCreateInputOptionalFields -> AssetCreateInputOptionalFields) -> AssetCreateInput
buildAssetCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProjects = Absent, pictureProjects = Absent }
    in
    AssetCreateInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProjects = optionals.imagesProjects, pictureProjects = optionals.pictureProjects }


type alias AssetCreateInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsCreateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsCreateManyWithoutPictureInput
    }


{-| Type alias for the `AssetCreateInput` attributes. Note that this type
needs to use the `AssetCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsCreateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsCreateManyWithoutPictureInput
    }


{-| Type for the AssetCreateInput input object.
-}
type AssetCreateInput
    = AssetCreateInput AssetCreateInputRaw


{-| Encode a AssetCreateInput into a value that can be used as an argument.
-}
encodeAssetCreateInput : AssetCreateInput -> Value
encodeAssetCreateInput (AssetCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostCreateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProjects", encodeProjectsCreateManyWithoutImagesInput |> Encode.optional input.imagesProjects ), ( "pictureProjects", encodeProjectsCreateManyWithoutPictureInput |> Encode.optional input.pictureProjects ) ]


buildAssetCreateManyWithoutImagesProjectsInput : (AssetCreateManyWithoutImagesProjectsInputOptionalFields -> AssetCreateManyWithoutImagesProjectsInputOptionalFields) -> AssetCreateManyWithoutImagesProjectsInput
buildAssetCreateManyWithoutImagesProjectsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    AssetCreateManyWithoutImagesProjectsInput { create = optionals.create, connect = optionals.connect }


type alias AssetCreateManyWithoutImagesProjectsInputOptionalFields =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectsInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    }


{-| Type alias for the `AssetCreateManyWithoutImagesProjectsInput` attributes. Note that this type
needs to use the `AssetCreateManyWithoutImagesProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateManyWithoutImagesProjectsInputRaw =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectsInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    }


{-| Type for the AssetCreateManyWithoutImagesProjectsInput input object.
-}
type AssetCreateManyWithoutImagesProjectsInput
    = AssetCreateManyWithoutImagesProjectsInput AssetCreateManyWithoutImagesProjectsInputRaw


{-| Encode a AssetCreateManyWithoutImagesProjectsInput into a value that can be used as an argument.
-}
encodeAssetCreateManyWithoutImagesProjectsInput : AssetCreateManyWithoutImagesProjectsInput -> Value
encodeAssetCreateManyWithoutImagesProjectsInput (AssetCreateManyWithoutImagesProjectsInput input) =
    Encode.maybeObject
        [ ( "create", (encodeAssetCreateWithoutImagesProjectsInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildAssetCreateOneWithoutPictureBlogPostInput : (AssetCreateOneWithoutPictureBlogPostInputOptionalFields -> AssetCreateOneWithoutPictureBlogPostInputOptionalFields) -> AssetCreateOneWithoutPictureBlogPostInput
buildAssetCreateOneWithoutPictureBlogPostInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    AssetCreateOneWithoutPictureBlogPostInput { create = optionals.create, connect = optionals.connect }


type alias AssetCreateOneWithoutPictureBlogPostInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type alias for the `AssetCreateOneWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetCreateOneWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateOneWithoutPictureBlogPostInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type for the AssetCreateOneWithoutPictureBlogPostInput input object.
-}
type AssetCreateOneWithoutPictureBlogPostInput
    = AssetCreateOneWithoutPictureBlogPostInput AssetCreateOneWithoutPictureBlogPostInputRaw


{-| Encode a AssetCreateOneWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetCreateOneWithoutPictureBlogPostInput : AssetCreateOneWithoutPictureBlogPostInput -> Value
encodeAssetCreateOneWithoutPictureBlogPostInput (AssetCreateOneWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureBlogPostInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ) ]


buildAssetCreateOneWithoutPictureProjectsInput : (AssetCreateOneWithoutPictureProjectsInputOptionalFields -> AssetCreateOneWithoutPictureProjectsInputOptionalFields) -> AssetCreateOneWithoutPictureProjectsInput
buildAssetCreateOneWithoutPictureProjectsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    AssetCreateOneWithoutPictureProjectsInput { create = optionals.create, connect = optionals.connect }


type alias AssetCreateOneWithoutPictureProjectsInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureProjectsInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type alias for the `AssetCreateOneWithoutPictureProjectsInput` attributes. Note that this type
needs to use the `AssetCreateOneWithoutPictureProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateOneWithoutPictureProjectsInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureProjectsInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type for the AssetCreateOneWithoutPictureProjectsInput input object.
-}
type AssetCreateOneWithoutPictureProjectsInput
    = AssetCreateOneWithoutPictureProjectsInput AssetCreateOneWithoutPictureProjectsInputRaw


{-| Encode a AssetCreateOneWithoutPictureProjectsInput into a value that can be used as an argument.
-}
encodeAssetCreateOneWithoutPictureProjectsInput : AssetCreateOneWithoutPictureProjectsInput -> Value
encodeAssetCreateOneWithoutPictureProjectsInput (AssetCreateOneWithoutPictureProjectsInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureProjectsInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ) ]


buildAssetCreateWithoutImagesProjectsInput : AssetCreateWithoutImagesProjectsInputRequiredFields -> (AssetCreateWithoutImagesProjectsInputOptionalFields -> AssetCreateWithoutImagesProjectsInputOptionalFields) -> AssetCreateWithoutImagesProjectsInput
buildAssetCreateWithoutImagesProjectsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, pictureProjects = Absent }
    in
    AssetCreateWithoutImagesProjectsInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, pictureProjects = optionals.pictureProjects }


type alias AssetCreateWithoutImagesProjectsInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateWithoutImagesProjectsInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , pictureProjects : OptionalArgument ProjectsCreateManyWithoutPictureInput
    }


{-| Type alias for the `AssetCreateWithoutImagesProjectsInput` attributes. Note that this type
needs to use the `AssetCreateWithoutImagesProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateWithoutImagesProjectsInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , pictureProjects : OptionalArgument ProjectsCreateManyWithoutPictureInput
    }


{-| Type for the AssetCreateWithoutImagesProjectsInput input object.
-}
type AssetCreateWithoutImagesProjectsInput
    = AssetCreateWithoutImagesProjectsInput AssetCreateWithoutImagesProjectsInputRaw


{-| Encode a AssetCreateWithoutImagesProjectsInput into a value that can be used as an argument.
-}
encodeAssetCreateWithoutImagesProjectsInput : AssetCreateWithoutImagesProjectsInput -> Value
encodeAssetCreateWithoutImagesProjectsInput (AssetCreateWithoutImagesProjectsInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostCreateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "pictureProjects", encodeProjectsCreateManyWithoutPictureInput |> Encode.optional input.pictureProjects ) ]


buildAssetCreateWithoutPictureBlogPostInput : AssetCreateWithoutPictureBlogPostInputRequiredFields -> (AssetCreateWithoutPictureBlogPostInputOptionalFields -> AssetCreateWithoutPictureBlogPostInputOptionalFields) -> AssetCreateWithoutPictureBlogPostInput
buildAssetCreateWithoutPictureBlogPostInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, imagesProjects = Absent, pictureProjects = Absent }
    in
    AssetCreateWithoutPictureBlogPostInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, imagesProjects = optionals.imagesProjects, pictureProjects = optionals.pictureProjects }


type alias AssetCreateWithoutPictureBlogPostInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateWithoutPictureBlogPostInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProjects : OptionalArgument ProjectsCreateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsCreateManyWithoutPictureInput
    }


{-| Type alias for the `AssetCreateWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetCreateWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateWithoutPictureBlogPostInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProjects : OptionalArgument ProjectsCreateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsCreateManyWithoutPictureInput
    }


{-| Type for the AssetCreateWithoutPictureBlogPostInput input object.
-}
type AssetCreateWithoutPictureBlogPostInput
    = AssetCreateWithoutPictureBlogPostInput AssetCreateWithoutPictureBlogPostInputRaw


{-| Encode a AssetCreateWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetCreateWithoutPictureBlogPostInput : AssetCreateWithoutPictureBlogPostInput -> Value
encodeAssetCreateWithoutPictureBlogPostInput (AssetCreateWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "imagesProjects", encodeProjectsCreateManyWithoutImagesInput |> Encode.optional input.imagesProjects ), ( "pictureProjects", encodeProjectsCreateManyWithoutPictureInput |> Encode.optional input.pictureProjects ) ]


buildAssetCreateWithoutPictureProjectsInput : AssetCreateWithoutPictureProjectsInputRequiredFields -> (AssetCreateWithoutPictureProjectsInputOptionalFields -> AssetCreateWithoutPictureProjectsInputOptionalFields) -> AssetCreateWithoutPictureProjectsInput
buildAssetCreateWithoutPictureProjectsInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProjects = Absent }
    in
    AssetCreateWithoutPictureProjectsInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProjects = optionals.imagesProjects }


type alias AssetCreateWithoutPictureProjectsInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateWithoutPictureProjectsInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsCreateManyWithoutImagesInput
    }


{-| Type alias for the `AssetCreateWithoutPictureProjectsInput` attributes. Note that this type
needs to use the `AssetCreateWithoutPictureProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateWithoutPictureProjectsInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsCreateManyWithoutImagesInput
    }


{-| Type for the AssetCreateWithoutPictureProjectsInput input object.
-}
type AssetCreateWithoutPictureProjectsInput
    = AssetCreateWithoutPictureProjectsInput AssetCreateWithoutPictureProjectsInputRaw


{-| Encode a AssetCreateWithoutPictureProjectsInput into a value that can be used as an argument.
-}
encodeAssetCreateWithoutPictureProjectsInput : AssetCreateWithoutPictureProjectsInput -> Value
encodeAssetCreateWithoutPictureProjectsInput (AssetCreateWithoutPictureProjectsInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostCreateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProjects", encodeProjectsCreateManyWithoutImagesInput |> Encode.optional input.imagesProjects ) ]


buildAssetScalarWhereInput : (AssetScalarWhereInputOptionalFields -> AssetScalarWhereInputOptionalFields) -> AssetScalarWhereInput
buildAssetScalarWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, handle = Absent, handle_not = Absent, handle_in = Absent, handle_not_in = Absent, handle_lt = Absent, handle_lte = Absent, handle_gt = Absent, handle_gte = Absent, handle_contains = Absent, handle_not_contains = Absent, handle_starts_with = Absent, handle_not_starts_with = Absent, handle_ends_with = Absent, handle_not_ends_with = Absent, fileName = Absent, fileName_not = Absent, fileName_in = Absent, fileName_not_in = Absent, fileName_lt = Absent, fileName_lte = Absent, fileName_gt = Absent, fileName_gte = Absent, fileName_contains = Absent, fileName_not_contains = Absent, fileName_starts_with = Absent, fileName_not_starts_with = Absent, fileName_ends_with = Absent, fileName_not_ends_with = Absent, height = Absent, height_not = Absent, height_in = Absent, height_not_in = Absent, height_lt = Absent, height_lte = Absent, height_gt = Absent, height_gte = Absent, mimeType = Absent, mimeType_not = Absent, mimeType_in = Absent, mimeType_not_in = Absent, mimeType_lt = Absent, mimeType_lte = Absent, mimeType_gt = Absent, mimeType_gte = Absent, mimeType_contains = Absent, mimeType_not_contains = Absent, mimeType_starts_with = Absent, mimeType_not_starts_with = Absent, mimeType_ends_with = Absent, mimeType_not_ends_with = Absent, size = Absent, size_not = Absent, size_in = Absent, size_not_in = Absent, size_lt = Absent, size_lte = Absent, size_gt = Absent, size_gte = Absent, width = Absent, width_not = Absent, width_in = Absent, width_not_in = Absent, width_lt = Absent, width_lte = Absent, width_gt = Absent, width_gte = Absent }
    in
    AssetScalarWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, handle = optionals.handle, handle_not = optionals.handle_not, handle_in = optionals.handle_in, handle_not_in = optionals.handle_not_in, handle_lt = optionals.handle_lt, handle_lte = optionals.handle_lte, handle_gt = optionals.handle_gt, handle_gte = optionals.handle_gte, handle_contains = optionals.handle_contains, handle_not_contains = optionals.handle_not_contains, handle_starts_with = optionals.handle_starts_with, handle_not_starts_with = optionals.handle_not_starts_with, handle_ends_with = optionals.handle_ends_with, handle_not_ends_with = optionals.handle_not_ends_with, fileName = optionals.fileName, fileName_not = optionals.fileName_not, fileName_in = optionals.fileName_in, fileName_not_in = optionals.fileName_not_in, fileName_lt = optionals.fileName_lt, fileName_lte = optionals.fileName_lte, fileName_gt = optionals.fileName_gt, fileName_gte = optionals.fileName_gte, fileName_contains = optionals.fileName_contains, fileName_not_contains = optionals.fileName_not_contains, fileName_starts_with = optionals.fileName_starts_with, fileName_not_starts_with = optionals.fileName_not_starts_with, fileName_ends_with = optionals.fileName_ends_with, fileName_not_ends_with = optionals.fileName_not_ends_with, height = optionals.height, height_not = optionals.height_not, height_in = optionals.height_in, height_not_in = optionals.height_not_in, height_lt = optionals.height_lt, height_lte = optionals.height_lte, height_gt = optionals.height_gt, height_gte = optionals.height_gte, mimeType = optionals.mimeType, mimeType_not = optionals.mimeType_not, mimeType_in = optionals.mimeType_in, mimeType_not_in = optionals.mimeType_not_in, mimeType_lt = optionals.mimeType_lt, mimeType_lte = optionals.mimeType_lte, mimeType_gt = optionals.mimeType_gt, mimeType_gte = optionals.mimeType_gte, mimeType_contains = optionals.mimeType_contains, mimeType_not_contains = optionals.mimeType_not_contains, mimeType_starts_with = optionals.mimeType_starts_with, mimeType_not_starts_with = optionals.mimeType_not_starts_with, mimeType_ends_with = optionals.mimeType_ends_with, mimeType_not_ends_with = optionals.mimeType_not_ends_with, size = optionals.size, size_not = optionals.size_not, size_in = optionals.size_in, size_not_in = optionals.size_not_in, size_lt = optionals.size_lt, size_lte = optionals.size_lte, size_gt = optionals.size_gt, size_gte = optionals.size_gte, width = optionals.width, width_not = optionals.width_not, width_in = optionals.width_in, width_not_in = optionals.width_not_in, width_lt = optionals.width_lt, width_lte = optionals.width_lte, width_gt = optionals.width_gt, width_gte = optionals.width_gte }


type alias AssetScalarWhereInputOptionalFields =
    { and : OptionalArgument (List AssetScalarWhereInput)
    , or : OptionalArgument (List AssetScalarWhereInput)
    , not : OptionalArgument (List AssetScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    }


{-| Type alias for the `AssetScalarWhereInput` attributes. Note that this type
needs to use the `AssetScalarWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetScalarWhereInputRaw =
    { and : OptionalArgument (List AssetScalarWhereInput)
    , or : OptionalArgument (List AssetScalarWhereInput)
    , not : OptionalArgument (List AssetScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    }


{-| Type for the AssetScalarWhereInput input object.
-}
type AssetScalarWhereInput
    = AssetScalarWhereInput AssetScalarWhereInputRaw


{-| Encode a AssetScalarWhereInput into a value that can be used as an argument.
-}
encodeAssetScalarWhereInput : AssetScalarWhereInput -> Value
encodeAssetScalarWhereInput (AssetScalarWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "handle_not", Encode.string |> Encode.optional input.handle_not ), ( "handle_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_in ), ( "handle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_not_in ), ( "handle_lt", Encode.string |> Encode.optional input.handle_lt ), ( "handle_lte", Encode.string |> Encode.optional input.handle_lte ), ( "handle_gt", Encode.string |> Encode.optional input.handle_gt ), ( "handle_gte", Encode.string |> Encode.optional input.handle_gte ), ( "handle_contains", Encode.string |> Encode.optional input.handle_contains ), ( "handle_not_contains", Encode.string |> Encode.optional input.handle_not_contains ), ( "handle_starts_with", Encode.string |> Encode.optional input.handle_starts_with ), ( "handle_not_starts_with", Encode.string |> Encode.optional input.handle_not_starts_with ), ( "handle_ends_with", Encode.string |> Encode.optional input.handle_ends_with ), ( "handle_not_ends_with", Encode.string |> Encode.optional input.handle_not_ends_with ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "fileName_not", Encode.string |> Encode.optional input.fileName_not ), ( "fileName_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_in ), ( "fileName_not_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_not_in ), ( "fileName_lt", Encode.string |> Encode.optional input.fileName_lt ), ( "fileName_lte", Encode.string |> Encode.optional input.fileName_lte ), ( "fileName_gt", Encode.string |> Encode.optional input.fileName_gt ), ( "fileName_gte", Encode.string |> Encode.optional input.fileName_gte ), ( "fileName_contains", Encode.string |> Encode.optional input.fileName_contains ), ( "fileName_not_contains", Encode.string |> Encode.optional input.fileName_not_contains ), ( "fileName_starts_with", Encode.string |> Encode.optional input.fileName_starts_with ), ( "fileName_not_starts_with", Encode.string |> Encode.optional input.fileName_not_starts_with ), ( "fileName_ends_with", Encode.string |> Encode.optional input.fileName_ends_with ), ( "fileName_not_ends_with", Encode.string |> Encode.optional input.fileName_not_ends_with ), ( "height", Encode.float |> Encode.optional input.height ), ( "height_not", Encode.float |> Encode.optional input.height_not ), ( "height_in", (Encode.float |> Encode.list) |> Encode.optional input.height_in ), ( "height_not_in", (Encode.float |> Encode.list) |> Encode.optional input.height_not_in ), ( "height_lt", Encode.float |> Encode.optional input.height_lt ), ( "height_lte", Encode.float |> Encode.optional input.height_lte ), ( "height_gt", Encode.float |> Encode.optional input.height_gt ), ( "height_gte", Encode.float |> Encode.optional input.height_gte ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "mimeType_not", Encode.string |> Encode.optional input.mimeType_not ), ( "mimeType_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_in ), ( "mimeType_not_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_not_in ), ( "mimeType_lt", Encode.string |> Encode.optional input.mimeType_lt ), ( "mimeType_lte", Encode.string |> Encode.optional input.mimeType_lte ), ( "mimeType_gt", Encode.string |> Encode.optional input.mimeType_gt ), ( "mimeType_gte", Encode.string |> Encode.optional input.mimeType_gte ), ( "mimeType_contains", Encode.string |> Encode.optional input.mimeType_contains ), ( "mimeType_not_contains", Encode.string |> Encode.optional input.mimeType_not_contains ), ( "mimeType_starts_with", Encode.string |> Encode.optional input.mimeType_starts_with ), ( "mimeType_not_starts_with", Encode.string |> Encode.optional input.mimeType_not_starts_with ), ( "mimeType_ends_with", Encode.string |> Encode.optional input.mimeType_ends_with ), ( "mimeType_not_ends_with", Encode.string |> Encode.optional input.mimeType_not_ends_with ), ( "size", Encode.float |> Encode.optional input.size ), ( "size_not", Encode.float |> Encode.optional input.size_not ), ( "size_in", (Encode.float |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.float |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.float |> Encode.optional input.size_lt ), ( "size_lte", Encode.float |> Encode.optional input.size_lte ), ( "size_gt", Encode.float |> Encode.optional input.size_gt ), ( "size_gte", Encode.float |> Encode.optional input.size_gte ), ( "width", Encode.float |> Encode.optional input.width ), ( "width_not", Encode.float |> Encode.optional input.width_not ), ( "width_in", (Encode.float |> Encode.list) |> Encode.optional input.width_in ), ( "width_not_in", (Encode.float |> Encode.list) |> Encode.optional input.width_not_in ), ( "width_lt", Encode.float |> Encode.optional input.width_lt ), ( "width_lte", Encode.float |> Encode.optional input.width_lte ), ( "width_gt", Encode.float |> Encode.optional input.width_gt ), ( "width_gte", Encode.float |> Encode.optional input.width_gte ) ]


buildAssetSubscriptionWhereInput : (AssetSubscriptionWhereInputOptionalFields -> AssetSubscriptionWhereInputOptionalFields) -> AssetSubscriptionWhereInput
buildAssetSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    AssetSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias AssetSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List AssetSubscriptionWhereInput)
    , or : OptionalArgument (List AssetSubscriptionWhereInput)
    , not : OptionalArgument (List AssetSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `AssetSubscriptionWhereInput` attributes. Note that this type
needs to use the `AssetSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetSubscriptionWhereInputRaw =
    { and : OptionalArgument (List AssetSubscriptionWhereInput)
    , or : OptionalArgument (List AssetSubscriptionWhereInput)
    , not : OptionalArgument (List AssetSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument AssetWhereInput
    }


{-| Type for the AssetSubscriptionWhereInput input object.
-}
type AssetSubscriptionWhereInput
    = AssetSubscriptionWhereInput AssetSubscriptionWhereInputRaw


{-| Encode a AssetSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeAssetSubscriptionWhereInput : AssetSubscriptionWhereInput -> Value
encodeAssetSubscriptionWhereInput (AssetSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeAssetWhereInput |> Encode.optional input.node ) ]


buildAssetTransformationInput : (AssetTransformationInputOptionalFields -> AssetTransformationInputOptionalFields) -> AssetTransformationInput
buildAssetTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { image = Absent, document = Absent, validateOptions = Absent }
    in
    { image = optionals.image, document = optionals.document, validateOptions = optionals.validateOptions }


type alias AssetTransformationInputOptionalFields =
    { image : OptionalArgument ImageTransformationInput
    , document : OptionalArgument DocumentTransformationInput
    , validateOptions : OptionalArgument Bool
    }


{-| Type for the AssetTransformationInput input object.
-}
type alias AssetTransformationInput =
    { image : OptionalArgument ImageTransformationInput
    , document : OptionalArgument DocumentTransformationInput
    , validateOptions : OptionalArgument Bool
    }


{-| Encode a AssetTransformationInput into a value that can be used as an argument.
-}
encodeAssetTransformationInput : AssetTransformationInput -> Value
encodeAssetTransformationInput input =
    Encode.maybeObject
        [ ( "image", encodeImageTransformationInput |> Encode.optional input.image ), ( "document", encodeDocumentTransformationInput |> Encode.optional input.document ), ( "validateOptions", Encode.bool |> Encode.optional input.validateOptions ) ]


buildAssetUpdateInput : (AssetUpdateInputOptionalFields -> AssetUpdateInputOptionalFields) -> AssetUpdateInput
buildAssetUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProjects = Absent, pictureProjects = Absent }
    in
    AssetUpdateInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProjects = optionals.imagesProjects, pictureProjects = optionals.pictureProjects }


type alias AssetUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsUpdateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsUpdateManyWithoutPictureInput
    }


{-| Type alias for the `AssetUpdateInput` attributes. Note that this type
needs to use the `AssetUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsUpdateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsUpdateManyWithoutPictureInput
    }


{-| Type for the AssetUpdateInput input object.
-}
type AssetUpdateInput
    = AssetUpdateInput AssetUpdateInputRaw


{-| Encode a AssetUpdateInput into a value that can be used as an argument.
-}
encodeAssetUpdateInput : AssetUpdateInput -> Value
encodeAssetUpdateInput (AssetUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostUpdateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProjects", encodeProjectsUpdateManyWithoutImagesInput |> Encode.optional input.imagesProjects ), ( "pictureProjects", encodeProjectsUpdateManyWithoutPictureInput |> Encode.optional input.pictureProjects ) ]


buildAssetUpdateManyDataInput : (AssetUpdateManyDataInputOptionalFields -> AssetUpdateManyDataInputOptionalFields) -> AssetUpdateManyDataInput
buildAssetUpdateManyDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent }
    in
    { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width }


type alias AssetUpdateManyDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Type for the AssetUpdateManyDataInput input object.
-}
type alias AssetUpdateManyDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Encode a AssetUpdateManyDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyDataInput : AssetUpdateManyDataInput -> Value
encodeAssetUpdateManyDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ) ]


buildAssetUpdateManyMutationInput : (AssetUpdateManyMutationInputOptionalFields -> AssetUpdateManyMutationInputOptionalFields) -> AssetUpdateManyMutationInput
buildAssetUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent }
    in
    { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width }


type alias AssetUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Type for the AssetUpdateManyMutationInput input object.
-}
type alias AssetUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Encode a AssetUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyMutationInput : AssetUpdateManyMutationInput -> Value
encodeAssetUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ) ]


buildAssetUpdateManyWithWhereNestedInput : AssetUpdateManyWithWhereNestedInputRequiredFields -> AssetUpdateManyWithWhereNestedInput
buildAssetUpdateManyWithWhereNestedInput required =
    AssetUpdateManyWithWhereNestedInput { where_ = required.where_, data = required.data }


type alias AssetUpdateManyWithWhereNestedInputRequiredFields =
    { where_ : AssetScalarWhereInput
    , data : AssetUpdateManyDataInput
    }


{-| Type alias for the `AssetUpdateManyWithWhereNestedInput` attributes. Note that this type
needs to use the `AssetUpdateManyWithWhereNestedInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateManyWithWhereNestedInputRaw =
    { where_ : AssetScalarWhereInput
    , data : AssetUpdateManyDataInput
    }


{-| Type for the AssetUpdateManyWithWhereNestedInput input object.
-}
type AssetUpdateManyWithWhereNestedInput
    = AssetUpdateManyWithWhereNestedInput AssetUpdateManyWithWhereNestedInputRaw


{-| Encode a AssetUpdateManyWithWhereNestedInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyWithWhereNestedInput : AssetUpdateManyWithWhereNestedInput -> Value
encodeAssetUpdateManyWithWhereNestedInput (AssetUpdateManyWithWhereNestedInput input) =
    Encode.maybeObject
        [ ( "where", encodeAssetScalarWhereInput input.where_ |> Just ), ( "data", encodeAssetUpdateManyDataInput input.data |> Just ) ]


buildAssetUpdateManyWithoutImagesProjectsInput : (AssetUpdateManyWithoutImagesProjectsInputOptionalFields -> AssetUpdateManyWithoutImagesProjectsInputOptionalFields) -> AssetUpdateManyWithoutImagesProjectsInput
buildAssetUpdateManyWithoutImagesProjectsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    AssetUpdateManyWithoutImagesProjectsInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias AssetUpdateManyWithoutImagesProjectsInputOptionalFields =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectsInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    , disconnect : OptionalArgument (List AssetWhereUniqueInput)
    , delete : OptionalArgument (List AssetWhereUniqueInput)
    , update : OptionalArgument (List AssetUpdateWithWhereUniqueWithoutImagesProjectsInput)
    , updateMany : OptionalArgument (List AssetUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List AssetScalarWhereInput)
    , upsert : OptionalArgument (List AssetUpsertWithWhereUniqueWithoutImagesProjectsInput)
    }


{-| Type alias for the `AssetUpdateManyWithoutImagesProjectsInput` attributes. Note that this type
needs to use the `AssetUpdateManyWithoutImagesProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateManyWithoutImagesProjectsInputRaw =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectsInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    , disconnect : OptionalArgument (List AssetWhereUniqueInput)
    , delete : OptionalArgument (List AssetWhereUniqueInput)
    , update : OptionalArgument (List AssetUpdateWithWhereUniqueWithoutImagesProjectsInput)
    , updateMany : OptionalArgument (List AssetUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List AssetScalarWhereInput)
    , upsert : OptionalArgument (List AssetUpsertWithWhereUniqueWithoutImagesProjectsInput)
    }


{-| Type for the AssetUpdateManyWithoutImagesProjectsInput input object.
-}
type AssetUpdateManyWithoutImagesProjectsInput
    = AssetUpdateManyWithoutImagesProjectsInput AssetUpdateManyWithoutImagesProjectsInputRaw


{-| Encode a AssetUpdateManyWithoutImagesProjectsInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyWithoutImagesProjectsInput : AssetUpdateManyWithoutImagesProjectsInput -> Value
encodeAssetUpdateManyWithoutImagesProjectsInput (AssetUpdateManyWithoutImagesProjectsInput input) =
    Encode.maybeObject
        [ ( "create", (encodeAssetCreateWithoutImagesProjectsInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "disconnect", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeAssetUpdateWithWhereUniqueWithoutImagesProjectsInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeAssetUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeAssetUpsertWithWhereUniqueWithoutImagesProjectsInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildAssetUpdateOneWithoutPictureBlogPostInput : (AssetUpdateOneWithoutPictureBlogPostInputOptionalFields -> AssetUpdateOneWithoutPictureBlogPostInputOptionalFields) -> AssetUpdateOneWithoutPictureBlogPostInput
buildAssetUpdateOneWithoutPictureBlogPostInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    AssetUpdateOneWithoutPictureBlogPostInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias AssetUpdateOneWithoutPictureBlogPostInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureBlogPostDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureBlogPostInput
    }


{-| Type alias for the `AssetUpdateOneWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetUpdateOneWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateOneWithoutPictureBlogPostInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureBlogPostDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureBlogPostInput
    }


{-| Type for the AssetUpdateOneWithoutPictureBlogPostInput input object.
-}
type AssetUpdateOneWithoutPictureBlogPostInput
    = AssetUpdateOneWithoutPictureBlogPostInput AssetUpdateOneWithoutPictureBlogPostInputRaw


{-| Encode a AssetUpdateOneWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetUpdateOneWithoutPictureBlogPostInput : AssetUpdateOneWithoutPictureBlogPostInput -> Value
encodeAssetUpdateOneWithoutPictureBlogPostInput (AssetUpdateOneWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureBlogPostInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ), ( "disconnect", Encode.bool |> Encode.optional input.disconnect ), ( "delete", Encode.bool |> Encode.optional input.delete ), ( "update", encodeAssetUpdateWithoutPictureBlogPostDataInput |> Encode.optional input.update ), ( "upsert", encodeAssetUpsertWithoutPictureBlogPostInput |> Encode.optional input.upsert ) ]


buildAssetUpdateOneWithoutPictureProjectsInput : (AssetUpdateOneWithoutPictureProjectsInputOptionalFields -> AssetUpdateOneWithoutPictureProjectsInputOptionalFields) -> AssetUpdateOneWithoutPictureProjectsInput
buildAssetUpdateOneWithoutPictureProjectsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    AssetUpdateOneWithoutPictureProjectsInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias AssetUpdateOneWithoutPictureProjectsInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureProjectsInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureProjectsDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureProjectsInput
    }


{-| Type alias for the `AssetUpdateOneWithoutPictureProjectsInput` attributes. Note that this type
needs to use the `AssetUpdateOneWithoutPictureProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateOneWithoutPictureProjectsInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureProjectsInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureProjectsDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureProjectsInput
    }


{-| Type for the AssetUpdateOneWithoutPictureProjectsInput input object.
-}
type AssetUpdateOneWithoutPictureProjectsInput
    = AssetUpdateOneWithoutPictureProjectsInput AssetUpdateOneWithoutPictureProjectsInputRaw


{-| Encode a AssetUpdateOneWithoutPictureProjectsInput into a value that can be used as an argument.
-}
encodeAssetUpdateOneWithoutPictureProjectsInput : AssetUpdateOneWithoutPictureProjectsInput -> Value
encodeAssetUpdateOneWithoutPictureProjectsInput (AssetUpdateOneWithoutPictureProjectsInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureProjectsInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ), ( "disconnect", Encode.bool |> Encode.optional input.disconnect ), ( "delete", Encode.bool |> Encode.optional input.delete ), ( "update", encodeAssetUpdateWithoutPictureProjectsDataInput |> Encode.optional input.update ), ( "upsert", encodeAssetUpsertWithoutPictureProjectsInput |> Encode.optional input.upsert ) ]


buildAssetUpdateWithWhereUniqueWithoutImagesProjectsInput : AssetUpdateWithWhereUniqueWithoutImagesProjectsInputRequiredFields -> AssetUpdateWithWhereUniqueWithoutImagesProjectsInput
buildAssetUpdateWithWhereUniqueWithoutImagesProjectsInput required =
    AssetUpdateWithWhereUniqueWithoutImagesProjectsInput { where_ = required.where_, data = required.data }


type alias AssetUpdateWithWhereUniqueWithoutImagesProjectsInputRequiredFields =
    { where_ : AssetWhereUniqueInput
    , data : AssetUpdateWithoutImagesProjectsDataInput
    }


{-| Type alias for the `AssetUpdateWithWhereUniqueWithoutImagesProjectsInput` attributes. Note that this type
needs to use the `AssetUpdateWithWhereUniqueWithoutImagesProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithWhereUniqueWithoutImagesProjectsInputRaw =
    { where_ : AssetWhereUniqueInput
    , data : AssetUpdateWithoutImagesProjectsDataInput
    }


{-| Type for the AssetUpdateWithWhereUniqueWithoutImagesProjectsInput input object.
-}
type AssetUpdateWithWhereUniqueWithoutImagesProjectsInput
    = AssetUpdateWithWhereUniqueWithoutImagesProjectsInput AssetUpdateWithWhereUniqueWithoutImagesProjectsInputRaw


{-| Encode a AssetUpdateWithWhereUniqueWithoutImagesProjectsInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithWhereUniqueWithoutImagesProjectsInput : AssetUpdateWithWhereUniqueWithoutImagesProjectsInput -> Value
encodeAssetUpdateWithWhereUniqueWithoutImagesProjectsInput (AssetUpdateWithWhereUniqueWithoutImagesProjectsInput input) =
    Encode.maybeObject
        [ ( "where", encodeAssetWhereUniqueInput input.where_ |> Just ), ( "data", encodeAssetUpdateWithoutImagesProjectsDataInput input.data |> Just ) ]


buildAssetUpdateWithoutImagesProjectsDataInput : (AssetUpdateWithoutImagesProjectsDataInputOptionalFields -> AssetUpdateWithoutImagesProjectsDataInputOptionalFields) -> AssetUpdateWithoutImagesProjectsDataInput
buildAssetUpdateWithoutImagesProjectsDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, pictureProjects = Absent }
    in
    AssetUpdateWithoutImagesProjectsDataInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, pictureProjects = optionals.pictureProjects }


type alias AssetUpdateWithoutImagesProjectsDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , pictureProjects : OptionalArgument ProjectsUpdateManyWithoutPictureInput
    }


{-| Type alias for the `AssetUpdateWithoutImagesProjectsDataInput` attributes. Note that this type
needs to use the `AssetUpdateWithoutImagesProjectsDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithoutImagesProjectsDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , pictureProjects : OptionalArgument ProjectsUpdateManyWithoutPictureInput
    }


{-| Type for the AssetUpdateWithoutImagesProjectsDataInput input object.
-}
type AssetUpdateWithoutImagesProjectsDataInput
    = AssetUpdateWithoutImagesProjectsDataInput AssetUpdateWithoutImagesProjectsDataInputRaw


{-| Encode a AssetUpdateWithoutImagesProjectsDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithoutImagesProjectsDataInput : AssetUpdateWithoutImagesProjectsDataInput -> Value
encodeAssetUpdateWithoutImagesProjectsDataInput (AssetUpdateWithoutImagesProjectsDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostUpdateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "pictureProjects", encodeProjectsUpdateManyWithoutPictureInput |> Encode.optional input.pictureProjects ) ]


buildAssetUpdateWithoutPictureBlogPostDataInput : (AssetUpdateWithoutPictureBlogPostDataInputOptionalFields -> AssetUpdateWithoutPictureBlogPostDataInputOptionalFields) -> AssetUpdateWithoutPictureBlogPostDataInput
buildAssetUpdateWithoutPictureBlogPostDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, imagesProjects = Absent, pictureProjects = Absent }
    in
    AssetUpdateWithoutPictureBlogPostDataInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, imagesProjects = optionals.imagesProjects, pictureProjects = optionals.pictureProjects }


type alias AssetUpdateWithoutPictureBlogPostDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProjects : OptionalArgument ProjectsUpdateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsUpdateManyWithoutPictureInput
    }


{-| Type alias for the `AssetUpdateWithoutPictureBlogPostDataInput` attributes. Note that this type
needs to use the `AssetUpdateWithoutPictureBlogPostDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithoutPictureBlogPostDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProjects : OptionalArgument ProjectsUpdateManyWithoutImagesInput
    , pictureProjects : OptionalArgument ProjectsUpdateManyWithoutPictureInput
    }


{-| Type for the AssetUpdateWithoutPictureBlogPostDataInput input object.
-}
type AssetUpdateWithoutPictureBlogPostDataInput
    = AssetUpdateWithoutPictureBlogPostDataInput AssetUpdateWithoutPictureBlogPostDataInputRaw


{-| Encode a AssetUpdateWithoutPictureBlogPostDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithoutPictureBlogPostDataInput : AssetUpdateWithoutPictureBlogPostDataInput -> Value
encodeAssetUpdateWithoutPictureBlogPostDataInput (AssetUpdateWithoutPictureBlogPostDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "imagesProjects", encodeProjectsUpdateManyWithoutImagesInput |> Encode.optional input.imagesProjects ), ( "pictureProjects", encodeProjectsUpdateManyWithoutPictureInput |> Encode.optional input.pictureProjects ) ]


buildAssetUpdateWithoutPictureProjectsDataInput : (AssetUpdateWithoutPictureProjectsDataInputOptionalFields -> AssetUpdateWithoutPictureProjectsDataInputOptionalFields) -> AssetUpdateWithoutPictureProjectsDataInput
buildAssetUpdateWithoutPictureProjectsDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProjects = Absent }
    in
    AssetUpdateWithoutPictureProjectsDataInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProjects = optionals.imagesProjects }


type alias AssetUpdateWithoutPictureProjectsDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsUpdateManyWithoutImagesInput
    }


{-| Type alias for the `AssetUpdateWithoutPictureProjectsDataInput` attributes. Note that this type
needs to use the `AssetUpdateWithoutPictureProjectsDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithoutPictureProjectsDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProjects : OptionalArgument ProjectsUpdateManyWithoutImagesInput
    }


{-| Type for the AssetUpdateWithoutPictureProjectsDataInput input object.
-}
type AssetUpdateWithoutPictureProjectsDataInput
    = AssetUpdateWithoutPictureProjectsDataInput AssetUpdateWithoutPictureProjectsDataInputRaw


{-| Encode a AssetUpdateWithoutPictureProjectsDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithoutPictureProjectsDataInput : AssetUpdateWithoutPictureProjectsDataInput -> Value
encodeAssetUpdateWithoutPictureProjectsDataInput (AssetUpdateWithoutPictureProjectsDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostUpdateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProjects", encodeProjectsUpdateManyWithoutImagesInput |> Encode.optional input.imagesProjects ) ]


buildAssetUpsertWithWhereUniqueWithoutImagesProjectsInput : AssetUpsertWithWhereUniqueWithoutImagesProjectsInputRequiredFields -> AssetUpsertWithWhereUniqueWithoutImagesProjectsInput
buildAssetUpsertWithWhereUniqueWithoutImagesProjectsInput required =
    AssetUpsertWithWhereUniqueWithoutImagesProjectsInput { where_ = required.where_, update = required.update, create = required.create }


type alias AssetUpsertWithWhereUniqueWithoutImagesProjectsInputRequiredFields =
    { where_ : AssetWhereUniqueInput
    , update : AssetUpdateWithoutImagesProjectsDataInput
    , create : AssetCreateWithoutImagesProjectsInput
    }


{-| Type alias for the `AssetUpsertWithWhereUniqueWithoutImagesProjectsInput` attributes. Note that this type
needs to use the `AssetUpsertWithWhereUniqueWithoutImagesProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpsertWithWhereUniqueWithoutImagesProjectsInputRaw =
    { where_ : AssetWhereUniqueInput
    , update : AssetUpdateWithoutImagesProjectsDataInput
    , create : AssetCreateWithoutImagesProjectsInput
    }


{-| Type for the AssetUpsertWithWhereUniqueWithoutImagesProjectsInput input object.
-}
type AssetUpsertWithWhereUniqueWithoutImagesProjectsInput
    = AssetUpsertWithWhereUniqueWithoutImagesProjectsInput AssetUpsertWithWhereUniqueWithoutImagesProjectsInputRaw


{-| Encode a AssetUpsertWithWhereUniqueWithoutImagesProjectsInput into a value that can be used as an argument.
-}
encodeAssetUpsertWithWhereUniqueWithoutImagesProjectsInput : AssetUpsertWithWhereUniqueWithoutImagesProjectsInput -> Value
encodeAssetUpsertWithWhereUniqueWithoutImagesProjectsInput (AssetUpsertWithWhereUniqueWithoutImagesProjectsInput input) =
    Encode.maybeObject
        [ ( "where", encodeAssetWhereUniqueInput input.where_ |> Just ), ( "update", encodeAssetUpdateWithoutImagesProjectsDataInput input.update |> Just ), ( "create", encodeAssetCreateWithoutImagesProjectsInput input.create |> Just ) ]


buildAssetUpsertWithoutPictureBlogPostInput : AssetUpsertWithoutPictureBlogPostInputRequiredFields -> AssetUpsertWithoutPictureBlogPostInput
buildAssetUpsertWithoutPictureBlogPostInput required =
    AssetUpsertWithoutPictureBlogPostInput { update = required.update, create = required.create }


type alias AssetUpsertWithoutPictureBlogPostInputRequiredFields =
    { update : AssetUpdateWithoutPictureBlogPostDataInput
    , create : AssetCreateWithoutPictureBlogPostInput
    }


{-| Type alias for the `AssetUpsertWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetUpsertWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpsertWithoutPictureBlogPostInputRaw =
    { update : AssetUpdateWithoutPictureBlogPostDataInput
    , create : AssetCreateWithoutPictureBlogPostInput
    }


{-| Type for the AssetUpsertWithoutPictureBlogPostInput input object.
-}
type AssetUpsertWithoutPictureBlogPostInput
    = AssetUpsertWithoutPictureBlogPostInput AssetUpsertWithoutPictureBlogPostInputRaw


{-| Encode a AssetUpsertWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetUpsertWithoutPictureBlogPostInput : AssetUpsertWithoutPictureBlogPostInput -> Value
encodeAssetUpsertWithoutPictureBlogPostInput (AssetUpsertWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "update", encodeAssetUpdateWithoutPictureBlogPostDataInput input.update |> Just ), ( "create", encodeAssetCreateWithoutPictureBlogPostInput input.create |> Just ) ]


buildAssetUpsertWithoutPictureProjectsInput : AssetUpsertWithoutPictureProjectsInputRequiredFields -> AssetUpsertWithoutPictureProjectsInput
buildAssetUpsertWithoutPictureProjectsInput required =
    AssetUpsertWithoutPictureProjectsInput { update = required.update, create = required.create }


type alias AssetUpsertWithoutPictureProjectsInputRequiredFields =
    { update : AssetUpdateWithoutPictureProjectsDataInput
    , create : AssetCreateWithoutPictureProjectsInput
    }


{-| Type alias for the `AssetUpsertWithoutPictureProjectsInput` attributes. Note that this type
needs to use the `AssetUpsertWithoutPictureProjectsInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpsertWithoutPictureProjectsInputRaw =
    { update : AssetUpdateWithoutPictureProjectsDataInput
    , create : AssetCreateWithoutPictureProjectsInput
    }


{-| Type for the AssetUpsertWithoutPictureProjectsInput input object.
-}
type AssetUpsertWithoutPictureProjectsInput
    = AssetUpsertWithoutPictureProjectsInput AssetUpsertWithoutPictureProjectsInputRaw


{-| Encode a AssetUpsertWithoutPictureProjectsInput into a value that can be used as an argument.
-}
encodeAssetUpsertWithoutPictureProjectsInput : AssetUpsertWithoutPictureProjectsInput -> Value
encodeAssetUpsertWithoutPictureProjectsInput (AssetUpsertWithoutPictureProjectsInput input) =
    Encode.maybeObject
        [ ( "update", encodeAssetUpdateWithoutPictureProjectsDataInput input.update |> Just ), ( "create", encodeAssetCreateWithoutPictureProjectsInput input.create |> Just ) ]


buildAssetWhereInput : (AssetWhereInputOptionalFields -> AssetWhereInputOptionalFields) -> AssetWhereInput
buildAssetWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, handle = Absent, handle_not = Absent, handle_in = Absent, handle_not_in = Absent, handle_lt = Absent, handle_lte = Absent, handle_gt = Absent, handle_gte = Absent, handle_contains = Absent, handle_not_contains = Absent, handle_starts_with = Absent, handle_not_starts_with = Absent, handle_ends_with = Absent, handle_not_ends_with = Absent, fileName = Absent, fileName_not = Absent, fileName_in = Absent, fileName_not_in = Absent, fileName_lt = Absent, fileName_lte = Absent, fileName_gt = Absent, fileName_gte = Absent, fileName_contains = Absent, fileName_not_contains = Absent, fileName_starts_with = Absent, fileName_not_starts_with = Absent, fileName_ends_with = Absent, fileName_not_ends_with = Absent, height = Absent, height_not = Absent, height_in = Absent, height_not_in = Absent, height_lt = Absent, height_lte = Absent, height_gt = Absent, height_gte = Absent, mimeType = Absent, mimeType_not = Absent, mimeType_in = Absent, mimeType_not_in = Absent, mimeType_lt = Absent, mimeType_lte = Absent, mimeType_gt = Absent, mimeType_gte = Absent, mimeType_contains = Absent, mimeType_not_contains = Absent, mimeType_starts_with = Absent, mimeType_not_starts_with = Absent, mimeType_ends_with = Absent, mimeType_not_ends_with = Absent, size = Absent, size_not = Absent, size_in = Absent, size_not_in = Absent, size_lt = Absent, size_lte = Absent, size_gt = Absent, size_gte = Absent, width = Absent, width_not = Absent, width_in = Absent, width_not_in = Absent, width_lt = Absent, width_lte = Absent, width_gt = Absent, width_gte = Absent, pictureBlogPost_every = Absent, pictureBlogPost_some = Absent, pictureBlogPost_none = Absent, imagesProjects_every = Absent, imagesProjects_some = Absent, imagesProjects_none = Absent, pictureProjects_every = Absent, pictureProjects_some = Absent, pictureProjects_none = Absent }
    in
    AssetWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, handle = optionals.handle, handle_not = optionals.handle_not, handle_in = optionals.handle_in, handle_not_in = optionals.handle_not_in, handle_lt = optionals.handle_lt, handle_lte = optionals.handle_lte, handle_gt = optionals.handle_gt, handle_gte = optionals.handle_gte, handle_contains = optionals.handle_contains, handle_not_contains = optionals.handle_not_contains, handle_starts_with = optionals.handle_starts_with, handle_not_starts_with = optionals.handle_not_starts_with, handle_ends_with = optionals.handle_ends_with, handle_not_ends_with = optionals.handle_not_ends_with, fileName = optionals.fileName, fileName_not = optionals.fileName_not, fileName_in = optionals.fileName_in, fileName_not_in = optionals.fileName_not_in, fileName_lt = optionals.fileName_lt, fileName_lte = optionals.fileName_lte, fileName_gt = optionals.fileName_gt, fileName_gte = optionals.fileName_gte, fileName_contains = optionals.fileName_contains, fileName_not_contains = optionals.fileName_not_contains, fileName_starts_with = optionals.fileName_starts_with, fileName_not_starts_with = optionals.fileName_not_starts_with, fileName_ends_with = optionals.fileName_ends_with, fileName_not_ends_with = optionals.fileName_not_ends_with, height = optionals.height, height_not = optionals.height_not, height_in = optionals.height_in, height_not_in = optionals.height_not_in, height_lt = optionals.height_lt, height_lte = optionals.height_lte, height_gt = optionals.height_gt, height_gte = optionals.height_gte, mimeType = optionals.mimeType, mimeType_not = optionals.mimeType_not, mimeType_in = optionals.mimeType_in, mimeType_not_in = optionals.mimeType_not_in, mimeType_lt = optionals.mimeType_lt, mimeType_lte = optionals.mimeType_lte, mimeType_gt = optionals.mimeType_gt, mimeType_gte = optionals.mimeType_gte, mimeType_contains = optionals.mimeType_contains, mimeType_not_contains = optionals.mimeType_not_contains, mimeType_starts_with = optionals.mimeType_starts_with, mimeType_not_starts_with = optionals.mimeType_not_starts_with, mimeType_ends_with = optionals.mimeType_ends_with, mimeType_not_ends_with = optionals.mimeType_not_ends_with, size = optionals.size, size_not = optionals.size_not, size_in = optionals.size_in, size_not_in = optionals.size_not_in, size_lt = optionals.size_lt, size_lte = optionals.size_lte, size_gt = optionals.size_gt, size_gte = optionals.size_gte, width = optionals.width, width_not = optionals.width_not, width_in = optionals.width_in, width_not_in = optionals.width_not_in, width_lt = optionals.width_lt, width_lte = optionals.width_lte, width_gt = optionals.width_gt, width_gte = optionals.width_gte, pictureBlogPost_every = optionals.pictureBlogPost_every, pictureBlogPost_some = optionals.pictureBlogPost_some, pictureBlogPost_none = optionals.pictureBlogPost_none, imagesProjects_every = optionals.imagesProjects_every, imagesProjects_some = optionals.imagesProjects_some, imagesProjects_none = optionals.imagesProjects_none, pictureProjects_every = optionals.pictureProjects_every, pictureProjects_some = optionals.pictureProjects_some, pictureProjects_none = optionals.pictureProjects_none }


type alias AssetWhereInputOptionalFields =
    { and : OptionalArgument (List AssetWhereInput)
    , or : OptionalArgument (List AssetWhereInput)
    , not : OptionalArgument (List AssetWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    , pictureBlogPost_every : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_some : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_none : OptionalArgument BlogPostWhereInput
    , imagesProjects_every : OptionalArgument ProjectsWhereInput
    , imagesProjects_some : OptionalArgument ProjectsWhereInput
    , imagesProjects_none : OptionalArgument ProjectsWhereInput
    , pictureProjects_every : OptionalArgument ProjectsWhereInput
    , pictureProjects_some : OptionalArgument ProjectsWhereInput
    , pictureProjects_none : OptionalArgument ProjectsWhereInput
    }


{-| Type alias for the `AssetWhereInput` attributes. Note that this type
needs to use the `AssetWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetWhereInputRaw =
    { and : OptionalArgument (List AssetWhereInput)
    , or : OptionalArgument (List AssetWhereInput)
    , not : OptionalArgument (List AssetWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    , pictureBlogPost_every : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_some : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_none : OptionalArgument BlogPostWhereInput
    , imagesProjects_every : OptionalArgument ProjectsWhereInput
    , imagesProjects_some : OptionalArgument ProjectsWhereInput
    , imagesProjects_none : OptionalArgument ProjectsWhereInput
    , pictureProjects_every : OptionalArgument ProjectsWhereInput
    , pictureProjects_some : OptionalArgument ProjectsWhereInput
    , pictureProjects_none : OptionalArgument ProjectsWhereInput
    }


{-| Type for the AssetWhereInput input object.
-}
type AssetWhereInput
    = AssetWhereInput AssetWhereInputRaw


{-| Encode a AssetWhereInput into a value that can be used as an argument.
-}
encodeAssetWhereInput : AssetWhereInput -> Value
encodeAssetWhereInput (AssetWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "handle_not", Encode.string |> Encode.optional input.handle_not ), ( "handle_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_in ), ( "handle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_not_in ), ( "handle_lt", Encode.string |> Encode.optional input.handle_lt ), ( "handle_lte", Encode.string |> Encode.optional input.handle_lte ), ( "handle_gt", Encode.string |> Encode.optional input.handle_gt ), ( "handle_gte", Encode.string |> Encode.optional input.handle_gte ), ( "handle_contains", Encode.string |> Encode.optional input.handle_contains ), ( "handle_not_contains", Encode.string |> Encode.optional input.handle_not_contains ), ( "handle_starts_with", Encode.string |> Encode.optional input.handle_starts_with ), ( "handle_not_starts_with", Encode.string |> Encode.optional input.handle_not_starts_with ), ( "handle_ends_with", Encode.string |> Encode.optional input.handle_ends_with ), ( "handle_not_ends_with", Encode.string |> Encode.optional input.handle_not_ends_with ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "fileName_not", Encode.string |> Encode.optional input.fileName_not ), ( "fileName_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_in ), ( "fileName_not_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_not_in ), ( "fileName_lt", Encode.string |> Encode.optional input.fileName_lt ), ( "fileName_lte", Encode.string |> Encode.optional input.fileName_lte ), ( "fileName_gt", Encode.string |> Encode.optional input.fileName_gt ), ( "fileName_gte", Encode.string |> Encode.optional input.fileName_gte ), ( "fileName_contains", Encode.string |> Encode.optional input.fileName_contains ), ( "fileName_not_contains", Encode.string |> Encode.optional input.fileName_not_contains ), ( "fileName_starts_with", Encode.string |> Encode.optional input.fileName_starts_with ), ( "fileName_not_starts_with", Encode.string |> Encode.optional input.fileName_not_starts_with ), ( "fileName_ends_with", Encode.string |> Encode.optional input.fileName_ends_with ), ( "fileName_not_ends_with", Encode.string |> Encode.optional input.fileName_not_ends_with ), ( "height", Encode.float |> Encode.optional input.height ), ( "height_not", Encode.float |> Encode.optional input.height_not ), ( "height_in", (Encode.float |> Encode.list) |> Encode.optional input.height_in ), ( "height_not_in", (Encode.float |> Encode.list) |> Encode.optional input.height_not_in ), ( "height_lt", Encode.float |> Encode.optional input.height_lt ), ( "height_lte", Encode.float |> Encode.optional input.height_lte ), ( "height_gt", Encode.float |> Encode.optional input.height_gt ), ( "height_gte", Encode.float |> Encode.optional input.height_gte ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "mimeType_not", Encode.string |> Encode.optional input.mimeType_not ), ( "mimeType_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_in ), ( "mimeType_not_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_not_in ), ( "mimeType_lt", Encode.string |> Encode.optional input.mimeType_lt ), ( "mimeType_lte", Encode.string |> Encode.optional input.mimeType_lte ), ( "mimeType_gt", Encode.string |> Encode.optional input.mimeType_gt ), ( "mimeType_gte", Encode.string |> Encode.optional input.mimeType_gte ), ( "mimeType_contains", Encode.string |> Encode.optional input.mimeType_contains ), ( "mimeType_not_contains", Encode.string |> Encode.optional input.mimeType_not_contains ), ( "mimeType_starts_with", Encode.string |> Encode.optional input.mimeType_starts_with ), ( "mimeType_not_starts_with", Encode.string |> Encode.optional input.mimeType_not_starts_with ), ( "mimeType_ends_with", Encode.string |> Encode.optional input.mimeType_ends_with ), ( "mimeType_not_ends_with", Encode.string |> Encode.optional input.mimeType_not_ends_with ), ( "size", Encode.float |> Encode.optional input.size ), ( "size_not", Encode.float |> Encode.optional input.size_not ), ( "size_in", (Encode.float |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.float |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.float |> Encode.optional input.size_lt ), ( "size_lte", Encode.float |> Encode.optional input.size_lte ), ( "size_gt", Encode.float |> Encode.optional input.size_gt ), ( "size_gte", Encode.float |> Encode.optional input.size_gte ), ( "width", Encode.float |> Encode.optional input.width ), ( "width_not", Encode.float |> Encode.optional input.width_not ), ( "width_in", (Encode.float |> Encode.list) |> Encode.optional input.width_in ), ( "width_not_in", (Encode.float |> Encode.list) |> Encode.optional input.width_not_in ), ( "width_lt", Encode.float |> Encode.optional input.width_lt ), ( "width_lte", Encode.float |> Encode.optional input.width_lte ), ( "width_gt", Encode.float |> Encode.optional input.width_gt ), ( "width_gte", Encode.float |> Encode.optional input.width_gte ), ( "pictureBlogPost_every", encodeBlogPostWhereInput |> Encode.optional input.pictureBlogPost_every ), ( "pictureBlogPost_some", encodeBlogPostWhereInput |> Encode.optional input.pictureBlogPost_some ), ( "pictureBlogPost_none", encodeBlogPostWhereInput |> Encode.optional input.pictureBlogPost_none ), ( "imagesProjects_every", encodeProjectsWhereInput |> Encode.optional input.imagesProjects_every ), ( "imagesProjects_some", encodeProjectsWhereInput |> Encode.optional input.imagesProjects_some ), ( "imagesProjects_none", encodeProjectsWhereInput |> Encode.optional input.imagesProjects_none ), ( "pictureProjects_every", encodeProjectsWhereInput |> Encode.optional input.pictureProjects_every ), ( "pictureProjects_some", encodeProjectsWhereInput |> Encode.optional input.pictureProjects_some ), ( "pictureProjects_none", encodeProjectsWhereInput |> Encode.optional input.pictureProjects_none ) ]


buildAssetWhereUniqueInput : (AssetWhereUniqueInputOptionalFields -> AssetWhereUniqueInputOptionalFields) -> AssetWhereUniqueInput
buildAssetWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, handle = Absent }
    in
    { id = optionals.id, handle = optionals.handle }


type alias AssetWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id
    , handle : OptionalArgument String
    }


{-| Type for the AssetWhereUniqueInput input object.
-}
type alias AssetWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id
    , handle : OptionalArgument String
    }


{-| Encode a AssetWhereUniqueInput into a value that can be used as an argument.
-}
encodeAssetWhereUniqueInput : AssetWhereUniqueInput -> Value
encodeAssetWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "handle", Encode.string |> Encode.optional input.handle ) ]


buildBlogPostCreateInput : BlogPostCreateInputRequiredFields -> (BlogPostCreateInputOptionalFields -> BlogPostCreateInputOptionalFields) -> BlogPostCreateInput
buildBlogPostCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, teaser = Absent, views = Absent, tags = Absent, picture = Absent }
    in
    BlogPostCreateInput { status = optionals.status, title = required.title, teaser = optionals.teaser, body = required.body, views = optionals.views, tags = optionals.tags, picture = optionals.picture }


type alias BlogPostCreateInputRequiredFields =
    { title : String
    , body : String
    }


type alias BlogPostCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , teaser : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureBlogPostInput
    }


{-| Type alias for the `BlogPostCreateInput` attributes. Note that this type
needs to use the `BlogPostCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostCreateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : String
    , teaser : OptionalArgument String
    , body : String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureBlogPostInput
    }


{-| Type for the BlogPostCreateInput input object.
-}
type BlogPostCreateInput
    = BlogPostCreateInput BlogPostCreateInputRaw


{-| Encode a BlogPostCreateInput into a value that can be used as an argument.
-}
encodeBlogPostCreateInput : BlogPostCreateInput -> Value
encodeBlogPostCreateInput (BlogPostCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string input.title |> Just ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string input.body |> Just ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostCreatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetCreateOneWithoutPictureBlogPostInput |> Encode.optional input.picture ) ]


buildBlogPostCreateManyWithoutPictureInput : (BlogPostCreateManyWithoutPictureInputOptionalFields -> BlogPostCreateManyWithoutPictureInputOptionalFields) -> BlogPostCreateManyWithoutPictureInput
buildBlogPostCreateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    BlogPostCreateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect }


type alias BlogPostCreateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    }


{-| Type alias for the `BlogPostCreateManyWithoutPictureInput` attributes. Note that this type
needs to use the `BlogPostCreateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostCreateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    }


{-| Type for the BlogPostCreateManyWithoutPictureInput input object.
-}
type BlogPostCreateManyWithoutPictureInput
    = BlogPostCreateManyWithoutPictureInput BlogPostCreateManyWithoutPictureInputRaw


{-| Encode a BlogPostCreateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostCreateManyWithoutPictureInput : BlogPostCreateManyWithoutPictureInput -> Value
encodeBlogPostCreateManyWithoutPictureInput (BlogPostCreateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeBlogPostCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildBlogPostCreateWithoutPictureInput : BlogPostCreateWithoutPictureInputRequiredFields -> (BlogPostCreateWithoutPictureInputOptionalFields -> BlogPostCreateWithoutPictureInputOptionalFields) -> BlogPostCreateWithoutPictureInput
buildBlogPostCreateWithoutPictureInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, teaser = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = required.title, teaser = optionals.teaser, body = required.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostCreateWithoutPictureInputRequiredFields =
    { title : String
    , body : String
    }


type alias BlogPostCreateWithoutPictureInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , teaser : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    }


{-| Type for the BlogPostCreateWithoutPictureInput input object.
-}
type alias BlogPostCreateWithoutPictureInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : String
    , teaser : OptionalArgument String
    , body : String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    }


{-| Encode a BlogPostCreateWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostCreateWithoutPictureInput : BlogPostCreateWithoutPictureInput -> Value
encodeBlogPostCreateWithoutPictureInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string input.title |> Just ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string input.body |> Just ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostCreatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostCreatetagsInput : (BlogPostCreatetagsInputOptionalFields -> BlogPostCreatetagsInputOptionalFields) -> BlogPostCreatetagsInput
buildBlogPostCreatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias BlogPostCreatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the BlogPostCreatetagsInput input object.
-}
type alias BlogPostCreatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a BlogPostCreatetagsInput into a value that can be used as an argument.
-}
encodeBlogPostCreatetagsInput : BlogPostCreatetagsInput -> Value
encodeBlogPostCreatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildBlogPostScalarWhereInput : (BlogPostScalarWhereInputOptionalFields -> BlogPostScalarWhereInputOptionalFields) -> BlogPostScalarWhereInput
buildBlogPostScalarWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, teaser = Absent, teaser_not = Absent, teaser_in = Absent, teaser_not_in = Absent, teaser_lt = Absent, teaser_lte = Absent, teaser_gt = Absent, teaser_gte = Absent, teaser_contains = Absent, teaser_not_contains = Absent, teaser_starts_with = Absent, teaser_not_starts_with = Absent, teaser_ends_with = Absent, teaser_not_ends_with = Absent, body = Absent, body_not = Absent, body_in = Absent, body_not_in = Absent, body_lt = Absent, body_lte = Absent, body_gt = Absent, body_gte = Absent, body_contains = Absent, body_not_contains = Absent, body_starts_with = Absent, body_not_starts_with = Absent, body_ends_with = Absent, body_not_ends_with = Absent, views = Absent, views_not = Absent, views_in = Absent, views_not_in = Absent, views_lt = Absent, views_lte = Absent, views_gt = Absent, views_gte = Absent }
    in
    BlogPostScalarWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, teaser = optionals.teaser, teaser_not = optionals.teaser_not, teaser_in = optionals.teaser_in, teaser_not_in = optionals.teaser_not_in, teaser_lt = optionals.teaser_lt, teaser_lte = optionals.teaser_lte, teaser_gt = optionals.teaser_gt, teaser_gte = optionals.teaser_gte, teaser_contains = optionals.teaser_contains, teaser_not_contains = optionals.teaser_not_contains, teaser_starts_with = optionals.teaser_starts_with, teaser_not_starts_with = optionals.teaser_not_starts_with, teaser_ends_with = optionals.teaser_ends_with, teaser_not_ends_with = optionals.teaser_not_ends_with, body = optionals.body, body_not = optionals.body_not, body_in = optionals.body_in, body_not_in = optionals.body_not_in, body_lt = optionals.body_lt, body_lte = optionals.body_lte, body_gt = optionals.body_gt, body_gte = optionals.body_gte, body_contains = optionals.body_contains, body_not_contains = optionals.body_not_contains, body_starts_with = optionals.body_starts_with, body_not_starts_with = optionals.body_not_starts_with, body_ends_with = optionals.body_ends_with, body_not_ends_with = optionals.body_not_ends_with, views = optionals.views, views_not = optionals.views_not, views_in = optionals.views_in, views_not_in = optionals.views_not_in, views_lt = optionals.views_lt, views_lte = optionals.views_lte, views_gt = optionals.views_gt, views_gte = optionals.views_gte }


type alias BlogPostScalarWhereInputOptionalFields =
    { and : OptionalArgument (List BlogPostScalarWhereInput)
    , or : OptionalArgument (List BlogPostScalarWhereInput)
    , not : OptionalArgument (List BlogPostScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    }


{-| Type alias for the `BlogPostScalarWhereInput` attributes. Note that this type
needs to use the `BlogPostScalarWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostScalarWhereInputRaw =
    { and : OptionalArgument (List BlogPostScalarWhereInput)
    , or : OptionalArgument (List BlogPostScalarWhereInput)
    , not : OptionalArgument (List BlogPostScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    }


{-| Type for the BlogPostScalarWhereInput input object.
-}
type BlogPostScalarWhereInput
    = BlogPostScalarWhereInput BlogPostScalarWhereInputRaw


{-| Encode a BlogPostScalarWhereInput into a value that can be used as an argument.
-}
encodeBlogPostScalarWhereInput : BlogPostScalarWhereInput -> Value
encodeBlogPostScalarWhereInput (BlogPostScalarWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "teaser_not", Encode.string |> Encode.optional input.teaser_not ), ( "teaser_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_in ), ( "teaser_not_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_not_in ), ( "teaser_lt", Encode.string |> Encode.optional input.teaser_lt ), ( "teaser_lte", Encode.string |> Encode.optional input.teaser_lte ), ( "teaser_gt", Encode.string |> Encode.optional input.teaser_gt ), ( "teaser_gte", Encode.string |> Encode.optional input.teaser_gte ), ( "teaser_contains", Encode.string |> Encode.optional input.teaser_contains ), ( "teaser_not_contains", Encode.string |> Encode.optional input.teaser_not_contains ), ( "teaser_starts_with", Encode.string |> Encode.optional input.teaser_starts_with ), ( "teaser_not_starts_with", Encode.string |> Encode.optional input.teaser_not_starts_with ), ( "teaser_ends_with", Encode.string |> Encode.optional input.teaser_ends_with ), ( "teaser_not_ends_with", Encode.string |> Encode.optional input.teaser_not_ends_with ), ( "body", Encode.string |> Encode.optional input.body ), ( "body_not", Encode.string |> Encode.optional input.body_not ), ( "body_in", (Encode.string |> Encode.list) |> Encode.optional input.body_in ), ( "body_not_in", (Encode.string |> Encode.list) |> Encode.optional input.body_not_in ), ( "body_lt", Encode.string |> Encode.optional input.body_lt ), ( "body_lte", Encode.string |> Encode.optional input.body_lte ), ( "body_gt", Encode.string |> Encode.optional input.body_gt ), ( "body_gte", Encode.string |> Encode.optional input.body_gte ), ( "body_contains", Encode.string |> Encode.optional input.body_contains ), ( "body_not_contains", Encode.string |> Encode.optional input.body_not_contains ), ( "body_starts_with", Encode.string |> Encode.optional input.body_starts_with ), ( "body_not_starts_with", Encode.string |> Encode.optional input.body_not_starts_with ), ( "body_ends_with", Encode.string |> Encode.optional input.body_ends_with ), ( "body_not_ends_with", Encode.string |> Encode.optional input.body_not_ends_with ), ( "views", Encode.int |> Encode.optional input.views ), ( "views_not", Encode.int |> Encode.optional input.views_not ), ( "views_in", (Encode.int |> Encode.list) |> Encode.optional input.views_in ), ( "views_not_in", (Encode.int |> Encode.list) |> Encode.optional input.views_not_in ), ( "views_lt", Encode.int |> Encode.optional input.views_lt ), ( "views_lte", Encode.int |> Encode.optional input.views_lte ), ( "views_gt", Encode.int |> Encode.optional input.views_gt ), ( "views_gte", Encode.int |> Encode.optional input.views_gte ) ]


buildBlogPostSubscriptionWhereInput : (BlogPostSubscriptionWhereInputOptionalFields -> BlogPostSubscriptionWhereInputOptionalFields) -> BlogPostSubscriptionWhereInput
buildBlogPostSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    BlogPostSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias BlogPostSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , or : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , not : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument BlogPostWhereInput
    }


{-| Type alias for the `BlogPostSubscriptionWhereInput` attributes. Note that this type
needs to use the `BlogPostSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostSubscriptionWhereInputRaw =
    { and : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , or : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , not : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument BlogPostWhereInput
    }


{-| Type for the BlogPostSubscriptionWhereInput input object.
-}
type BlogPostSubscriptionWhereInput
    = BlogPostSubscriptionWhereInput BlogPostSubscriptionWhereInputRaw


{-| Encode a BlogPostSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeBlogPostSubscriptionWhereInput : BlogPostSubscriptionWhereInput -> Value
encodeBlogPostSubscriptionWhereInput (BlogPostSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeBlogPostSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeBlogPostSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeBlogPostSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeBlogPostWhereInput |> Encode.optional input.node ) ]


buildBlogPostUpdateInput : (BlogPostUpdateInputOptionalFields -> BlogPostUpdateInputOptionalFields) -> BlogPostUpdateInput
buildBlogPostUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent, picture = Absent }
    in
    BlogPostUpdateInput { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags, picture = optionals.picture }


type alias BlogPostUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureBlogPostInput
    }


{-| Type alias for the `BlogPostUpdateInput` attributes. Note that this type
needs to use the `BlogPostUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostUpdateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureBlogPostInput
    }


{-| Type for the BlogPostUpdateInput input object.
-}
type BlogPostUpdateInput
    = BlogPostUpdateInput BlogPostUpdateInputRaw


{-| Encode a BlogPostUpdateInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateInput : BlogPostUpdateInput -> Value
encodeBlogPostUpdateInput (BlogPostUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetUpdateOneWithoutPictureBlogPostInput |> Encode.optional input.picture ) ]


buildBlogPostUpdateManyDataInput : (BlogPostUpdateManyDataInputOptionalFields -> BlogPostUpdateManyDataInputOptionalFields) -> BlogPostUpdateManyDataInput
buildBlogPostUpdateManyDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostUpdateManyDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Type for the BlogPostUpdateManyDataInput input object.
-}
type alias BlogPostUpdateManyDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Encode a BlogPostUpdateManyDataInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyDataInput : BlogPostUpdateManyDataInput -> Value
encodeBlogPostUpdateManyDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostUpdateManyMutationInput : (BlogPostUpdateManyMutationInputOptionalFields -> BlogPostUpdateManyMutationInputOptionalFields) -> BlogPostUpdateManyMutationInput
buildBlogPostUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Type for the BlogPostUpdateManyMutationInput input object.
-}
type alias BlogPostUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Encode a BlogPostUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyMutationInput : BlogPostUpdateManyMutationInput -> Value
encodeBlogPostUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostUpdateManyWithWhereNestedInput : BlogPostUpdateManyWithWhereNestedInputRequiredFields -> BlogPostUpdateManyWithWhereNestedInput
buildBlogPostUpdateManyWithWhereNestedInput required =
    BlogPostUpdateManyWithWhereNestedInput { where_ = required.where_, data = required.data }


type alias BlogPostUpdateManyWithWhereNestedInputRequiredFields =
    { where_ : BlogPostScalarWhereInput
    , data : BlogPostUpdateManyDataInput
    }


{-| Type alias for the `BlogPostUpdateManyWithWhereNestedInput` attributes. Note that this type
needs to use the `BlogPostUpdateManyWithWhereNestedInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostUpdateManyWithWhereNestedInputRaw =
    { where_ : BlogPostScalarWhereInput
    , data : BlogPostUpdateManyDataInput
    }


{-| Type for the BlogPostUpdateManyWithWhereNestedInput input object.
-}
type BlogPostUpdateManyWithWhereNestedInput
    = BlogPostUpdateManyWithWhereNestedInput BlogPostUpdateManyWithWhereNestedInputRaw


{-| Encode a BlogPostUpdateManyWithWhereNestedInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyWithWhereNestedInput : BlogPostUpdateManyWithWhereNestedInput -> Value
encodeBlogPostUpdateManyWithWhereNestedInput (BlogPostUpdateManyWithWhereNestedInput input) =
    Encode.maybeObject
        [ ( "where", encodeBlogPostScalarWhereInput input.where_ |> Just ), ( "data", encodeBlogPostUpdateManyDataInput input.data |> Just ) ]


buildBlogPostUpdateManyWithoutPictureInput : (BlogPostUpdateManyWithoutPictureInputOptionalFields -> BlogPostUpdateManyWithoutPictureInputOptionalFields) -> BlogPostUpdateManyWithoutPictureInput
buildBlogPostUpdateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    BlogPostUpdateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias BlogPostUpdateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    , disconnect : OptionalArgument (List BlogPostWhereUniqueInput)
    , delete : OptionalArgument (List BlogPostWhereUniqueInput)
    , update : OptionalArgument (List BlogPostUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List BlogPostUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List BlogPostScalarWhereInput)
    , upsert : OptionalArgument (List BlogPostUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type alias for the `BlogPostUpdateManyWithoutPictureInput` attributes. Note that this type
needs to use the `BlogPostUpdateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostUpdateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    , disconnect : OptionalArgument (List BlogPostWhereUniqueInput)
    , delete : OptionalArgument (List BlogPostWhereUniqueInput)
    , update : OptionalArgument (List BlogPostUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List BlogPostUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List BlogPostScalarWhereInput)
    , upsert : OptionalArgument (List BlogPostUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type for the BlogPostUpdateManyWithoutPictureInput input object.
-}
type BlogPostUpdateManyWithoutPictureInput
    = BlogPostUpdateManyWithoutPictureInput BlogPostUpdateManyWithoutPictureInputRaw


{-| Encode a BlogPostUpdateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyWithoutPictureInput : BlogPostUpdateManyWithoutPictureInput -> Value
encodeBlogPostUpdateManyWithoutPictureInput (BlogPostUpdateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeBlogPostCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "disconnect", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeBlogPostUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildBlogPostUpdateWithWhereUniqueWithoutPictureInput : BlogPostUpdateWithWhereUniqueWithoutPictureInputRequiredFields -> BlogPostUpdateWithWhereUniqueWithoutPictureInput
buildBlogPostUpdateWithWhereUniqueWithoutPictureInput required =
    { where_ = required.where_, data = required.data }


type alias BlogPostUpdateWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : BlogPostWhereUniqueInput
    , data : BlogPostUpdateWithoutPictureDataInput
    }


{-| Type for the BlogPostUpdateWithWhereUniqueWithoutPictureInput input object.
-}
type alias BlogPostUpdateWithWhereUniqueWithoutPictureInput =
    { where_ : BlogPostWhereUniqueInput
    , data : BlogPostUpdateWithoutPictureDataInput
    }


{-| Encode a BlogPostUpdateWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput : BlogPostUpdateWithWhereUniqueWithoutPictureInput -> Value
encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput input =
    Encode.maybeObject
        [ ( "where", encodeBlogPostWhereUniqueInput input.where_ |> Just ), ( "data", encodeBlogPostUpdateWithoutPictureDataInput input.data |> Just ) ]


buildBlogPostUpdateWithoutPictureDataInput : (BlogPostUpdateWithoutPictureDataInputOptionalFields -> BlogPostUpdateWithoutPictureDataInputOptionalFields) -> BlogPostUpdateWithoutPictureDataInput
buildBlogPostUpdateWithoutPictureDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostUpdateWithoutPictureDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Type for the BlogPostUpdateWithoutPictureDataInput input object.
-}
type alias BlogPostUpdateWithoutPictureDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Encode a BlogPostUpdateWithoutPictureDataInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateWithoutPictureDataInput : BlogPostUpdateWithoutPictureDataInput -> Value
encodeBlogPostUpdateWithoutPictureDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostUpdatetagsInput : (BlogPostUpdatetagsInputOptionalFields -> BlogPostUpdatetagsInputOptionalFields) -> BlogPostUpdatetagsInput
buildBlogPostUpdatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias BlogPostUpdatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the BlogPostUpdatetagsInput input object.
-}
type alias BlogPostUpdatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a BlogPostUpdatetagsInput into a value that can be used as an argument.
-}
encodeBlogPostUpdatetagsInput : BlogPostUpdatetagsInput -> Value
encodeBlogPostUpdatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildBlogPostUpsertWithWhereUniqueWithoutPictureInput : BlogPostUpsertWithWhereUniqueWithoutPictureInputRequiredFields -> BlogPostUpsertWithWhereUniqueWithoutPictureInput
buildBlogPostUpsertWithWhereUniqueWithoutPictureInput required =
    { where_ = required.where_, update = required.update, create = required.create }


type alias BlogPostUpsertWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : BlogPostWhereUniqueInput
    , update : BlogPostUpdateWithoutPictureDataInput
    , create : BlogPostCreateWithoutPictureInput
    }


{-| Type for the BlogPostUpsertWithWhereUniqueWithoutPictureInput input object.
-}
type alias BlogPostUpsertWithWhereUniqueWithoutPictureInput =
    { where_ : BlogPostWhereUniqueInput
    , update : BlogPostUpdateWithoutPictureDataInput
    , create : BlogPostCreateWithoutPictureInput
    }


{-| Encode a BlogPostUpsertWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput : BlogPostUpsertWithWhereUniqueWithoutPictureInput -> Value
encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput input =
    Encode.maybeObject
        [ ( "where", encodeBlogPostWhereUniqueInput input.where_ |> Just ), ( "update", encodeBlogPostUpdateWithoutPictureDataInput input.update |> Just ), ( "create", encodeBlogPostCreateWithoutPictureInput input.create |> Just ) ]


buildBlogPostWhereInput : (BlogPostWhereInputOptionalFields -> BlogPostWhereInputOptionalFields) -> BlogPostWhereInput
buildBlogPostWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, teaser = Absent, teaser_not = Absent, teaser_in = Absent, teaser_not_in = Absent, teaser_lt = Absent, teaser_lte = Absent, teaser_gt = Absent, teaser_gte = Absent, teaser_contains = Absent, teaser_not_contains = Absent, teaser_starts_with = Absent, teaser_not_starts_with = Absent, teaser_ends_with = Absent, teaser_not_ends_with = Absent, body = Absent, body_not = Absent, body_in = Absent, body_not_in = Absent, body_lt = Absent, body_lte = Absent, body_gt = Absent, body_gte = Absent, body_contains = Absent, body_not_contains = Absent, body_starts_with = Absent, body_not_starts_with = Absent, body_ends_with = Absent, body_not_ends_with = Absent, views = Absent, views_not = Absent, views_in = Absent, views_not_in = Absent, views_lt = Absent, views_lte = Absent, views_gt = Absent, views_gte = Absent, picture = Absent }
    in
    BlogPostWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, teaser = optionals.teaser, teaser_not = optionals.teaser_not, teaser_in = optionals.teaser_in, teaser_not_in = optionals.teaser_not_in, teaser_lt = optionals.teaser_lt, teaser_lte = optionals.teaser_lte, teaser_gt = optionals.teaser_gt, teaser_gte = optionals.teaser_gte, teaser_contains = optionals.teaser_contains, teaser_not_contains = optionals.teaser_not_contains, teaser_starts_with = optionals.teaser_starts_with, teaser_not_starts_with = optionals.teaser_not_starts_with, teaser_ends_with = optionals.teaser_ends_with, teaser_not_ends_with = optionals.teaser_not_ends_with, body = optionals.body, body_not = optionals.body_not, body_in = optionals.body_in, body_not_in = optionals.body_not_in, body_lt = optionals.body_lt, body_lte = optionals.body_lte, body_gt = optionals.body_gt, body_gte = optionals.body_gte, body_contains = optionals.body_contains, body_not_contains = optionals.body_not_contains, body_starts_with = optionals.body_starts_with, body_not_starts_with = optionals.body_not_starts_with, body_ends_with = optionals.body_ends_with, body_not_ends_with = optionals.body_not_ends_with, views = optionals.views, views_not = optionals.views_not, views_in = optionals.views_in, views_not_in = optionals.views_not_in, views_lt = optionals.views_lt, views_lte = optionals.views_lte, views_gt = optionals.views_gt, views_gte = optionals.views_gte, picture = optionals.picture }


type alias BlogPostWhereInputOptionalFields =
    { and : OptionalArgument (List BlogPostWhereInput)
    , or : OptionalArgument (List BlogPostWhereInput)
    , not : OptionalArgument (List BlogPostWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `BlogPostWhereInput` attributes. Note that this type
needs to use the `BlogPostWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostWhereInputRaw =
    { and : OptionalArgument (List BlogPostWhereInput)
    , or : OptionalArgument (List BlogPostWhereInput)
    , not : OptionalArgument (List BlogPostWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type for the BlogPostWhereInput input object.
-}
type BlogPostWhereInput
    = BlogPostWhereInput BlogPostWhereInputRaw


{-| Encode a BlogPostWhereInput into a value that can be used as an argument.
-}
encodeBlogPostWhereInput : BlogPostWhereInput -> Value
encodeBlogPostWhereInput (BlogPostWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeBlogPostWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeBlogPostWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeBlogPostWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "teaser_not", Encode.string |> Encode.optional input.teaser_not ), ( "teaser_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_in ), ( "teaser_not_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_not_in ), ( "teaser_lt", Encode.string |> Encode.optional input.teaser_lt ), ( "teaser_lte", Encode.string |> Encode.optional input.teaser_lte ), ( "teaser_gt", Encode.string |> Encode.optional input.teaser_gt ), ( "teaser_gte", Encode.string |> Encode.optional input.teaser_gte ), ( "teaser_contains", Encode.string |> Encode.optional input.teaser_contains ), ( "teaser_not_contains", Encode.string |> Encode.optional input.teaser_not_contains ), ( "teaser_starts_with", Encode.string |> Encode.optional input.teaser_starts_with ), ( "teaser_not_starts_with", Encode.string |> Encode.optional input.teaser_not_starts_with ), ( "teaser_ends_with", Encode.string |> Encode.optional input.teaser_ends_with ), ( "teaser_not_ends_with", Encode.string |> Encode.optional input.teaser_not_ends_with ), ( "body", Encode.string |> Encode.optional input.body ), ( "body_not", Encode.string |> Encode.optional input.body_not ), ( "body_in", (Encode.string |> Encode.list) |> Encode.optional input.body_in ), ( "body_not_in", (Encode.string |> Encode.list) |> Encode.optional input.body_not_in ), ( "body_lt", Encode.string |> Encode.optional input.body_lt ), ( "body_lte", Encode.string |> Encode.optional input.body_lte ), ( "body_gt", Encode.string |> Encode.optional input.body_gt ), ( "body_gte", Encode.string |> Encode.optional input.body_gte ), ( "body_contains", Encode.string |> Encode.optional input.body_contains ), ( "body_not_contains", Encode.string |> Encode.optional input.body_not_contains ), ( "body_starts_with", Encode.string |> Encode.optional input.body_starts_with ), ( "body_not_starts_with", Encode.string |> Encode.optional input.body_not_starts_with ), ( "body_ends_with", Encode.string |> Encode.optional input.body_ends_with ), ( "body_not_ends_with", Encode.string |> Encode.optional input.body_not_ends_with ), ( "views", Encode.int |> Encode.optional input.views ), ( "views_not", Encode.int |> Encode.optional input.views_not ), ( "views_in", (Encode.int |> Encode.list) |> Encode.optional input.views_in ), ( "views_not_in", (Encode.int |> Encode.list) |> Encode.optional input.views_not_in ), ( "views_lt", Encode.int |> Encode.optional input.views_lt ), ( "views_lte", Encode.int |> Encode.optional input.views_lte ), ( "views_gt", Encode.int |> Encode.optional input.views_gt ), ( "views_gte", Encode.int |> Encode.optional input.views_gte ), ( "picture", encodeAssetWhereInput |> Encode.optional input.picture ) ]


buildBlogPostWhereUniqueInput : (BlogPostWhereUniqueInputOptionalFields -> BlogPostWhereUniqueInputOptionalFields) -> BlogPostWhereUniqueInput
buildBlogPostWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias BlogPostWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the BlogPostWhereUniqueInput input object.
-}
type alias BlogPostWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a BlogPostWhereUniqueInput into a value that can be used as an argument.
-}
encodeBlogPostWhereUniqueInput : BlogPostWhereUniqueInput -> Value
encodeBlogPostWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildColorSubscriptionWhereInput : (ColorSubscriptionWhereInputOptionalFields -> ColorSubscriptionWhereInputOptionalFields) -> ColorSubscriptionWhereInput
buildColorSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ColorSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ColorSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ColorSubscriptionWhereInput)
    , or : OptionalArgument (List ColorSubscriptionWhereInput)
    , not : OptionalArgument (List ColorSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ColorWhereInput
    }


{-| Type alias for the `ColorSubscriptionWhereInput` attributes. Note that this type
needs to use the `ColorSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ColorSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ColorSubscriptionWhereInput)
    , or : OptionalArgument (List ColorSubscriptionWhereInput)
    , not : OptionalArgument (List ColorSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ColorWhereInput
    }


{-| Type for the ColorSubscriptionWhereInput input object.
-}
type ColorSubscriptionWhereInput
    = ColorSubscriptionWhereInput ColorSubscriptionWhereInputRaw


{-| Encode a ColorSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeColorSubscriptionWhereInput : ColorSubscriptionWhereInput -> Value
encodeColorSubscriptionWhereInput (ColorSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeColorWhereInput |> Encode.optional input.node ) ]


buildColorWhereInput : (ColorWhereInputOptionalFields -> ColorWhereInputOptionalFields) -> ColorWhereInput
buildColorWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent }
    in
    ColorWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte }


type alias ColorWhereInputOptionalFields =
    { and : OptionalArgument (List ColorWhereInput)
    , or : OptionalArgument (List ColorWhereInput)
    , not : OptionalArgument (List ColorWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type alias for the `ColorWhereInput` attributes. Note that this type
needs to use the `ColorWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ColorWhereInputRaw =
    { and : OptionalArgument (List ColorWhereInput)
    , or : OptionalArgument (List ColorWhereInput)
    , not : OptionalArgument (List ColorWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type for the ColorWhereInput input object.
-}
type ColorWhereInput
    = ColorWhereInput ColorWhereInputRaw


{-| Encode a ColorWhereInput into a value that can be used as an argument.
-}
encodeColorWhereInput : ColorWhereInput -> Value
encodeColorWhereInput (ColorWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ) ]


buildColorWhereUniqueInput : (ColorWhereUniqueInputOptionalFields -> ColorWhereUniqueInputOptionalFields) -> ColorWhereUniqueInput
buildColorWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ColorWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the ColorWhereUniqueInput input object.
-}
type alias ColorWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a ColorWhereUniqueInput into a value that can be used as an argument.
-}
encodeColorWhereUniqueInput : ColorWhereUniqueInput -> Value
encodeColorWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildContactCreateInput : ContactCreateInputRequiredFields -> (ContactCreateInputOptionalFields -> ContactCreateInputOptionalFields) -> ContactCreateInput
buildContactCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, color = Absent }
    in
    { status = optionals.status, name = required.name, color = optionals.color, href = required.href, action = required.action, handle = required.handle }


type alias ContactCreateInputRequiredFields =
    { name : String
    , href : String
    , action : String
    , handle : String
    }


type alias ContactCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , color : OptionalArgument String
    }


{-| Type for the ContactCreateInput input object.
-}
type alias ContactCreateInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , color : OptionalArgument String
    , href : String
    , action : String
    , handle : String
    }


{-| Encode a ContactCreateInput into a value that can be used as an argument.
-}
encodeContactCreateInput : ContactCreateInput -> Value
encodeContactCreateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "color", Encode.string |> Encode.optional input.color ), ( "href", Encode.string input.href |> Just ), ( "action", Encode.string input.action |> Just ), ( "handle", Encode.string input.handle |> Just ) ]


buildContactSubscriptionWhereInput : (ContactSubscriptionWhereInputOptionalFields -> ContactSubscriptionWhereInputOptionalFields) -> ContactSubscriptionWhereInput
buildContactSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ContactSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ContactSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ContactSubscriptionWhereInput)
    , or : OptionalArgument (List ContactSubscriptionWhereInput)
    , not : OptionalArgument (List ContactSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ContactWhereInput
    }


{-| Type alias for the `ContactSubscriptionWhereInput` attributes. Note that this type
needs to use the `ContactSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ContactSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ContactSubscriptionWhereInput)
    , or : OptionalArgument (List ContactSubscriptionWhereInput)
    , not : OptionalArgument (List ContactSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ContactWhereInput
    }


{-| Type for the ContactSubscriptionWhereInput input object.
-}
type ContactSubscriptionWhereInput
    = ContactSubscriptionWhereInput ContactSubscriptionWhereInputRaw


{-| Encode a ContactSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeContactSubscriptionWhereInput : ContactSubscriptionWhereInput -> Value
encodeContactSubscriptionWhereInput (ContactSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeContactSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeContactSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeContactSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeContactWhereInput |> Encode.optional input.node ) ]


buildContactUpdateInput : (ContactUpdateInputOptionalFields -> ContactUpdateInputOptionalFields) -> ContactUpdateInput
buildContactUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, color = Absent, href = Absent, action = Absent, handle = Absent }
    in
    { status = optionals.status, name = optionals.name, color = optionals.color, href = optionals.href, action = optionals.action, handle = optionals.handle }


type alias ContactUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    }


{-| Type for the ContactUpdateInput input object.
-}
type alias ContactUpdateInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    }


{-| Encode a ContactUpdateInput into a value that can be used as an argument.
-}
encodeContactUpdateInput : ContactUpdateInput -> Value
encodeContactUpdateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "color", Encode.string |> Encode.optional input.color ), ( "href", Encode.string |> Encode.optional input.href ), ( "action", Encode.string |> Encode.optional input.action ), ( "handle", Encode.string |> Encode.optional input.handle ) ]


buildContactUpdateManyMutationInput : (ContactUpdateManyMutationInputOptionalFields -> ContactUpdateManyMutationInputOptionalFields) -> ContactUpdateManyMutationInput
buildContactUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, color = Absent, href = Absent, action = Absent, handle = Absent }
    in
    { status = optionals.status, name = optionals.name, color = optionals.color, href = optionals.href, action = optionals.action, handle = optionals.handle }


type alias ContactUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    }


{-| Type for the ContactUpdateManyMutationInput input object.
-}
type alias ContactUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    }


{-| Encode a ContactUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeContactUpdateManyMutationInput : ContactUpdateManyMutationInput -> Value
encodeContactUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "color", Encode.string |> Encode.optional input.color ), ( "href", Encode.string |> Encode.optional input.href ), ( "action", Encode.string |> Encode.optional input.action ), ( "handle", Encode.string |> Encode.optional input.handle ) ]


buildContactWhereInput : (ContactWhereInputOptionalFields -> ContactWhereInputOptionalFields) -> ContactWhereInput
buildContactWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, color = Absent, color_not = Absent, color_in = Absent, color_not_in = Absent, color_lt = Absent, color_lte = Absent, color_gt = Absent, color_gte = Absent, color_contains = Absent, color_not_contains = Absent, color_starts_with = Absent, color_not_starts_with = Absent, color_ends_with = Absent, color_not_ends_with = Absent, href = Absent, href_not = Absent, href_in = Absent, href_not_in = Absent, href_lt = Absent, href_lte = Absent, href_gt = Absent, href_gte = Absent, href_contains = Absent, href_not_contains = Absent, href_starts_with = Absent, href_not_starts_with = Absent, href_ends_with = Absent, href_not_ends_with = Absent, action = Absent, action_not = Absent, action_in = Absent, action_not_in = Absent, action_lt = Absent, action_lte = Absent, action_gt = Absent, action_gte = Absent, action_contains = Absent, action_not_contains = Absent, action_starts_with = Absent, action_not_starts_with = Absent, action_ends_with = Absent, action_not_ends_with = Absent, handle = Absent, handle_not = Absent, handle_in = Absent, handle_not_in = Absent, handle_lt = Absent, handle_lte = Absent, handle_gt = Absent, handle_gte = Absent, handle_contains = Absent, handle_not_contains = Absent, handle_starts_with = Absent, handle_not_starts_with = Absent, handle_ends_with = Absent, handle_not_ends_with = Absent }
    in
    ContactWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, color = optionals.color, color_not = optionals.color_not, color_in = optionals.color_in, color_not_in = optionals.color_not_in, color_lt = optionals.color_lt, color_lte = optionals.color_lte, color_gt = optionals.color_gt, color_gte = optionals.color_gte, color_contains = optionals.color_contains, color_not_contains = optionals.color_not_contains, color_starts_with = optionals.color_starts_with, color_not_starts_with = optionals.color_not_starts_with, color_ends_with = optionals.color_ends_with, color_not_ends_with = optionals.color_not_ends_with, href = optionals.href, href_not = optionals.href_not, href_in = optionals.href_in, href_not_in = optionals.href_not_in, href_lt = optionals.href_lt, href_lte = optionals.href_lte, href_gt = optionals.href_gt, href_gte = optionals.href_gte, href_contains = optionals.href_contains, href_not_contains = optionals.href_not_contains, href_starts_with = optionals.href_starts_with, href_not_starts_with = optionals.href_not_starts_with, href_ends_with = optionals.href_ends_with, href_not_ends_with = optionals.href_not_ends_with, action = optionals.action, action_not = optionals.action_not, action_in = optionals.action_in, action_not_in = optionals.action_not_in, action_lt = optionals.action_lt, action_lte = optionals.action_lte, action_gt = optionals.action_gt, action_gte = optionals.action_gte, action_contains = optionals.action_contains, action_not_contains = optionals.action_not_contains, action_starts_with = optionals.action_starts_with, action_not_starts_with = optionals.action_not_starts_with, action_ends_with = optionals.action_ends_with, action_not_ends_with = optionals.action_not_ends_with, handle = optionals.handle, handle_not = optionals.handle_not, handle_in = optionals.handle_in, handle_not_in = optionals.handle_not_in, handle_lt = optionals.handle_lt, handle_lte = optionals.handle_lte, handle_gt = optionals.handle_gt, handle_gte = optionals.handle_gte, handle_contains = optionals.handle_contains, handle_not_contains = optionals.handle_not_contains, handle_starts_with = optionals.handle_starts_with, handle_not_starts_with = optionals.handle_not_starts_with, handle_ends_with = optionals.handle_ends_with, handle_not_ends_with = optionals.handle_not_ends_with }


type alias ContactWhereInputOptionalFields =
    { and : OptionalArgument (List ContactWhereInput)
    , or : OptionalArgument (List ContactWhereInput)
    , not : OptionalArgument (List ContactWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , color : OptionalArgument String
    , color_not : OptionalArgument String
    , color_in : OptionalArgument (List String)
    , color_not_in : OptionalArgument (List String)
    , color_lt : OptionalArgument String
    , color_lte : OptionalArgument String
    , color_gt : OptionalArgument String
    , color_gte : OptionalArgument String
    , color_contains : OptionalArgument String
    , color_not_contains : OptionalArgument String
    , color_starts_with : OptionalArgument String
    , color_not_starts_with : OptionalArgument String
    , color_ends_with : OptionalArgument String
    , color_not_ends_with : OptionalArgument String
    , href : OptionalArgument String
    , href_not : OptionalArgument String
    , href_in : OptionalArgument (List String)
    , href_not_in : OptionalArgument (List String)
    , href_lt : OptionalArgument String
    , href_lte : OptionalArgument String
    , href_gt : OptionalArgument String
    , href_gte : OptionalArgument String
    , href_contains : OptionalArgument String
    , href_not_contains : OptionalArgument String
    , href_starts_with : OptionalArgument String
    , href_not_starts_with : OptionalArgument String
    , href_ends_with : OptionalArgument String
    , href_not_ends_with : OptionalArgument String
    , action : OptionalArgument String
    , action_not : OptionalArgument String
    , action_in : OptionalArgument (List String)
    , action_not_in : OptionalArgument (List String)
    , action_lt : OptionalArgument String
    , action_lte : OptionalArgument String
    , action_gt : OptionalArgument String
    , action_gte : OptionalArgument String
    , action_contains : OptionalArgument String
    , action_not_contains : OptionalArgument String
    , action_starts_with : OptionalArgument String
    , action_not_starts_with : OptionalArgument String
    , action_ends_with : OptionalArgument String
    , action_not_ends_with : OptionalArgument String
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    }


{-| Type alias for the `ContactWhereInput` attributes. Note that this type
needs to use the `ContactWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ContactWhereInputRaw =
    { and : OptionalArgument (List ContactWhereInput)
    , or : OptionalArgument (List ContactWhereInput)
    , not : OptionalArgument (List ContactWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , color : OptionalArgument String
    , color_not : OptionalArgument String
    , color_in : OptionalArgument (List String)
    , color_not_in : OptionalArgument (List String)
    , color_lt : OptionalArgument String
    , color_lte : OptionalArgument String
    , color_gt : OptionalArgument String
    , color_gte : OptionalArgument String
    , color_contains : OptionalArgument String
    , color_not_contains : OptionalArgument String
    , color_starts_with : OptionalArgument String
    , color_not_starts_with : OptionalArgument String
    , color_ends_with : OptionalArgument String
    , color_not_ends_with : OptionalArgument String
    , href : OptionalArgument String
    , href_not : OptionalArgument String
    , href_in : OptionalArgument (List String)
    , href_not_in : OptionalArgument (List String)
    , href_lt : OptionalArgument String
    , href_lte : OptionalArgument String
    , href_gt : OptionalArgument String
    , href_gte : OptionalArgument String
    , href_contains : OptionalArgument String
    , href_not_contains : OptionalArgument String
    , href_starts_with : OptionalArgument String
    , href_not_starts_with : OptionalArgument String
    , href_ends_with : OptionalArgument String
    , href_not_ends_with : OptionalArgument String
    , action : OptionalArgument String
    , action_not : OptionalArgument String
    , action_in : OptionalArgument (List String)
    , action_not_in : OptionalArgument (List String)
    , action_lt : OptionalArgument String
    , action_lte : OptionalArgument String
    , action_gt : OptionalArgument String
    , action_gte : OptionalArgument String
    , action_contains : OptionalArgument String
    , action_not_contains : OptionalArgument String
    , action_starts_with : OptionalArgument String
    , action_not_starts_with : OptionalArgument String
    , action_ends_with : OptionalArgument String
    , action_not_ends_with : OptionalArgument String
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    }


{-| Type for the ContactWhereInput input object.
-}
type ContactWhereInput
    = ContactWhereInput ContactWhereInputRaw


{-| Encode a ContactWhereInput into a value that can be used as an argument.
-}
encodeContactWhereInput : ContactWhereInput -> Value
encodeContactWhereInput (ContactWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeContactWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeContactWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeContactWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "color", Encode.string |> Encode.optional input.color ), ( "color_not", Encode.string |> Encode.optional input.color_not ), ( "color_in", (Encode.string |> Encode.list) |> Encode.optional input.color_in ), ( "color_not_in", (Encode.string |> Encode.list) |> Encode.optional input.color_not_in ), ( "color_lt", Encode.string |> Encode.optional input.color_lt ), ( "color_lte", Encode.string |> Encode.optional input.color_lte ), ( "color_gt", Encode.string |> Encode.optional input.color_gt ), ( "color_gte", Encode.string |> Encode.optional input.color_gte ), ( "color_contains", Encode.string |> Encode.optional input.color_contains ), ( "color_not_contains", Encode.string |> Encode.optional input.color_not_contains ), ( "color_starts_with", Encode.string |> Encode.optional input.color_starts_with ), ( "color_not_starts_with", Encode.string |> Encode.optional input.color_not_starts_with ), ( "color_ends_with", Encode.string |> Encode.optional input.color_ends_with ), ( "color_not_ends_with", Encode.string |> Encode.optional input.color_not_ends_with ), ( "href", Encode.string |> Encode.optional input.href ), ( "href_not", Encode.string |> Encode.optional input.href_not ), ( "href_in", (Encode.string |> Encode.list) |> Encode.optional input.href_in ), ( "href_not_in", (Encode.string |> Encode.list) |> Encode.optional input.href_not_in ), ( "href_lt", Encode.string |> Encode.optional input.href_lt ), ( "href_lte", Encode.string |> Encode.optional input.href_lte ), ( "href_gt", Encode.string |> Encode.optional input.href_gt ), ( "href_gte", Encode.string |> Encode.optional input.href_gte ), ( "href_contains", Encode.string |> Encode.optional input.href_contains ), ( "href_not_contains", Encode.string |> Encode.optional input.href_not_contains ), ( "href_starts_with", Encode.string |> Encode.optional input.href_starts_with ), ( "href_not_starts_with", Encode.string |> Encode.optional input.href_not_starts_with ), ( "href_ends_with", Encode.string |> Encode.optional input.href_ends_with ), ( "href_not_ends_with", Encode.string |> Encode.optional input.href_not_ends_with ), ( "action", Encode.string |> Encode.optional input.action ), ( "action_not", Encode.string |> Encode.optional input.action_not ), ( "action_in", (Encode.string |> Encode.list) |> Encode.optional input.action_in ), ( "action_not_in", (Encode.string |> Encode.list) |> Encode.optional input.action_not_in ), ( "action_lt", Encode.string |> Encode.optional input.action_lt ), ( "action_lte", Encode.string |> Encode.optional input.action_lte ), ( "action_gt", Encode.string |> Encode.optional input.action_gt ), ( "action_gte", Encode.string |> Encode.optional input.action_gte ), ( "action_contains", Encode.string |> Encode.optional input.action_contains ), ( "action_not_contains", Encode.string |> Encode.optional input.action_not_contains ), ( "action_starts_with", Encode.string |> Encode.optional input.action_starts_with ), ( "action_not_starts_with", Encode.string |> Encode.optional input.action_not_starts_with ), ( "action_ends_with", Encode.string |> Encode.optional input.action_ends_with ), ( "action_not_ends_with", Encode.string |> Encode.optional input.action_not_ends_with ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "handle_not", Encode.string |> Encode.optional input.handle_not ), ( "handle_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_in ), ( "handle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_not_in ), ( "handle_lt", Encode.string |> Encode.optional input.handle_lt ), ( "handle_lte", Encode.string |> Encode.optional input.handle_lte ), ( "handle_gt", Encode.string |> Encode.optional input.handle_gt ), ( "handle_gte", Encode.string |> Encode.optional input.handle_gte ), ( "handle_contains", Encode.string |> Encode.optional input.handle_contains ), ( "handle_not_contains", Encode.string |> Encode.optional input.handle_not_contains ), ( "handle_starts_with", Encode.string |> Encode.optional input.handle_starts_with ), ( "handle_not_starts_with", Encode.string |> Encode.optional input.handle_not_starts_with ), ( "handle_ends_with", Encode.string |> Encode.optional input.handle_ends_with ), ( "handle_not_ends_with", Encode.string |> Encode.optional input.handle_not_ends_with ) ]


buildContactWhereUniqueInput : (ContactWhereUniqueInputOptionalFields -> ContactWhereUniqueInputOptionalFields) -> ContactWhereUniqueInput
buildContactWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ContactWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the ContactWhereUniqueInput input object.
-}
type alias ContactWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a ContactWhereUniqueInput into a value that can be used as an argument.
-}
encodeContactWhereUniqueInput : ContactWhereUniqueInput -> Value
encodeContactWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildDocumentOutputInput : (DocumentOutputInputOptionalFields -> DocumentOutputInputOptionalFields) -> DocumentOutputInput
buildDocumentOutputInput fillOptionals =
    let
        optionals =
            fillOptionals
                { format = Absent }
    in
    { format = optionals.format }


type alias DocumentOutputInputOptionalFields =
    { format : OptionalArgument DB.Enum.DocumentFileTypes.DocumentFileTypes }


{-| Type for the DocumentOutputInput input object.
-}
type alias DocumentOutputInput =
    { format : OptionalArgument DB.Enum.DocumentFileTypes.DocumentFileTypes }


{-| Encode a DocumentOutputInput into a value that can be used as an argument.
-}
encodeDocumentOutputInput : DocumentOutputInput -> Value
encodeDocumentOutputInput input =
    Encode.maybeObject
        [ ( "format", Encode.enum DB.Enum.DocumentFileTypes.toString |> Encode.optional input.format ) ]


buildDocumentTransformationInput : (DocumentTransformationInputOptionalFields -> DocumentTransformationInputOptionalFields) -> DocumentTransformationInput
buildDocumentTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { output = Absent }
    in
    { output = optionals.output }


type alias DocumentTransformationInputOptionalFields =
    { output : OptionalArgument DocumentOutputInput }


{-| Type for the DocumentTransformationInput input object.
-}
type alias DocumentTransformationInput =
    { output : OptionalArgument DocumentOutputInput }


{-| Encode a DocumentTransformationInput into a value that can be used as an argument.
-}
encodeDocumentTransformationInput : DocumentTransformationInput -> Value
encodeDocumentTransformationInput input =
    Encode.maybeObject
        [ ( "output", encodeDocumentOutputInput |> Encode.optional input.output ) ]


buildImageResizeInput : (ImageResizeInputOptionalFields -> ImageResizeInputOptionalFields) -> ImageResizeInput
buildImageResizeInput fillOptionals =
    let
        optionals =
            fillOptionals
                { width = Absent, height = Absent, fit = Absent }
    in
    { width = optionals.width, height = optionals.height, fit = optionals.fit }


type alias ImageResizeInputOptionalFields =
    { width : OptionalArgument Int
    , height : OptionalArgument Int
    , fit : OptionalArgument DB.Enum.ImageFit.ImageFit
    }


{-| Type for the ImageResizeInput input object.
-}
type alias ImageResizeInput =
    { width : OptionalArgument Int
    , height : OptionalArgument Int
    , fit : OptionalArgument DB.Enum.ImageFit.ImageFit
    }


{-| Encode a ImageResizeInput into a value that can be used as an argument.
-}
encodeImageResizeInput : ImageResizeInput -> Value
encodeImageResizeInput input =
    Encode.maybeObject
        [ ( "width", Encode.int |> Encode.optional input.width ), ( "height", Encode.int |> Encode.optional input.height ), ( "fit", Encode.enum DB.Enum.ImageFit.toString |> Encode.optional input.fit ) ]


buildImageTransformationInput : (ImageTransformationInputOptionalFields -> ImageTransformationInputOptionalFields) -> ImageTransformationInput
buildImageTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { resize = Absent }
    in
    { resize = optionals.resize }


type alias ImageTransformationInputOptionalFields =
    { resize : OptionalArgument ImageResizeInput }


{-| Type for the ImageTransformationInput input object.
-}
type alias ImageTransformationInput =
    { resize : OptionalArgument ImageResizeInput }


{-| Encode a ImageTransformationInput into a value that can be used as an argument.
-}
encodeImageTransformationInput : ImageTransformationInput -> Value
encodeImageTransformationInput input =
    Encode.maybeObject
        [ ( "resize", encodeImageResizeInput |> Encode.optional input.resize ) ]


buildLocationSubscriptionWhereInput : (LocationSubscriptionWhereInputOptionalFields -> LocationSubscriptionWhereInputOptionalFields) -> LocationSubscriptionWhereInput
buildLocationSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    LocationSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias LocationSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List LocationSubscriptionWhereInput)
    , or : OptionalArgument (List LocationSubscriptionWhereInput)
    , not : OptionalArgument (List LocationSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument LocationWhereInput
    }


{-| Type alias for the `LocationSubscriptionWhereInput` attributes. Note that this type
needs to use the `LocationSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias LocationSubscriptionWhereInputRaw =
    { and : OptionalArgument (List LocationSubscriptionWhereInput)
    , or : OptionalArgument (List LocationSubscriptionWhereInput)
    , not : OptionalArgument (List LocationSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument LocationWhereInput
    }


{-| Type for the LocationSubscriptionWhereInput input object.
-}
type LocationSubscriptionWhereInput
    = LocationSubscriptionWhereInput LocationSubscriptionWhereInputRaw


{-| Encode a LocationSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeLocationSubscriptionWhereInput : LocationSubscriptionWhereInput -> Value
encodeLocationSubscriptionWhereInput (LocationSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeLocationWhereInput |> Encode.optional input.node ) ]


buildLocationWhereInput : (LocationWhereInputOptionalFields -> LocationWhereInputOptionalFields) -> LocationWhereInput
buildLocationWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent }
    in
    LocationWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte }


type alias LocationWhereInputOptionalFields =
    { and : OptionalArgument (List LocationWhereInput)
    , or : OptionalArgument (List LocationWhereInput)
    , not : OptionalArgument (List LocationWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type alias for the `LocationWhereInput` attributes. Note that this type
needs to use the `LocationWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias LocationWhereInputRaw =
    { and : OptionalArgument (List LocationWhereInput)
    , or : OptionalArgument (List LocationWhereInput)
    , not : OptionalArgument (List LocationWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type for the LocationWhereInput input object.
-}
type LocationWhereInput
    = LocationWhereInput LocationWhereInputRaw


{-| Encode a LocationWhereInput into a value that can be used as an argument.
-}
encodeLocationWhereInput : LocationWhereInput -> Value
encodeLocationWhereInput (LocationWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ) ]


buildLocationWhereUniqueInput : (LocationWhereUniqueInputOptionalFields -> LocationWhereUniqueInputOptionalFields) -> LocationWhereUniqueInput
buildLocationWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias LocationWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the LocationWhereUniqueInput input object.
-}
type alias LocationWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a LocationWhereUniqueInput into a value that can be used as an argument.
-}
encodeLocationWhereUniqueInput : LocationWhereUniqueInput -> Value
encodeLocationWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildProjectsCreateInput : ProjectsCreateInputRequiredFields -> (ProjectsCreateInputOptionalFields -> ProjectsCreateInputOptionalFields) -> ProjectsCreateInput
buildProjectsCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent, picture = Absent }
    in
    ProjectsCreateInput { status = optionals.status, name = required.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images, picture = optionals.picture }


type alias ProjectsCreateInputRequiredFields =
    { name : String }


type alias ProjectsCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectsInput
    }


{-| Type alias for the `ProjectsCreateInput` attributes. Note that this type
needs to use the `ProjectsCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsCreateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectsInput
    }


{-| Type for the ProjectsCreateInput input object.
-}
type ProjectsCreateInput
    = ProjectsCreateInput ProjectsCreateInputRaw


{-| Encode a ProjectsCreateInput into a value that can be used as an argument.
-}
encodeProjectsCreateInput : ProjectsCreateInput -> Value
encodeProjectsCreateInput (ProjectsCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsCreatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetCreateManyWithoutImagesProjectsInput |> Encode.optional input.images ), ( "picture", encodeAssetCreateOneWithoutPictureProjectsInput |> Encode.optional input.picture ) ]


buildProjectsCreateManyWithoutImagesInput : (ProjectsCreateManyWithoutImagesInputOptionalFields -> ProjectsCreateManyWithoutImagesInputOptionalFields) -> ProjectsCreateManyWithoutImagesInput
buildProjectsCreateManyWithoutImagesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    ProjectsCreateManyWithoutImagesInput { create = optionals.create, connect = optionals.connect }


type alias ProjectsCreateManyWithoutImagesInputOptionalFields =
    { create : OptionalArgument (List ProjectsCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    }


{-| Type alias for the `ProjectsCreateManyWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectsCreateManyWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsCreateManyWithoutImagesInputRaw =
    { create : OptionalArgument (List ProjectsCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    }


{-| Type for the ProjectsCreateManyWithoutImagesInput input object.
-}
type ProjectsCreateManyWithoutImagesInput
    = ProjectsCreateManyWithoutImagesInput ProjectsCreateManyWithoutImagesInputRaw


{-| Encode a ProjectsCreateManyWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectsCreateManyWithoutImagesInput : ProjectsCreateManyWithoutImagesInput -> Value
encodeProjectsCreateManyWithoutImagesInput (ProjectsCreateManyWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectsCreateWithoutImagesInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildProjectsCreateManyWithoutPictureInput : (ProjectsCreateManyWithoutPictureInputOptionalFields -> ProjectsCreateManyWithoutPictureInputOptionalFields) -> ProjectsCreateManyWithoutPictureInput
buildProjectsCreateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    ProjectsCreateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect }


type alias ProjectsCreateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List ProjectsCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    }


{-| Type alias for the `ProjectsCreateManyWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectsCreateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsCreateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List ProjectsCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    }


{-| Type for the ProjectsCreateManyWithoutPictureInput input object.
-}
type ProjectsCreateManyWithoutPictureInput
    = ProjectsCreateManyWithoutPictureInput ProjectsCreateManyWithoutPictureInputRaw


{-| Encode a ProjectsCreateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectsCreateManyWithoutPictureInput : ProjectsCreateManyWithoutPictureInput -> Value
encodeProjectsCreateManyWithoutPictureInput (ProjectsCreateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectsCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildProjectsCreateWithoutImagesInput : ProjectsCreateWithoutImagesInputRequiredFields -> (ProjectsCreateWithoutImagesInputOptionalFields -> ProjectsCreateWithoutImagesInputOptionalFields) -> ProjectsCreateWithoutImagesInput
buildProjectsCreateWithoutImagesInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, picture = Absent }
    in
    ProjectsCreateWithoutImagesInput { status = optionals.status, name = required.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, picture = optionals.picture }


type alias ProjectsCreateWithoutImagesInputRequiredFields =
    { name : String }


type alias ProjectsCreateWithoutImagesInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectsInput
    }


{-| Type alias for the `ProjectsCreateWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectsCreateWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsCreateWithoutImagesInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectsInput
    }


{-| Type for the ProjectsCreateWithoutImagesInput input object.
-}
type ProjectsCreateWithoutImagesInput
    = ProjectsCreateWithoutImagesInput ProjectsCreateWithoutImagesInputRaw


{-| Encode a ProjectsCreateWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectsCreateWithoutImagesInput : ProjectsCreateWithoutImagesInput -> Value
encodeProjectsCreateWithoutImagesInput (ProjectsCreateWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsCreatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetCreateOneWithoutPictureProjectsInput |> Encode.optional input.picture ) ]


buildProjectsCreateWithoutPictureInput : ProjectsCreateWithoutPictureInputRequiredFields -> (ProjectsCreateWithoutPictureInputOptionalFields -> ProjectsCreateWithoutPictureInputOptionalFields) -> ProjectsCreateWithoutPictureInput
buildProjectsCreateWithoutPictureInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent }
    in
    ProjectsCreateWithoutPictureInput { status = optionals.status, name = required.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images }


type alias ProjectsCreateWithoutPictureInputRequiredFields =
    { name : String }


type alias ProjectsCreateWithoutPictureInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectsInput
    }


{-| Type alias for the `ProjectsCreateWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectsCreateWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsCreateWithoutPictureInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectsInput
    }


{-| Type for the ProjectsCreateWithoutPictureInput input object.
-}
type ProjectsCreateWithoutPictureInput
    = ProjectsCreateWithoutPictureInput ProjectsCreateWithoutPictureInputRaw


{-| Encode a ProjectsCreateWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectsCreateWithoutPictureInput : ProjectsCreateWithoutPictureInput -> Value
encodeProjectsCreateWithoutPictureInput (ProjectsCreateWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsCreatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetCreateManyWithoutImagesProjectsInput |> Encode.optional input.images ) ]


buildProjectsCreatetagsInput : (ProjectsCreatetagsInputOptionalFields -> ProjectsCreatetagsInputOptionalFields) -> ProjectsCreatetagsInput
buildProjectsCreatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias ProjectsCreatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the ProjectsCreatetagsInput input object.
-}
type alias ProjectsCreatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a ProjectsCreatetagsInput into a value that can be used as an argument.
-}
encodeProjectsCreatetagsInput : ProjectsCreatetagsInput -> Value
encodeProjectsCreatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildProjectsScalarWhereInput : (ProjectsScalarWhereInputOptionalFields -> ProjectsScalarWhereInputOptionalFields) -> ProjectsScalarWhereInput
buildProjectsScalarWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, description = Absent, description_not = Absent, description_in = Absent, description_not_in = Absent, description_lt = Absent, description_lte = Absent, description_gt = Absent, description_gte = Absent, description_contains = Absent, description_not_contains = Absent, description_starts_with = Absent, description_not_starts_with = Absent, description_ends_with = Absent, description_not_ends_with = Absent, myWork = Absent, myWork_not = Absent, myWork_in = Absent, myWork_not_in = Absent, myWork_lt = Absent, myWork_lte = Absent, myWork_gt = Absent, myWork_gte = Absent, myWork_contains = Absent, myWork_not_contains = Absent, myWork_starts_with = Absent, myWork_not_starts_with = Absent, myWork_ends_with = Absent, myWork_not_ends_with = Absent, link = Absent, link_not = Absent, link_in = Absent, link_not_in = Absent, link_lt = Absent, link_lte = Absent, link_gt = Absent, link_gte = Absent, link_contains = Absent, link_not_contains = Absent, link_starts_with = Absent, link_not_starts_with = Absent, link_ends_with = Absent, link_not_ends_with = Absent }
    in
    ProjectsScalarWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, description = optionals.description, description_not = optionals.description_not, description_in = optionals.description_in, description_not_in = optionals.description_not_in, description_lt = optionals.description_lt, description_lte = optionals.description_lte, description_gt = optionals.description_gt, description_gte = optionals.description_gte, description_contains = optionals.description_contains, description_not_contains = optionals.description_not_contains, description_starts_with = optionals.description_starts_with, description_not_starts_with = optionals.description_not_starts_with, description_ends_with = optionals.description_ends_with, description_not_ends_with = optionals.description_not_ends_with, myWork = optionals.myWork, myWork_not = optionals.myWork_not, myWork_in = optionals.myWork_in, myWork_not_in = optionals.myWork_not_in, myWork_lt = optionals.myWork_lt, myWork_lte = optionals.myWork_lte, myWork_gt = optionals.myWork_gt, myWork_gte = optionals.myWork_gte, myWork_contains = optionals.myWork_contains, myWork_not_contains = optionals.myWork_not_contains, myWork_starts_with = optionals.myWork_starts_with, myWork_not_starts_with = optionals.myWork_not_starts_with, myWork_ends_with = optionals.myWork_ends_with, myWork_not_ends_with = optionals.myWork_not_ends_with, link = optionals.link, link_not = optionals.link_not, link_in = optionals.link_in, link_not_in = optionals.link_not_in, link_lt = optionals.link_lt, link_lte = optionals.link_lte, link_gt = optionals.link_gt, link_gte = optionals.link_gte, link_contains = optionals.link_contains, link_not_contains = optionals.link_not_contains, link_starts_with = optionals.link_starts_with, link_not_starts_with = optionals.link_not_starts_with, link_ends_with = optionals.link_ends_with, link_not_ends_with = optionals.link_not_ends_with }


type alias ProjectsScalarWhereInputOptionalFields =
    { and : OptionalArgument (List ProjectsScalarWhereInput)
    , or : OptionalArgument (List ProjectsScalarWhereInput)
    , not : OptionalArgument (List ProjectsScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    }


{-| Type alias for the `ProjectsScalarWhereInput` attributes. Note that this type
needs to use the `ProjectsScalarWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsScalarWhereInputRaw =
    { and : OptionalArgument (List ProjectsScalarWhereInput)
    , or : OptionalArgument (List ProjectsScalarWhereInput)
    , not : OptionalArgument (List ProjectsScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    }


{-| Type for the ProjectsScalarWhereInput input object.
-}
type ProjectsScalarWhereInput
    = ProjectsScalarWhereInput ProjectsScalarWhereInputRaw


{-| Encode a ProjectsScalarWhereInput into a value that can be used as an argument.
-}
encodeProjectsScalarWhereInput : ProjectsScalarWhereInput -> Value
encodeProjectsScalarWhereInput (ProjectsScalarWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeProjectsScalarWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeProjectsScalarWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeProjectsScalarWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "myWork_not", Encode.string |> Encode.optional input.myWork_not ), ( "myWork_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_in ), ( "myWork_not_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_not_in ), ( "myWork_lt", Encode.string |> Encode.optional input.myWork_lt ), ( "myWork_lte", Encode.string |> Encode.optional input.myWork_lte ), ( "myWork_gt", Encode.string |> Encode.optional input.myWork_gt ), ( "myWork_gte", Encode.string |> Encode.optional input.myWork_gte ), ( "myWork_contains", Encode.string |> Encode.optional input.myWork_contains ), ( "myWork_not_contains", Encode.string |> Encode.optional input.myWork_not_contains ), ( "myWork_starts_with", Encode.string |> Encode.optional input.myWork_starts_with ), ( "myWork_not_starts_with", Encode.string |> Encode.optional input.myWork_not_starts_with ), ( "myWork_ends_with", Encode.string |> Encode.optional input.myWork_ends_with ), ( "myWork_not_ends_with", Encode.string |> Encode.optional input.myWork_not_ends_with ), ( "link", Encode.string |> Encode.optional input.link ), ( "link_not", Encode.string |> Encode.optional input.link_not ), ( "link_in", (Encode.string |> Encode.list) |> Encode.optional input.link_in ), ( "link_not_in", (Encode.string |> Encode.list) |> Encode.optional input.link_not_in ), ( "link_lt", Encode.string |> Encode.optional input.link_lt ), ( "link_lte", Encode.string |> Encode.optional input.link_lte ), ( "link_gt", Encode.string |> Encode.optional input.link_gt ), ( "link_gte", Encode.string |> Encode.optional input.link_gte ), ( "link_contains", Encode.string |> Encode.optional input.link_contains ), ( "link_not_contains", Encode.string |> Encode.optional input.link_not_contains ), ( "link_starts_with", Encode.string |> Encode.optional input.link_starts_with ), ( "link_not_starts_with", Encode.string |> Encode.optional input.link_not_starts_with ), ( "link_ends_with", Encode.string |> Encode.optional input.link_ends_with ), ( "link_not_ends_with", Encode.string |> Encode.optional input.link_not_ends_with ) ]


buildProjectsSubscriptionWhereInput : (ProjectsSubscriptionWhereInputOptionalFields -> ProjectsSubscriptionWhereInputOptionalFields) -> ProjectsSubscriptionWhereInput
buildProjectsSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ProjectsSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ProjectsSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ProjectsSubscriptionWhereInput)
    , or : OptionalArgument (List ProjectsSubscriptionWhereInput)
    , not : OptionalArgument (List ProjectsSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ProjectsWhereInput
    }


{-| Type alias for the `ProjectsSubscriptionWhereInput` attributes. Note that this type
needs to use the `ProjectsSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ProjectsSubscriptionWhereInput)
    , or : OptionalArgument (List ProjectsSubscriptionWhereInput)
    , not : OptionalArgument (List ProjectsSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ProjectsWhereInput
    }


{-| Type for the ProjectsSubscriptionWhereInput input object.
-}
type ProjectsSubscriptionWhereInput
    = ProjectsSubscriptionWhereInput ProjectsSubscriptionWhereInputRaw


{-| Encode a ProjectsSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeProjectsSubscriptionWhereInput : ProjectsSubscriptionWhereInput -> Value
encodeProjectsSubscriptionWhereInput (ProjectsSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeProjectsSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeProjectsSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeProjectsSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeProjectsWhereInput |> Encode.optional input.node ) ]


buildProjectsUpdateInput : (ProjectsUpdateInputOptionalFields -> ProjectsUpdateInputOptionalFields) -> ProjectsUpdateInput
buildProjectsUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent, picture = Absent }
    in
    ProjectsUpdateInput { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images, picture = optionals.picture }


type alias ProjectsUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectsInput
    }


{-| Type alias for the `ProjectsUpdateInput` attributes. Note that this type
needs to use the `ProjectsUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectsInput
    }


{-| Type for the ProjectsUpdateInput input object.
-}
type ProjectsUpdateInput
    = ProjectsUpdateInput ProjectsUpdateInputRaw


{-| Encode a ProjectsUpdateInput into a value that can be used as an argument.
-}
encodeProjectsUpdateInput : ProjectsUpdateInput -> Value
encodeProjectsUpdateInput (ProjectsUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsUpdatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetUpdateManyWithoutImagesProjectsInput |> Encode.optional input.images ), ( "picture", encodeAssetUpdateOneWithoutPictureProjectsInput |> Encode.optional input.picture ) ]


buildProjectsUpdateManyDataInput : (ProjectsUpdateManyDataInputOptionalFields -> ProjectsUpdateManyDataInputOptionalFields) -> ProjectsUpdateManyDataInput
buildProjectsUpdateManyDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent }
    in
    { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags }


type alias ProjectsUpdateManyDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    }


{-| Type for the ProjectsUpdateManyDataInput input object.
-}
type alias ProjectsUpdateManyDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    }


{-| Encode a ProjectsUpdateManyDataInput into a value that can be used as an argument.
-}
encodeProjectsUpdateManyDataInput : ProjectsUpdateManyDataInput -> Value
encodeProjectsUpdateManyDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsUpdatetagsInput |> Encode.optional input.tags ) ]


buildProjectsUpdateManyMutationInput : (ProjectsUpdateManyMutationInputOptionalFields -> ProjectsUpdateManyMutationInputOptionalFields) -> ProjectsUpdateManyMutationInput
buildProjectsUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent }
    in
    { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags }


type alias ProjectsUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    }


{-| Type for the ProjectsUpdateManyMutationInput input object.
-}
type alias ProjectsUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    }


{-| Encode a ProjectsUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeProjectsUpdateManyMutationInput : ProjectsUpdateManyMutationInput -> Value
encodeProjectsUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsUpdatetagsInput |> Encode.optional input.tags ) ]


buildProjectsUpdateManyWithWhereNestedInput : ProjectsUpdateManyWithWhereNestedInputRequiredFields -> ProjectsUpdateManyWithWhereNestedInput
buildProjectsUpdateManyWithWhereNestedInput required =
    ProjectsUpdateManyWithWhereNestedInput { where_ = required.where_, data = required.data }


type alias ProjectsUpdateManyWithWhereNestedInputRequiredFields =
    { where_ : ProjectsScalarWhereInput
    , data : ProjectsUpdateManyDataInput
    }


{-| Type alias for the `ProjectsUpdateManyWithWhereNestedInput` attributes. Note that this type
needs to use the `ProjectsUpdateManyWithWhereNestedInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateManyWithWhereNestedInputRaw =
    { where_ : ProjectsScalarWhereInput
    , data : ProjectsUpdateManyDataInput
    }


{-| Type for the ProjectsUpdateManyWithWhereNestedInput input object.
-}
type ProjectsUpdateManyWithWhereNestedInput
    = ProjectsUpdateManyWithWhereNestedInput ProjectsUpdateManyWithWhereNestedInputRaw


{-| Encode a ProjectsUpdateManyWithWhereNestedInput into a value that can be used as an argument.
-}
encodeProjectsUpdateManyWithWhereNestedInput : ProjectsUpdateManyWithWhereNestedInput -> Value
encodeProjectsUpdateManyWithWhereNestedInput (ProjectsUpdateManyWithWhereNestedInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectsScalarWhereInput input.where_ |> Just ), ( "data", encodeProjectsUpdateManyDataInput input.data |> Just ) ]


buildProjectsUpdateManyWithoutImagesInput : (ProjectsUpdateManyWithoutImagesInputOptionalFields -> ProjectsUpdateManyWithoutImagesInputOptionalFields) -> ProjectsUpdateManyWithoutImagesInput
buildProjectsUpdateManyWithoutImagesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    ProjectsUpdateManyWithoutImagesInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias ProjectsUpdateManyWithoutImagesInputOptionalFields =
    { create : OptionalArgument (List ProjectsCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectsWhereUniqueInput)
    , delete : OptionalArgument (List ProjectsWhereUniqueInput)
    , update : OptionalArgument (List ProjectsUpdateWithWhereUniqueWithoutImagesInput)
    , updateMany : OptionalArgument (List ProjectsUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectsScalarWhereInput)
    , upsert : OptionalArgument (List ProjectsUpsertWithWhereUniqueWithoutImagesInput)
    }


{-| Type alias for the `ProjectsUpdateManyWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectsUpdateManyWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateManyWithoutImagesInputRaw =
    { create : OptionalArgument (List ProjectsCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectsWhereUniqueInput)
    , delete : OptionalArgument (List ProjectsWhereUniqueInput)
    , update : OptionalArgument (List ProjectsUpdateWithWhereUniqueWithoutImagesInput)
    , updateMany : OptionalArgument (List ProjectsUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectsScalarWhereInput)
    , upsert : OptionalArgument (List ProjectsUpsertWithWhereUniqueWithoutImagesInput)
    }


{-| Type for the ProjectsUpdateManyWithoutImagesInput input object.
-}
type ProjectsUpdateManyWithoutImagesInput
    = ProjectsUpdateManyWithoutImagesInput ProjectsUpdateManyWithoutImagesInputRaw


{-| Encode a ProjectsUpdateManyWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectsUpdateManyWithoutImagesInput : ProjectsUpdateManyWithoutImagesInput -> Value
encodeProjectsUpdateManyWithoutImagesInput (ProjectsUpdateManyWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectsCreateWithoutImagesInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "disconnect", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeProjectsUpdateWithWhereUniqueWithoutImagesInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeProjectsUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeProjectsScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeProjectsUpsertWithWhereUniqueWithoutImagesInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildProjectsUpdateManyWithoutPictureInput : (ProjectsUpdateManyWithoutPictureInputOptionalFields -> ProjectsUpdateManyWithoutPictureInputOptionalFields) -> ProjectsUpdateManyWithoutPictureInput
buildProjectsUpdateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    ProjectsUpdateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias ProjectsUpdateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List ProjectsCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectsWhereUniqueInput)
    , delete : OptionalArgument (List ProjectsWhereUniqueInput)
    , update : OptionalArgument (List ProjectsUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List ProjectsUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectsScalarWhereInput)
    , upsert : OptionalArgument (List ProjectsUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type alias for the `ProjectsUpdateManyWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectsUpdateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List ProjectsCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectsWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectsWhereUniqueInput)
    , delete : OptionalArgument (List ProjectsWhereUniqueInput)
    , update : OptionalArgument (List ProjectsUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List ProjectsUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectsScalarWhereInput)
    , upsert : OptionalArgument (List ProjectsUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type for the ProjectsUpdateManyWithoutPictureInput input object.
-}
type ProjectsUpdateManyWithoutPictureInput
    = ProjectsUpdateManyWithoutPictureInput ProjectsUpdateManyWithoutPictureInputRaw


{-| Encode a ProjectsUpdateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectsUpdateManyWithoutPictureInput : ProjectsUpdateManyWithoutPictureInput -> Value
encodeProjectsUpdateManyWithoutPictureInput (ProjectsUpdateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectsCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "disconnect", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeProjectsWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeProjectsUpdateWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeProjectsUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeProjectsScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeProjectsUpsertWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildProjectsUpdateWithWhereUniqueWithoutImagesInput : ProjectsUpdateWithWhereUniqueWithoutImagesInputRequiredFields -> ProjectsUpdateWithWhereUniqueWithoutImagesInput
buildProjectsUpdateWithWhereUniqueWithoutImagesInput required =
    ProjectsUpdateWithWhereUniqueWithoutImagesInput { where_ = required.where_, data = required.data }


type alias ProjectsUpdateWithWhereUniqueWithoutImagesInputRequiredFields =
    { where_ : ProjectsWhereUniqueInput
    , data : ProjectsUpdateWithoutImagesDataInput
    }


{-| Type alias for the `ProjectsUpdateWithWhereUniqueWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectsUpdateWithWhereUniqueWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateWithWhereUniqueWithoutImagesInputRaw =
    { where_ : ProjectsWhereUniqueInput
    , data : ProjectsUpdateWithoutImagesDataInput
    }


{-| Type for the ProjectsUpdateWithWhereUniqueWithoutImagesInput input object.
-}
type ProjectsUpdateWithWhereUniqueWithoutImagesInput
    = ProjectsUpdateWithWhereUniqueWithoutImagesInput ProjectsUpdateWithWhereUniqueWithoutImagesInputRaw


{-| Encode a ProjectsUpdateWithWhereUniqueWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectsUpdateWithWhereUniqueWithoutImagesInput : ProjectsUpdateWithWhereUniqueWithoutImagesInput -> Value
encodeProjectsUpdateWithWhereUniqueWithoutImagesInput (ProjectsUpdateWithWhereUniqueWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectsWhereUniqueInput input.where_ |> Just ), ( "data", encodeProjectsUpdateWithoutImagesDataInput input.data |> Just ) ]


buildProjectsUpdateWithWhereUniqueWithoutPictureInput : ProjectsUpdateWithWhereUniqueWithoutPictureInputRequiredFields -> ProjectsUpdateWithWhereUniqueWithoutPictureInput
buildProjectsUpdateWithWhereUniqueWithoutPictureInput required =
    ProjectsUpdateWithWhereUniqueWithoutPictureInput { where_ = required.where_, data = required.data }


type alias ProjectsUpdateWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : ProjectsWhereUniqueInput
    , data : ProjectsUpdateWithoutPictureDataInput
    }


{-| Type alias for the `ProjectsUpdateWithWhereUniqueWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectsUpdateWithWhereUniqueWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateWithWhereUniqueWithoutPictureInputRaw =
    { where_ : ProjectsWhereUniqueInput
    , data : ProjectsUpdateWithoutPictureDataInput
    }


{-| Type for the ProjectsUpdateWithWhereUniqueWithoutPictureInput input object.
-}
type ProjectsUpdateWithWhereUniqueWithoutPictureInput
    = ProjectsUpdateWithWhereUniqueWithoutPictureInput ProjectsUpdateWithWhereUniqueWithoutPictureInputRaw


{-| Encode a ProjectsUpdateWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectsUpdateWithWhereUniqueWithoutPictureInput : ProjectsUpdateWithWhereUniqueWithoutPictureInput -> Value
encodeProjectsUpdateWithWhereUniqueWithoutPictureInput (ProjectsUpdateWithWhereUniqueWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectsWhereUniqueInput input.where_ |> Just ), ( "data", encodeProjectsUpdateWithoutPictureDataInput input.data |> Just ) ]


buildProjectsUpdateWithoutImagesDataInput : (ProjectsUpdateWithoutImagesDataInputOptionalFields -> ProjectsUpdateWithoutImagesDataInputOptionalFields) -> ProjectsUpdateWithoutImagesDataInput
buildProjectsUpdateWithoutImagesDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, picture = Absent }
    in
    ProjectsUpdateWithoutImagesDataInput { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, picture = optionals.picture }


type alias ProjectsUpdateWithoutImagesDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectsInput
    }


{-| Type alias for the `ProjectsUpdateWithoutImagesDataInput` attributes. Note that this type
needs to use the `ProjectsUpdateWithoutImagesDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateWithoutImagesDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectsInput
    }


{-| Type for the ProjectsUpdateWithoutImagesDataInput input object.
-}
type ProjectsUpdateWithoutImagesDataInput
    = ProjectsUpdateWithoutImagesDataInput ProjectsUpdateWithoutImagesDataInputRaw


{-| Encode a ProjectsUpdateWithoutImagesDataInput into a value that can be used as an argument.
-}
encodeProjectsUpdateWithoutImagesDataInput : ProjectsUpdateWithoutImagesDataInput -> Value
encodeProjectsUpdateWithoutImagesDataInput (ProjectsUpdateWithoutImagesDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsUpdatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetUpdateOneWithoutPictureProjectsInput |> Encode.optional input.picture ) ]


buildProjectsUpdateWithoutPictureDataInput : (ProjectsUpdateWithoutPictureDataInputOptionalFields -> ProjectsUpdateWithoutPictureDataInputOptionalFields) -> ProjectsUpdateWithoutPictureDataInput
buildProjectsUpdateWithoutPictureDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent }
    in
    ProjectsUpdateWithoutPictureDataInput { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images }


type alias ProjectsUpdateWithoutPictureDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectsInput
    }


{-| Type alias for the `ProjectsUpdateWithoutPictureDataInput` attributes. Note that this type
needs to use the `ProjectsUpdateWithoutPictureDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpdateWithoutPictureDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectsUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectsInput
    }


{-| Type for the ProjectsUpdateWithoutPictureDataInput input object.
-}
type ProjectsUpdateWithoutPictureDataInput
    = ProjectsUpdateWithoutPictureDataInput ProjectsUpdateWithoutPictureDataInputRaw


{-| Encode a ProjectsUpdateWithoutPictureDataInput into a value that can be used as an argument.
-}
encodeProjectsUpdateWithoutPictureDataInput : ProjectsUpdateWithoutPictureDataInput -> Value
encodeProjectsUpdateWithoutPictureDataInput (ProjectsUpdateWithoutPictureDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectsUpdatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetUpdateManyWithoutImagesProjectsInput |> Encode.optional input.images ) ]


buildProjectsUpdatetagsInput : (ProjectsUpdatetagsInputOptionalFields -> ProjectsUpdatetagsInputOptionalFields) -> ProjectsUpdatetagsInput
buildProjectsUpdatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias ProjectsUpdatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the ProjectsUpdatetagsInput input object.
-}
type alias ProjectsUpdatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a ProjectsUpdatetagsInput into a value that can be used as an argument.
-}
encodeProjectsUpdatetagsInput : ProjectsUpdatetagsInput -> Value
encodeProjectsUpdatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildProjectsUpsertWithWhereUniqueWithoutImagesInput : ProjectsUpsertWithWhereUniqueWithoutImagesInputRequiredFields -> ProjectsUpsertWithWhereUniqueWithoutImagesInput
buildProjectsUpsertWithWhereUniqueWithoutImagesInput required =
    ProjectsUpsertWithWhereUniqueWithoutImagesInput { where_ = required.where_, update = required.update, create = required.create }


type alias ProjectsUpsertWithWhereUniqueWithoutImagesInputRequiredFields =
    { where_ : ProjectsWhereUniqueInput
    , update : ProjectsUpdateWithoutImagesDataInput
    , create : ProjectsCreateWithoutImagesInput
    }


{-| Type alias for the `ProjectsUpsertWithWhereUniqueWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectsUpsertWithWhereUniqueWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpsertWithWhereUniqueWithoutImagesInputRaw =
    { where_ : ProjectsWhereUniqueInput
    , update : ProjectsUpdateWithoutImagesDataInput
    , create : ProjectsCreateWithoutImagesInput
    }


{-| Type for the ProjectsUpsertWithWhereUniqueWithoutImagesInput input object.
-}
type ProjectsUpsertWithWhereUniqueWithoutImagesInput
    = ProjectsUpsertWithWhereUniqueWithoutImagesInput ProjectsUpsertWithWhereUniqueWithoutImagesInputRaw


{-| Encode a ProjectsUpsertWithWhereUniqueWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectsUpsertWithWhereUniqueWithoutImagesInput : ProjectsUpsertWithWhereUniqueWithoutImagesInput -> Value
encodeProjectsUpsertWithWhereUniqueWithoutImagesInput (ProjectsUpsertWithWhereUniqueWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectsWhereUniqueInput input.where_ |> Just ), ( "update", encodeProjectsUpdateWithoutImagesDataInput input.update |> Just ), ( "create", encodeProjectsCreateWithoutImagesInput input.create |> Just ) ]


buildProjectsUpsertWithWhereUniqueWithoutPictureInput : ProjectsUpsertWithWhereUniqueWithoutPictureInputRequiredFields -> ProjectsUpsertWithWhereUniqueWithoutPictureInput
buildProjectsUpsertWithWhereUniqueWithoutPictureInput required =
    ProjectsUpsertWithWhereUniqueWithoutPictureInput { where_ = required.where_, update = required.update, create = required.create }


type alias ProjectsUpsertWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : ProjectsWhereUniqueInput
    , update : ProjectsUpdateWithoutPictureDataInput
    , create : ProjectsCreateWithoutPictureInput
    }


{-| Type alias for the `ProjectsUpsertWithWhereUniqueWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectsUpsertWithWhereUniqueWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsUpsertWithWhereUniqueWithoutPictureInputRaw =
    { where_ : ProjectsWhereUniqueInput
    , update : ProjectsUpdateWithoutPictureDataInput
    , create : ProjectsCreateWithoutPictureInput
    }


{-| Type for the ProjectsUpsertWithWhereUniqueWithoutPictureInput input object.
-}
type ProjectsUpsertWithWhereUniqueWithoutPictureInput
    = ProjectsUpsertWithWhereUniqueWithoutPictureInput ProjectsUpsertWithWhereUniqueWithoutPictureInputRaw


{-| Encode a ProjectsUpsertWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectsUpsertWithWhereUniqueWithoutPictureInput : ProjectsUpsertWithWhereUniqueWithoutPictureInput -> Value
encodeProjectsUpsertWithWhereUniqueWithoutPictureInput (ProjectsUpsertWithWhereUniqueWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectsWhereUniqueInput input.where_ |> Just ), ( "update", encodeProjectsUpdateWithoutPictureDataInput input.update |> Just ), ( "create", encodeProjectsCreateWithoutPictureInput input.create |> Just ) ]


buildProjectsWhereInput : (ProjectsWhereInputOptionalFields -> ProjectsWhereInputOptionalFields) -> ProjectsWhereInput
buildProjectsWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, description = Absent, description_not = Absent, description_in = Absent, description_not_in = Absent, description_lt = Absent, description_lte = Absent, description_gt = Absent, description_gte = Absent, description_contains = Absent, description_not_contains = Absent, description_starts_with = Absent, description_not_starts_with = Absent, description_ends_with = Absent, description_not_ends_with = Absent, myWork = Absent, myWork_not = Absent, myWork_in = Absent, myWork_not_in = Absent, myWork_lt = Absent, myWork_lte = Absent, myWork_gt = Absent, myWork_gte = Absent, myWork_contains = Absent, myWork_not_contains = Absent, myWork_starts_with = Absent, myWork_not_starts_with = Absent, myWork_ends_with = Absent, myWork_not_ends_with = Absent, link = Absent, link_not = Absent, link_in = Absent, link_not_in = Absent, link_lt = Absent, link_lte = Absent, link_gt = Absent, link_gte = Absent, link_contains = Absent, link_not_contains = Absent, link_starts_with = Absent, link_not_starts_with = Absent, link_ends_with = Absent, link_not_ends_with = Absent, images_every = Absent, images_some = Absent, images_none = Absent, picture = Absent }
    in
    ProjectsWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, description = optionals.description, description_not = optionals.description_not, description_in = optionals.description_in, description_not_in = optionals.description_not_in, description_lt = optionals.description_lt, description_lte = optionals.description_lte, description_gt = optionals.description_gt, description_gte = optionals.description_gte, description_contains = optionals.description_contains, description_not_contains = optionals.description_not_contains, description_starts_with = optionals.description_starts_with, description_not_starts_with = optionals.description_not_starts_with, description_ends_with = optionals.description_ends_with, description_not_ends_with = optionals.description_not_ends_with, myWork = optionals.myWork, myWork_not = optionals.myWork_not, myWork_in = optionals.myWork_in, myWork_not_in = optionals.myWork_not_in, myWork_lt = optionals.myWork_lt, myWork_lte = optionals.myWork_lte, myWork_gt = optionals.myWork_gt, myWork_gte = optionals.myWork_gte, myWork_contains = optionals.myWork_contains, myWork_not_contains = optionals.myWork_not_contains, myWork_starts_with = optionals.myWork_starts_with, myWork_not_starts_with = optionals.myWork_not_starts_with, myWork_ends_with = optionals.myWork_ends_with, myWork_not_ends_with = optionals.myWork_not_ends_with, link = optionals.link, link_not = optionals.link_not, link_in = optionals.link_in, link_not_in = optionals.link_not_in, link_lt = optionals.link_lt, link_lte = optionals.link_lte, link_gt = optionals.link_gt, link_gte = optionals.link_gte, link_contains = optionals.link_contains, link_not_contains = optionals.link_not_contains, link_starts_with = optionals.link_starts_with, link_not_starts_with = optionals.link_not_starts_with, link_ends_with = optionals.link_ends_with, link_not_ends_with = optionals.link_not_ends_with, images_every = optionals.images_every, images_some = optionals.images_some, images_none = optionals.images_none, picture = optionals.picture }


type alias ProjectsWhereInputOptionalFields =
    { and : OptionalArgument (List ProjectsWhereInput)
    , or : OptionalArgument (List ProjectsWhereInput)
    , not : OptionalArgument (List ProjectsWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    , images_every : OptionalArgument AssetWhereInput
    , images_some : OptionalArgument AssetWhereInput
    , images_none : OptionalArgument AssetWhereInput
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `ProjectsWhereInput` attributes. Note that this type
needs to use the `ProjectsWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectsWhereInputRaw =
    { and : OptionalArgument (List ProjectsWhereInput)
    , or : OptionalArgument (List ProjectsWhereInput)
    , not : OptionalArgument (List ProjectsWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    , images_every : OptionalArgument AssetWhereInput
    , images_some : OptionalArgument AssetWhereInput
    , images_none : OptionalArgument AssetWhereInput
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type for the ProjectsWhereInput input object.
-}
type ProjectsWhereInput
    = ProjectsWhereInput ProjectsWhereInputRaw


{-| Encode a ProjectsWhereInput into a value that can be used as an argument.
-}
encodeProjectsWhereInput : ProjectsWhereInput -> Value
encodeProjectsWhereInput (ProjectsWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeProjectsWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeProjectsWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeProjectsWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "myWork_not", Encode.string |> Encode.optional input.myWork_not ), ( "myWork_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_in ), ( "myWork_not_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_not_in ), ( "myWork_lt", Encode.string |> Encode.optional input.myWork_lt ), ( "myWork_lte", Encode.string |> Encode.optional input.myWork_lte ), ( "myWork_gt", Encode.string |> Encode.optional input.myWork_gt ), ( "myWork_gte", Encode.string |> Encode.optional input.myWork_gte ), ( "myWork_contains", Encode.string |> Encode.optional input.myWork_contains ), ( "myWork_not_contains", Encode.string |> Encode.optional input.myWork_not_contains ), ( "myWork_starts_with", Encode.string |> Encode.optional input.myWork_starts_with ), ( "myWork_not_starts_with", Encode.string |> Encode.optional input.myWork_not_starts_with ), ( "myWork_ends_with", Encode.string |> Encode.optional input.myWork_ends_with ), ( "myWork_not_ends_with", Encode.string |> Encode.optional input.myWork_not_ends_with ), ( "link", Encode.string |> Encode.optional input.link ), ( "link_not", Encode.string |> Encode.optional input.link_not ), ( "link_in", (Encode.string |> Encode.list) |> Encode.optional input.link_in ), ( "link_not_in", (Encode.string |> Encode.list) |> Encode.optional input.link_not_in ), ( "link_lt", Encode.string |> Encode.optional input.link_lt ), ( "link_lte", Encode.string |> Encode.optional input.link_lte ), ( "link_gt", Encode.string |> Encode.optional input.link_gt ), ( "link_gte", Encode.string |> Encode.optional input.link_gte ), ( "link_contains", Encode.string |> Encode.optional input.link_contains ), ( "link_not_contains", Encode.string |> Encode.optional input.link_not_contains ), ( "link_starts_with", Encode.string |> Encode.optional input.link_starts_with ), ( "link_not_starts_with", Encode.string |> Encode.optional input.link_not_starts_with ), ( "link_ends_with", Encode.string |> Encode.optional input.link_ends_with ), ( "link_not_ends_with", Encode.string |> Encode.optional input.link_not_ends_with ), ( "images_every", encodeAssetWhereInput |> Encode.optional input.images_every ), ( "images_some", encodeAssetWhereInput |> Encode.optional input.images_some ), ( "images_none", encodeAssetWhereInput |> Encode.optional input.images_none ), ( "picture", encodeAssetWhereInput |> Encode.optional input.picture ) ]


buildProjectsWhereUniqueInput : (ProjectsWhereUniqueInputOptionalFields -> ProjectsWhereUniqueInputOptionalFields) -> ProjectsWhereUniqueInput
buildProjectsWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ProjectsWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the ProjectsWhereUniqueInput input object.
-}
type alias ProjectsWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a ProjectsWhereUniqueInput into a value that can be used as an argument.
-}
encodeProjectsWhereUniqueInput : ProjectsWhereUniqueInput -> Value
encodeProjectsWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]
