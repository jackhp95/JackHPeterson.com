-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module DB.InputObject exposing (AssetCreateInput(..), AssetCreateInputOptionalFields, AssetCreateInputRaw, AssetCreateInputRequiredFields, AssetCreateManyWithoutImagesProjectInput(..), AssetCreateManyWithoutImagesProjectInputOptionalFields, AssetCreateManyWithoutImagesProjectInputRaw, AssetCreateOneWithoutPictureBlogPostInput(..), AssetCreateOneWithoutPictureBlogPostInputOptionalFields, AssetCreateOneWithoutPictureBlogPostInputRaw, AssetCreateOneWithoutPictureProjectInput(..), AssetCreateOneWithoutPictureProjectInputOptionalFields, AssetCreateOneWithoutPictureProjectInputRaw, AssetCreateWithoutImagesProjectInput(..), AssetCreateWithoutImagesProjectInputOptionalFields, AssetCreateWithoutImagesProjectInputRaw, AssetCreateWithoutImagesProjectInputRequiredFields, AssetCreateWithoutPictureBlogPostInput(..), AssetCreateWithoutPictureBlogPostInputOptionalFields, AssetCreateWithoutPictureBlogPostInputRaw, AssetCreateWithoutPictureBlogPostInputRequiredFields, AssetCreateWithoutPictureProjectInput(..), AssetCreateWithoutPictureProjectInputOptionalFields, AssetCreateWithoutPictureProjectInputRaw, AssetCreateWithoutPictureProjectInputRequiredFields, AssetScalarWhereInput(..), AssetScalarWhereInputOptionalFields, AssetScalarWhereInputRaw, AssetSubscriptionWhereInput(..), AssetSubscriptionWhereInputOptionalFields, AssetSubscriptionWhereInputRaw, AssetTransformationInput, AssetTransformationInputOptionalFields, AssetUpdateInput(..), AssetUpdateInputOptionalFields, AssetUpdateInputRaw, AssetUpdateManyDataInput, AssetUpdateManyDataInputOptionalFields, AssetUpdateManyMutationInput, AssetUpdateManyMutationInputOptionalFields, AssetUpdateManyWithWhereNestedInput(..), AssetUpdateManyWithWhereNestedInputRaw, AssetUpdateManyWithWhereNestedInputRequiredFields, AssetUpdateManyWithoutImagesProjectInput(..), AssetUpdateManyWithoutImagesProjectInputOptionalFields, AssetUpdateManyWithoutImagesProjectInputRaw, AssetUpdateOneWithoutPictureBlogPostInput(..), AssetUpdateOneWithoutPictureBlogPostInputOptionalFields, AssetUpdateOneWithoutPictureBlogPostInputRaw, AssetUpdateOneWithoutPictureProjectInput(..), AssetUpdateOneWithoutPictureProjectInputOptionalFields, AssetUpdateOneWithoutPictureProjectInputRaw, AssetUpdateWithWhereUniqueWithoutImagesProjectInput(..), AssetUpdateWithWhereUniqueWithoutImagesProjectInputRaw, AssetUpdateWithWhereUniqueWithoutImagesProjectInputRequiredFields, AssetUpdateWithoutImagesProjectDataInput(..), AssetUpdateWithoutImagesProjectDataInputOptionalFields, AssetUpdateWithoutImagesProjectDataInputRaw, AssetUpdateWithoutPictureBlogPostDataInput(..), AssetUpdateWithoutPictureBlogPostDataInputOptionalFields, AssetUpdateWithoutPictureBlogPostDataInputRaw, AssetUpdateWithoutPictureProjectDataInput(..), AssetUpdateWithoutPictureProjectDataInputOptionalFields, AssetUpdateWithoutPictureProjectDataInputRaw, AssetUpsertWithWhereUniqueWithoutImagesProjectInput(..), AssetUpsertWithWhereUniqueWithoutImagesProjectInputRaw, AssetUpsertWithWhereUniqueWithoutImagesProjectInputRequiredFields, AssetUpsertWithoutPictureBlogPostInput(..), AssetUpsertWithoutPictureBlogPostInputRaw, AssetUpsertWithoutPictureBlogPostInputRequiredFields, AssetUpsertWithoutPictureProjectInput(..), AssetUpsertWithoutPictureProjectInputRaw, AssetUpsertWithoutPictureProjectInputRequiredFields, AssetWhereInput(..), AssetWhereInputOptionalFields, AssetWhereInputRaw, AssetWhereUniqueInput, AssetWhereUniqueInputOptionalFields, BlogPostCreateInput(..), BlogPostCreateInputOptionalFields, BlogPostCreateInputRaw, BlogPostCreateInputRequiredFields, BlogPostCreateManyWithoutPictureInput(..), BlogPostCreateManyWithoutPictureInputOptionalFields, BlogPostCreateManyWithoutPictureInputRaw, BlogPostCreateWithoutPictureInput, BlogPostCreateWithoutPictureInputOptionalFields, BlogPostCreateWithoutPictureInputRequiredFields, BlogPostCreatetagsInput, BlogPostCreatetagsInputOptionalFields, BlogPostScalarWhereInput(..), BlogPostScalarWhereInputOptionalFields, BlogPostScalarWhereInputRaw, BlogPostSubscriptionWhereInput(..), BlogPostSubscriptionWhereInputOptionalFields, BlogPostSubscriptionWhereInputRaw, BlogPostUpdateInput(..), BlogPostUpdateInputOptionalFields, BlogPostUpdateInputRaw, BlogPostUpdateManyDataInput, BlogPostUpdateManyDataInputOptionalFields, BlogPostUpdateManyMutationInput, BlogPostUpdateManyMutationInputOptionalFields, BlogPostUpdateManyWithWhereNestedInput(..), BlogPostUpdateManyWithWhereNestedInputRaw, BlogPostUpdateManyWithWhereNestedInputRequiredFields, BlogPostUpdateManyWithoutPictureInput(..), BlogPostUpdateManyWithoutPictureInputOptionalFields, BlogPostUpdateManyWithoutPictureInputRaw, BlogPostUpdateWithWhereUniqueWithoutPictureInput, BlogPostUpdateWithWhereUniqueWithoutPictureInputRequiredFields, BlogPostUpdateWithoutPictureDataInput, BlogPostUpdateWithoutPictureDataInputOptionalFields, BlogPostUpdatetagsInput, BlogPostUpdatetagsInputOptionalFields, BlogPostUpsertWithWhereUniqueWithoutPictureInput, BlogPostUpsertWithWhereUniqueWithoutPictureInputRequiredFields, BlogPostWhereInput(..), BlogPostWhereInputOptionalFields, BlogPostWhereInputRaw, BlogPostWhereUniqueInput, BlogPostWhereUniqueInputOptionalFields, ColorSubscriptionWhereInput(..), ColorSubscriptionWhereInputOptionalFields, ColorSubscriptionWhereInputRaw, ColorWhereInput(..), ColorWhereInputOptionalFields, ColorWhereInputRaw, ColorWhereUniqueInput, ColorWhereUniqueInputOptionalFields, ContactCreateInput, ContactCreateInputOptionalFields, ContactCreateInputRequiredFields, ContactSubscriptionWhereInput(..), ContactSubscriptionWhereInputOptionalFields, ContactSubscriptionWhereInputRaw, ContactUpdateInput, ContactUpdateInputOptionalFields, ContactUpdateManyMutationInput, ContactUpdateManyMutationInputOptionalFields, ContactWhereInput(..), ContactWhereInputOptionalFields, ContactWhereInputRaw, ContactWhereUniqueInput, ContactWhereUniqueInputOptionalFields, DocumentOutputInput, DocumentOutputInputOptionalFields, DocumentTransformationInput, DocumentTransformationInputOptionalFields, ImageResizeInput, ImageResizeInputOptionalFields, ImageTransformationInput, ImageTransformationInputOptionalFields, LocationSubscriptionWhereInput(..), LocationSubscriptionWhereInputOptionalFields, LocationSubscriptionWhereInputRaw, LocationWhereInput(..), LocationWhereInputOptionalFields, LocationWhereInputRaw, LocationWhereUniqueInput, LocationWhereUniqueInputOptionalFields, ProjectCreateInput(..), ProjectCreateInputOptionalFields, ProjectCreateInputRaw, ProjectCreateInputRequiredFields, ProjectCreateManyWithoutImagesInput(..), ProjectCreateManyWithoutImagesInputOptionalFields, ProjectCreateManyWithoutImagesInputRaw, ProjectCreateManyWithoutPictureInput(..), ProjectCreateManyWithoutPictureInputOptionalFields, ProjectCreateManyWithoutPictureInputRaw, ProjectCreateWithoutImagesInput(..), ProjectCreateWithoutImagesInputOptionalFields, ProjectCreateWithoutImagesInputRaw, ProjectCreateWithoutImagesInputRequiredFields, ProjectCreateWithoutPictureInput(..), ProjectCreateWithoutPictureInputOptionalFields, ProjectCreateWithoutPictureInputRaw, ProjectCreateWithoutPictureInputRequiredFields, ProjectCreatetagsInput, ProjectCreatetagsInputOptionalFields, ProjectScalarWhereInput(..), ProjectScalarWhereInputOptionalFields, ProjectScalarWhereInputRaw, ProjectSubscriptionWhereInput(..), ProjectSubscriptionWhereInputOptionalFields, ProjectSubscriptionWhereInputRaw, ProjectUpdateInput(..), ProjectUpdateInputOptionalFields, ProjectUpdateInputRaw, ProjectUpdateManyDataInput, ProjectUpdateManyDataInputOptionalFields, ProjectUpdateManyMutationInput, ProjectUpdateManyMutationInputOptionalFields, ProjectUpdateManyWithWhereNestedInput(..), ProjectUpdateManyWithWhereNestedInputRaw, ProjectUpdateManyWithWhereNestedInputRequiredFields, ProjectUpdateManyWithoutImagesInput(..), ProjectUpdateManyWithoutImagesInputOptionalFields, ProjectUpdateManyWithoutImagesInputRaw, ProjectUpdateManyWithoutPictureInput(..), ProjectUpdateManyWithoutPictureInputOptionalFields, ProjectUpdateManyWithoutPictureInputRaw, ProjectUpdateWithWhereUniqueWithoutImagesInput(..), ProjectUpdateWithWhereUniqueWithoutImagesInputRaw, ProjectUpdateWithWhereUniqueWithoutImagesInputRequiredFields, ProjectUpdateWithWhereUniqueWithoutPictureInput(..), ProjectUpdateWithWhereUniqueWithoutPictureInputRaw, ProjectUpdateWithWhereUniqueWithoutPictureInputRequiredFields, ProjectUpdateWithoutImagesDataInput(..), ProjectUpdateWithoutImagesDataInputOptionalFields, ProjectUpdateWithoutImagesDataInputRaw, ProjectUpdateWithoutPictureDataInput(..), ProjectUpdateWithoutPictureDataInputOptionalFields, ProjectUpdateWithoutPictureDataInputRaw, ProjectUpdatetagsInput, ProjectUpdatetagsInputOptionalFields, ProjectUpsertWithWhereUniqueWithoutImagesInput(..), ProjectUpsertWithWhereUniqueWithoutImagesInputRaw, ProjectUpsertWithWhereUniqueWithoutImagesInputRequiredFields, ProjectUpsertWithWhereUniqueWithoutPictureInput(..), ProjectUpsertWithWhereUniqueWithoutPictureInputRaw, ProjectUpsertWithWhereUniqueWithoutPictureInputRequiredFields, ProjectWhereInput(..), ProjectWhereInputOptionalFields, ProjectWhereInputRaw, ProjectWhereUniqueInput, ProjectWhereUniqueInputOptionalFields, buildAssetCreateInput, buildAssetCreateManyWithoutImagesProjectInput, buildAssetCreateOneWithoutPictureBlogPostInput, buildAssetCreateOneWithoutPictureProjectInput, buildAssetCreateWithoutImagesProjectInput, buildAssetCreateWithoutPictureBlogPostInput, buildAssetCreateWithoutPictureProjectInput, buildAssetScalarWhereInput, buildAssetSubscriptionWhereInput, buildAssetTransformationInput, buildAssetUpdateInput, buildAssetUpdateManyDataInput, buildAssetUpdateManyMutationInput, buildAssetUpdateManyWithWhereNestedInput, buildAssetUpdateManyWithoutImagesProjectInput, buildAssetUpdateOneWithoutPictureBlogPostInput, buildAssetUpdateOneWithoutPictureProjectInput, buildAssetUpdateWithWhereUniqueWithoutImagesProjectInput, buildAssetUpdateWithoutImagesProjectDataInput, buildAssetUpdateWithoutPictureBlogPostDataInput, buildAssetUpdateWithoutPictureProjectDataInput, buildAssetUpsertWithWhereUniqueWithoutImagesProjectInput, buildAssetUpsertWithoutPictureBlogPostInput, buildAssetUpsertWithoutPictureProjectInput, buildAssetWhereInput, buildAssetWhereUniqueInput, buildBlogPostCreateInput, buildBlogPostCreateManyWithoutPictureInput, buildBlogPostCreateWithoutPictureInput, buildBlogPostCreatetagsInput, buildBlogPostScalarWhereInput, buildBlogPostSubscriptionWhereInput, buildBlogPostUpdateInput, buildBlogPostUpdateManyDataInput, buildBlogPostUpdateManyMutationInput, buildBlogPostUpdateManyWithWhereNestedInput, buildBlogPostUpdateManyWithoutPictureInput, buildBlogPostUpdateWithWhereUniqueWithoutPictureInput, buildBlogPostUpdateWithoutPictureDataInput, buildBlogPostUpdatetagsInput, buildBlogPostUpsertWithWhereUniqueWithoutPictureInput, buildBlogPostWhereInput, buildBlogPostWhereUniqueInput, buildColorSubscriptionWhereInput, buildColorWhereInput, buildColorWhereUniqueInput, buildContactCreateInput, buildContactSubscriptionWhereInput, buildContactUpdateInput, buildContactUpdateManyMutationInput, buildContactWhereInput, buildContactWhereUniqueInput, buildDocumentOutputInput, buildDocumentTransformationInput, buildImageResizeInput, buildImageTransformationInput, buildLocationSubscriptionWhereInput, buildLocationWhereInput, buildLocationWhereUniqueInput, buildProjectCreateInput, buildProjectCreateManyWithoutImagesInput, buildProjectCreateManyWithoutPictureInput, buildProjectCreateWithoutImagesInput, buildProjectCreateWithoutPictureInput, buildProjectCreatetagsInput, buildProjectScalarWhereInput, buildProjectSubscriptionWhereInput, buildProjectUpdateInput, buildProjectUpdateManyDataInput, buildProjectUpdateManyMutationInput, buildProjectUpdateManyWithWhereNestedInput, buildProjectUpdateManyWithoutImagesInput, buildProjectUpdateManyWithoutPictureInput, buildProjectUpdateWithWhereUniqueWithoutImagesInput, buildProjectUpdateWithWhereUniqueWithoutPictureInput, buildProjectUpdateWithoutImagesDataInput, buildProjectUpdateWithoutPictureDataInput, buildProjectUpdatetagsInput, buildProjectUpsertWithWhereUniqueWithoutImagesInput, buildProjectUpsertWithWhereUniqueWithoutPictureInput, buildProjectWhereInput, buildProjectWhereUniqueInput, encodeAssetCreateInput, encodeAssetCreateManyWithoutImagesProjectInput, encodeAssetCreateOneWithoutPictureBlogPostInput, encodeAssetCreateOneWithoutPictureProjectInput, encodeAssetCreateWithoutImagesProjectInput, encodeAssetCreateWithoutPictureBlogPostInput, encodeAssetCreateWithoutPictureProjectInput, encodeAssetScalarWhereInput, encodeAssetSubscriptionWhereInput, encodeAssetTransformationInput, encodeAssetUpdateInput, encodeAssetUpdateManyDataInput, encodeAssetUpdateManyMutationInput, encodeAssetUpdateManyWithWhereNestedInput, encodeAssetUpdateManyWithoutImagesProjectInput, encodeAssetUpdateOneWithoutPictureBlogPostInput, encodeAssetUpdateOneWithoutPictureProjectInput, encodeAssetUpdateWithWhereUniqueWithoutImagesProjectInput, encodeAssetUpdateWithoutImagesProjectDataInput, encodeAssetUpdateWithoutPictureBlogPostDataInput, encodeAssetUpdateWithoutPictureProjectDataInput, encodeAssetUpsertWithWhereUniqueWithoutImagesProjectInput, encodeAssetUpsertWithoutPictureBlogPostInput, encodeAssetUpsertWithoutPictureProjectInput, encodeAssetWhereInput, encodeAssetWhereUniqueInput, encodeBlogPostCreateInput, encodeBlogPostCreateManyWithoutPictureInput, encodeBlogPostCreateWithoutPictureInput, encodeBlogPostCreatetagsInput, encodeBlogPostScalarWhereInput, encodeBlogPostSubscriptionWhereInput, encodeBlogPostUpdateInput, encodeBlogPostUpdateManyDataInput, encodeBlogPostUpdateManyMutationInput, encodeBlogPostUpdateManyWithWhereNestedInput, encodeBlogPostUpdateManyWithoutPictureInput, encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput, encodeBlogPostUpdateWithoutPictureDataInput, encodeBlogPostUpdatetagsInput, encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput, encodeBlogPostWhereInput, encodeBlogPostWhereUniqueInput, encodeColorSubscriptionWhereInput, encodeColorWhereInput, encodeColorWhereUniqueInput, encodeContactCreateInput, encodeContactSubscriptionWhereInput, encodeContactUpdateInput, encodeContactUpdateManyMutationInput, encodeContactWhereInput, encodeContactWhereUniqueInput, encodeDocumentOutputInput, encodeDocumentTransformationInput, encodeImageResizeInput, encodeImageTransformationInput, encodeLocationSubscriptionWhereInput, encodeLocationWhereInput, encodeLocationWhereUniqueInput, encodeProjectCreateInput, encodeProjectCreateManyWithoutImagesInput, encodeProjectCreateManyWithoutPictureInput, encodeProjectCreateWithoutImagesInput, encodeProjectCreateWithoutPictureInput, encodeProjectCreatetagsInput, encodeProjectScalarWhereInput, encodeProjectSubscriptionWhereInput, encodeProjectUpdateInput, encodeProjectUpdateManyDataInput, encodeProjectUpdateManyMutationInput, encodeProjectUpdateManyWithWhereNestedInput, encodeProjectUpdateManyWithoutImagesInput, encodeProjectUpdateManyWithoutPictureInput, encodeProjectUpdateWithWhereUniqueWithoutImagesInput, encodeProjectUpdateWithWhereUniqueWithoutPictureInput, encodeProjectUpdateWithoutImagesDataInput, encodeProjectUpdateWithoutPictureDataInput, encodeProjectUpdatetagsInput, encodeProjectUpsertWithWhereUniqueWithoutImagesInput, encodeProjectUpsertWithWhereUniqueWithoutPictureInput, encodeProjectWhereInput, encodeProjectWhereUniqueInput)

import DB.Enum.DocumentFileTypes
import DB.Enum.ImageFit
import DB.Enum.MutationType
import DB.Enum.Status
import DB.Interface
import DB.Object
import DB.Scalar
import DB.ScalarDecoders
import DB.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAssetCreateInput : AssetCreateInputRequiredFields -> (AssetCreateInputOptionalFields -> AssetCreateInputOptionalFields) -> AssetCreateInput
buildAssetCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProject = Absent, pictureProject = Absent }
    in
    AssetCreateInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProject = optionals.imagesProject, pictureProject = optionals.pictureProject }


type alias AssetCreateInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectCreateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectCreateManyWithoutPictureInput
    }


{-| Type alias for the `AssetCreateInput` attributes. Note that this type
needs to use the `AssetCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectCreateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectCreateManyWithoutPictureInput
    }


{-| Type for the AssetCreateInput input object.
-}
type AssetCreateInput
    = AssetCreateInput AssetCreateInputRaw


{-| Encode a AssetCreateInput into a value that can be used as an argument.
-}
encodeAssetCreateInput : AssetCreateInput -> Value
encodeAssetCreateInput (AssetCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostCreateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProject", encodeProjectCreateManyWithoutImagesInput |> Encode.optional input.imagesProject ), ( "pictureProject", encodeProjectCreateManyWithoutPictureInput |> Encode.optional input.pictureProject ) ]


buildAssetCreateManyWithoutImagesProjectInput : (AssetCreateManyWithoutImagesProjectInputOptionalFields -> AssetCreateManyWithoutImagesProjectInputOptionalFields) -> AssetCreateManyWithoutImagesProjectInput
buildAssetCreateManyWithoutImagesProjectInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    AssetCreateManyWithoutImagesProjectInput { create = optionals.create, connect = optionals.connect }


type alias AssetCreateManyWithoutImagesProjectInputOptionalFields =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    }


{-| Type alias for the `AssetCreateManyWithoutImagesProjectInput` attributes. Note that this type
needs to use the `AssetCreateManyWithoutImagesProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateManyWithoutImagesProjectInputRaw =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    }


{-| Type for the AssetCreateManyWithoutImagesProjectInput input object.
-}
type AssetCreateManyWithoutImagesProjectInput
    = AssetCreateManyWithoutImagesProjectInput AssetCreateManyWithoutImagesProjectInputRaw


{-| Encode a AssetCreateManyWithoutImagesProjectInput into a value that can be used as an argument.
-}
encodeAssetCreateManyWithoutImagesProjectInput : AssetCreateManyWithoutImagesProjectInput -> Value
encodeAssetCreateManyWithoutImagesProjectInput (AssetCreateManyWithoutImagesProjectInput input) =
    Encode.maybeObject
        [ ( "create", (encodeAssetCreateWithoutImagesProjectInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildAssetCreateOneWithoutPictureBlogPostInput : (AssetCreateOneWithoutPictureBlogPostInputOptionalFields -> AssetCreateOneWithoutPictureBlogPostInputOptionalFields) -> AssetCreateOneWithoutPictureBlogPostInput
buildAssetCreateOneWithoutPictureBlogPostInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    AssetCreateOneWithoutPictureBlogPostInput { create = optionals.create, connect = optionals.connect }


type alias AssetCreateOneWithoutPictureBlogPostInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type alias for the `AssetCreateOneWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetCreateOneWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateOneWithoutPictureBlogPostInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type for the AssetCreateOneWithoutPictureBlogPostInput input object.
-}
type AssetCreateOneWithoutPictureBlogPostInput
    = AssetCreateOneWithoutPictureBlogPostInput AssetCreateOneWithoutPictureBlogPostInputRaw


{-| Encode a AssetCreateOneWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetCreateOneWithoutPictureBlogPostInput : AssetCreateOneWithoutPictureBlogPostInput -> Value
encodeAssetCreateOneWithoutPictureBlogPostInput (AssetCreateOneWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureBlogPostInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ) ]


buildAssetCreateOneWithoutPictureProjectInput : (AssetCreateOneWithoutPictureProjectInputOptionalFields -> AssetCreateOneWithoutPictureProjectInputOptionalFields) -> AssetCreateOneWithoutPictureProjectInput
buildAssetCreateOneWithoutPictureProjectInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    AssetCreateOneWithoutPictureProjectInput { create = optionals.create, connect = optionals.connect }


type alias AssetCreateOneWithoutPictureProjectInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureProjectInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type alias for the `AssetCreateOneWithoutPictureProjectInput` attributes. Note that this type
needs to use the `AssetCreateOneWithoutPictureProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateOneWithoutPictureProjectInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureProjectInput
    , connect : OptionalArgument AssetWhereUniqueInput
    }


{-| Type for the AssetCreateOneWithoutPictureProjectInput input object.
-}
type AssetCreateOneWithoutPictureProjectInput
    = AssetCreateOneWithoutPictureProjectInput AssetCreateOneWithoutPictureProjectInputRaw


{-| Encode a AssetCreateOneWithoutPictureProjectInput into a value that can be used as an argument.
-}
encodeAssetCreateOneWithoutPictureProjectInput : AssetCreateOneWithoutPictureProjectInput -> Value
encodeAssetCreateOneWithoutPictureProjectInput (AssetCreateOneWithoutPictureProjectInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureProjectInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ) ]


buildAssetCreateWithoutImagesProjectInput : AssetCreateWithoutImagesProjectInputRequiredFields -> (AssetCreateWithoutImagesProjectInputOptionalFields -> AssetCreateWithoutImagesProjectInputOptionalFields) -> AssetCreateWithoutImagesProjectInput
buildAssetCreateWithoutImagesProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, pictureProject = Absent }
    in
    AssetCreateWithoutImagesProjectInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, pictureProject = optionals.pictureProject }


type alias AssetCreateWithoutImagesProjectInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateWithoutImagesProjectInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , pictureProject : OptionalArgument ProjectCreateManyWithoutPictureInput
    }


{-| Type alias for the `AssetCreateWithoutImagesProjectInput` attributes. Note that this type
needs to use the `AssetCreateWithoutImagesProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateWithoutImagesProjectInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , pictureProject : OptionalArgument ProjectCreateManyWithoutPictureInput
    }


{-| Type for the AssetCreateWithoutImagesProjectInput input object.
-}
type AssetCreateWithoutImagesProjectInput
    = AssetCreateWithoutImagesProjectInput AssetCreateWithoutImagesProjectInputRaw


{-| Encode a AssetCreateWithoutImagesProjectInput into a value that can be used as an argument.
-}
encodeAssetCreateWithoutImagesProjectInput : AssetCreateWithoutImagesProjectInput -> Value
encodeAssetCreateWithoutImagesProjectInput (AssetCreateWithoutImagesProjectInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostCreateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "pictureProject", encodeProjectCreateManyWithoutPictureInput |> Encode.optional input.pictureProject ) ]


buildAssetCreateWithoutPictureBlogPostInput : AssetCreateWithoutPictureBlogPostInputRequiredFields -> (AssetCreateWithoutPictureBlogPostInputOptionalFields -> AssetCreateWithoutPictureBlogPostInputOptionalFields) -> AssetCreateWithoutPictureBlogPostInput
buildAssetCreateWithoutPictureBlogPostInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, imagesProject = Absent, pictureProject = Absent }
    in
    AssetCreateWithoutPictureBlogPostInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, imagesProject = optionals.imagesProject, pictureProject = optionals.pictureProject }


type alias AssetCreateWithoutPictureBlogPostInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateWithoutPictureBlogPostInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProject : OptionalArgument ProjectCreateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectCreateManyWithoutPictureInput
    }


{-| Type alias for the `AssetCreateWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetCreateWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateWithoutPictureBlogPostInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProject : OptionalArgument ProjectCreateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectCreateManyWithoutPictureInput
    }


{-| Type for the AssetCreateWithoutPictureBlogPostInput input object.
-}
type AssetCreateWithoutPictureBlogPostInput
    = AssetCreateWithoutPictureBlogPostInput AssetCreateWithoutPictureBlogPostInputRaw


{-| Encode a AssetCreateWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetCreateWithoutPictureBlogPostInput : AssetCreateWithoutPictureBlogPostInput -> Value
encodeAssetCreateWithoutPictureBlogPostInput (AssetCreateWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "imagesProject", encodeProjectCreateManyWithoutImagesInput |> Encode.optional input.imagesProject ), ( "pictureProject", encodeProjectCreateManyWithoutPictureInput |> Encode.optional input.pictureProject ) ]


buildAssetCreateWithoutPictureProjectInput : AssetCreateWithoutPictureProjectInputRequiredFields -> (AssetCreateWithoutPictureProjectInputOptionalFields -> AssetCreateWithoutPictureProjectInputOptionalFields) -> AssetCreateWithoutPictureProjectInput
buildAssetCreateWithoutPictureProjectInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProject = Absent }
    in
    AssetCreateWithoutPictureProjectInput { status = optionals.status, handle = required.handle, fileName = required.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProject = optionals.imagesProject }


type alias AssetCreateWithoutPictureProjectInputRequiredFields =
    { handle : String
    , fileName : String
    }


type alias AssetCreateWithoutPictureProjectInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectCreateManyWithoutImagesInput
    }


{-| Type alias for the `AssetCreateWithoutPictureProjectInput` attributes. Note that this type
needs to use the `AssetCreateWithoutPictureProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetCreateWithoutPictureProjectInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : String
    , fileName : String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostCreateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectCreateManyWithoutImagesInput
    }


{-| Type for the AssetCreateWithoutPictureProjectInput input object.
-}
type AssetCreateWithoutPictureProjectInput
    = AssetCreateWithoutPictureProjectInput AssetCreateWithoutPictureProjectInputRaw


{-| Encode a AssetCreateWithoutPictureProjectInput into a value that can be used as an argument.
-}
encodeAssetCreateWithoutPictureProjectInput : AssetCreateWithoutPictureProjectInput -> Value
encodeAssetCreateWithoutPictureProjectInput (AssetCreateWithoutPictureProjectInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string input.handle |> Just ), ( "fileName", Encode.string input.fileName |> Just ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostCreateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProject", encodeProjectCreateManyWithoutImagesInput |> Encode.optional input.imagesProject ) ]


buildAssetScalarWhereInput : (AssetScalarWhereInputOptionalFields -> AssetScalarWhereInputOptionalFields) -> AssetScalarWhereInput
buildAssetScalarWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, handle = Absent, handle_not = Absent, handle_in = Absent, handle_not_in = Absent, handle_lt = Absent, handle_lte = Absent, handle_gt = Absent, handle_gte = Absent, handle_contains = Absent, handle_not_contains = Absent, handle_starts_with = Absent, handle_not_starts_with = Absent, handle_ends_with = Absent, handle_not_ends_with = Absent, fileName = Absent, fileName_not = Absent, fileName_in = Absent, fileName_not_in = Absent, fileName_lt = Absent, fileName_lte = Absent, fileName_gt = Absent, fileName_gte = Absent, fileName_contains = Absent, fileName_not_contains = Absent, fileName_starts_with = Absent, fileName_not_starts_with = Absent, fileName_ends_with = Absent, fileName_not_ends_with = Absent, height = Absent, height_not = Absent, height_in = Absent, height_not_in = Absent, height_lt = Absent, height_lte = Absent, height_gt = Absent, height_gte = Absent, mimeType = Absent, mimeType_not = Absent, mimeType_in = Absent, mimeType_not_in = Absent, mimeType_lt = Absent, mimeType_lte = Absent, mimeType_gt = Absent, mimeType_gte = Absent, mimeType_contains = Absent, mimeType_not_contains = Absent, mimeType_starts_with = Absent, mimeType_not_starts_with = Absent, mimeType_ends_with = Absent, mimeType_not_ends_with = Absent, size = Absent, size_not = Absent, size_in = Absent, size_not_in = Absent, size_lt = Absent, size_lte = Absent, size_gt = Absent, size_gte = Absent, width = Absent, width_not = Absent, width_in = Absent, width_not_in = Absent, width_lt = Absent, width_lte = Absent, width_gt = Absent, width_gte = Absent }
    in
    AssetScalarWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, handle = optionals.handle, handle_not = optionals.handle_not, handle_in = optionals.handle_in, handle_not_in = optionals.handle_not_in, handle_lt = optionals.handle_lt, handle_lte = optionals.handle_lte, handle_gt = optionals.handle_gt, handle_gte = optionals.handle_gte, handle_contains = optionals.handle_contains, handle_not_contains = optionals.handle_not_contains, handle_starts_with = optionals.handle_starts_with, handle_not_starts_with = optionals.handle_not_starts_with, handle_ends_with = optionals.handle_ends_with, handle_not_ends_with = optionals.handle_not_ends_with, fileName = optionals.fileName, fileName_not = optionals.fileName_not, fileName_in = optionals.fileName_in, fileName_not_in = optionals.fileName_not_in, fileName_lt = optionals.fileName_lt, fileName_lte = optionals.fileName_lte, fileName_gt = optionals.fileName_gt, fileName_gte = optionals.fileName_gte, fileName_contains = optionals.fileName_contains, fileName_not_contains = optionals.fileName_not_contains, fileName_starts_with = optionals.fileName_starts_with, fileName_not_starts_with = optionals.fileName_not_starts_with, fileName_ends_with = optionals.fileName_ends_with, fileName_not_ends_with = optionals.fileName_not_ends_with, height = optionals.height, height_not = optionals.height_not, height_in = optionals.height_in, height_not_in = optionals.height_not_in, height_lt = optionals.height_lt, height_lte = optionals.height_lte, height_gt = optionals.height_gt, height_gte = optionals.height_gte, mimeType = optionals.mimeType, mimeType_not = optionals.mimeType_not, mimeType_in = optionals.mimeType_in, mimeType_not_in = optionals.mimeType_not_in, mimeType_lt = optionals.mimeType_lt, mimeType_lte = optionals.mimeType_lte, mimeType_gt = optionals.mimeType_gt, mimeType_gte = optionals.mimeType_gte, mimeType_contains = optionals.mimeType_contains, mimeType_not_contains = optionals.mimeType_not_contains, mimeType_starts_with = optionals.mimeType_starts_with, mimeType_not_starts_with = optionals.mimeType_not_starts_with, mimeType_ends_with = optionals.mimeType_ends_with, mimeType_not_ends_with = optionals.mimeType_not_ends_with, size = optionals.size, size_not = optionals.size_not, size_in = optionals.size_in, size_not_in = optionals.size_not_in, size_lt = optionals.size_lt, size_lte = optionals.size_lte, size_gt = optionals.size_gt, size_gte = optionals.size_gte, width = optionals.width, width_not = optionals.width_not, width_in = optionals.width_in, width_not_in = optionals.width_not_in, width_lt = optionals.width_lt, width_lte = optionals.width_lte, width_gt = optionals.width_gt, width_gte = optionals.width_gte }


type alias AssetScalarWhereInputOptionalFields =
    { and : OptionalArgument (List AssetScalarWhereInput)
    , or : OptionalArgument (List AssetScalarWhereInput)
    , not : OptionalArgument (List AssetScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    }


{-| Type alias for the `AssetScalarWhereInput` attributes. Note that this type
needs to use the `AssetScalarWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetScalarWhereInputRaw =
    { and : OptionalArgument (List AssetScalarWhereInput)
    , or : OptionalArgument (List AssetScalarWhereInput)
    , not : OptionalArgument (List AssetScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    }


{-| Type for the AssetScalarWhereInput input object.
-}
type AssetScalarWhereInput
    = AssetScalarWhereInput AssetScalarWhereInputRaw


{-| Encode a AssetScalarWhereInput into a value that can be used as an argument.
-}
encodeAssetScalarWhereInput : AssetScalarWhereInput -> Value
encodeAssetScalarWhereInput (AssetScalarWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "handle_not", Encode.string |> Encode.optional input.handle_not ), ( "handle_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_in ), ( "handle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_not_in ), ( "handle_lt", Encode.string |> Encode.optional input.handle_lt ), ( "handle_lte", Encode.string |> Encode.optional input.handle_lte ), ( "handle_gt", Encode.string |> Encode.optional input.handle_gt ), ( "handle_gte", Encode.string |> Encode.optional input.handle_gte ), ( "handle_contains", Encode.string |> Encode.optional input.handle_contains ), ( "handle_not_contains", Encode.string |> Encode.optional input.handle_not_contains ), ( "handle_starts_with", Encode.string |> Encode.optional input.handle_starts_with ), ( "handle_not_starts_with", Encode.string |> Encode.optional input.handle_not_starts_with ), ( "handle_ends_with", Encode.string |> Encode.optional input.handle_ends_with ), ( "handle_not_ends_with", Encode.string |> Encode.optional input.handle_not_ends_with ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "fileName_not", Encode.string |> Encode.optional input.fileName_not ), ( "fileName_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_in ), ( "fileName_not_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_not_in ), ( "fileName_lt", Encode.string |> Encode.optional input.fileName_lt ), ( "fileName_lte", Encode.string |> Encode.optional input.fileName_lte ), ( "fileName_gt", Encode.string |> Encode.optional input.fileName_gt ), ( "fileName_gte", Encode.string |> Encode.optional input.fileName_gte ), ( "fileName_contains", Encode.string |> Encode.optional input.fileName_contains ), ( "fileName_not_contains", Encode.string |> Encode.optional input.fileName_not_contains ), ( "fileName_starts_with", Encode.string |> Encode.optional input.fileName_starts_with ), ( "fileName_not_starts_with", Encode.string |> Encode.optional input.fileName_not_starts_with ), ( "fileName_ends_with", Encode.string |> Encode.optional input.fileName_ends_with ), ( "fileName_not_ends_with", Encode.string |> Encode.optional input.fileName_not_ends_with ), ( "height", Encode.float |> Encode.optional input.height ), ( "height_not", Encode.float |> Encode.optional input.height_not ), ( "height_in", (Encode.float |> Encode.list) |> Encode.optional input.height_in ), ( "height_not_in", (Encode.float |> Encode.list) |> Encode.optional input.height_not_in ), ( "height_lt", Encode.float |> Encode.optional input.height_lt ), ( "height_lte", Encode.float |> Encode.optional input.height_lte ), ( "height_gt", Encode.float |> Encode.optional input.height_gt ), ( "height_gte", Encode.float |> Encode.optional input.height_gte ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "mimeType_not", Encode.string |> Encode.optional input.mimeType_not ), ( "mimeType_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_in ), ( "mimeType_not_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_not_in ), ( "mimeType_lt", Encode.string |> Encode.optional input.mimeType_lt ), ( "mimeType_lte", Encode.string |> Encode.optional input.mimeType_lte ), ( "mimeType_gt", Encode.string |> Encode.optional input.mimeType_gt ), ( "mimeType_gte", Encode.string |> Encode.optional input.mimeType_gte ), ( "mimeType_contains", Encode.string |> Encode.optional input.mimeType_contains ), ( "mimeType_not_contains", Encode.string |> Encode.optional input.mimeType_not_contains ), ( "mimeType_starts_with", Encode.string |> Encode.optional input.mimeType_starts_with ), ( "mimeType_not_starts_with", Encode.string |> Encode.optional input.mimeType_not_starts_with ), ( "mimeType_ends_with", Encode.string |> Encode.optional input.mimeType_ends_with ), ( "mimeType_not_ends_with", Encode.string |> Encode.optional input.mimeType_not_ends_with ), ( "size", Encode.float |> Encode.optional input.size ), ( "size_not", Encode.float |> Encode.optional input.size_not ), ( "size_in", (Encode.float |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.float |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.float |> Encode.optional input.size_lt ), ( "size_lte", Encode.float |> Encode.optional input.size_lte ), ( "size_gt", Encode.float |> Encode.optional input.size_gt ), ( "size_gte", Encode.float |> Encode.optional input.size_gte ), ( "width", Encode.float |> Encode.optional input.width ), ( "width_not", Encode.float |> Encode.optional input.width_not ), ( "width_in", (Encode.float |> Encode.list) |> Encode.optional input.width_in ), ( "width_not_in", (Encode.float |> Encode.list) |> Encode.optional input.width_not_in ), ( "width_lt", Encode.float |> Encode.optional input.width_lt ), ( "width_lte", Encode.float |> Encode.optional input.width_lte ), ( "width_gt", Encode.float |> Encode.optional input.width_gt ), ( "width_gte", Encode.float |> Encode.optional input.width_gte ) ]


buildAssetSubscriptionWhereInput : (AssetSubscriptionWhereInputOptionalFields -> AssetSubscriptionWhereInputOptionalFields) -> AssetSubscriptionWhereInput
buildAssetSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    AssetSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias AssetSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List AssetSubscriptionWhereInput)
    , or : OptionalArgument (List AssetSubscriptionWhereInput)
    , not : OptionalArgument (List AssetSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `AssetSubscriptionWhereInput` attributes. Note that this type
needs to use the `AssetSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetSubscriptionWhereInputRaw =
    { and : OptionalArgument (List AssetSubscriptionWhereInput)
    , or : OptionalArgument (List AssetSubscriptionWhereInput)
    , not : OptionalArgument (List AssetSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument AssetWhereInput
    }


{-| Type for the AssetSubscriptionWhereInput input object.
-}
type AssetSubscriptionWhereInput
    = AssetSubscriptionWhereInput AssetSubscriptionWhereInputRaw


{-| Encode a AssetSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeAssetSubscriptionWhereInput : AssetSubscriptionWhereInput -> Value
encodeAssetSubscriptionWhereInput (AssetSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeAssetWhereInput |> Encode.optional input.node ) ]


buildAssetTransformationInput : (AssetTransformationInputOptionalFields -> AssetTransformationInputOptionalFields) -> AssetTransformationInput
buildAssetTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { image = Absent, document = Absent, validateOptions = Absent }
    in
    { image = optionals.image, document = optionals.document, validateOptions = optionals.validateOptions }


type alias AssetTransformationInputOptionalFields =
    { image : OptionalArgument ImageTransformationInput
    , document : OptionalArgument DocumentTransformationInput
    , validateOptions : OptionalArgument Bool
    }


{-| Type for the AssetTransformationInput input object.
-}
type alias AssetTransformationInput =
    { image : OptionalArgument ImageTransformationInput
    , document : OptionalArgument DocumentTransformationInput
    , validateOptions : OptionalArgument Bool
    }


{-| Encode a AssetTransformationInput into a value that can be used as an argument.
-}
encodeAssetTransformationInput : AssetTransformationInput -> Value
encodeAssetTransformationInput input =
    Encode.maybeObject
        [ ( "image", encodeImageTransformationInput |> Encode.optional input.image ), ( "document", encodeDocumentTransformationInput |> Encode.optional input.document ), ( "validateOptions", Encode.bool |> Encode.optional input.validateOptions ) ]


buildAssetUpdateInput : (AssetUpdateInputOptionalFields -> AssetUpdateInputOptionalFields) -> AssetUpdateInput
buildAssetUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProject = Absent, pictureProject = Absent }
    in
    AssetUpdateInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProject = optionals.imagesProject, pictureProject = optionals.pictureProject }


type alias AssetUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectUpdateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectUpdateManyWithoutPictureInput
    }


{-| Type alias for the `AssetUpdateInput` attributes. Note that this type
needs to use the `AssetUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectUpdateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectUpdateManyWithoutPictureInput
    }


{-| Type for the AssetUpdateInput input object.
-}
type AssetUpdateInput
    = AssetUpdateInput AssetUpdateInputRaw


{-| Encode a AssetUpdateInput into a value that can be used as an argument.
-}
encodeAssetUpdateInput : AssetUpdateInput -> Value
encodeAssetUpdateInput (AssetUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostUpdateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProject", encodeProjectUpdateManyWithoutImagesInput |> Encode.optional input.imagesProject ), ( "pictureProject", encodeProjectUpdateManyWithoutPictureInput |> Encode.optional input.pictureProject ) ]


buildAssetUpdateManyDataInput : (AssetUpdateManyDataInputOptionalFields -> AssetUpdateManyDataInputOptionalFields) -> AssetUpdateManyDataInput
buildAssetUpdateManyDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent }
    in
    { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width }


type alias AssetUpdateManyDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Type for the AssetUpdateManyDataInput input object.
-}
type alias AssetUpdateManyDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Encode a AssetUpdateManyDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyDataInput : AssetUpdateManyDataInput -> Value
encodeAssetUpdateManyDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ) ]


buildAssetUpdateManyMutationInput : (AssetUpdateManyMutationInputOptionalFields -> AssetUpdateManyMutationInputOptionalFields) -> AssetUpdateManyMutationInput
buildAssetUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent }
    in
    { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width }


type alias AssetUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Type for the AssetUpdateManyMutationInput input object.
-}
type alias AssetUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    }


{-| Encode a AssetUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyMutationInput : AssetUpdateManyMutationInput -> Value
encodeAssetUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ) ]


buildAssetUpdateManyWithWhereNestedInput : AssetUpdateManyWithWhereNestedInputRequiredFields -> AssetUpdateManyWithWhereNestedInput
buildAssetUpdateManyWithWhereNestedInput required =
    AssetUpdateManyWithWhereNestedInput { where_ = required.where_, data = required.data }


type alias AssetUpdateManyWithWhereNestedInputRequiredFields =
    { where_ : AssetScalarWhereInput
    , data : AssetUpdateManyDataInput
    }


{-| Type alias for the `AssetUpdateManyWithWhereNestedInput` attributes. Note that this type
needs to use the `AssetUpdateManyWithWhereNestedInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateManyWithWhereNestedInputRaw =
    { where_ : AssetScalarWhereInput
    , data : AssetUpdateManyDataInput
    }


{-| Type for the AssetUpdateManyWithWhereNestedInput input object.
-}
type AssetUpdateManyWithWhereNestedInput
    = AssetUpdateManyWithWhereNestedInput AssetUpdateManyWithWhereNestedInputRaw


{-| Encode a AssetUpdateManyWithWhereNestedInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyWithWhereNestedInput : AssetUpdateManyWithWhereNestedInput -> Value
encodeAssetUpdateManyWithWhereNestedInput (AssetUpdateManyWithWhereNestedInput input) =
    Encode.maybeObject
        [ ( "where", encodeAssetScalarWhereInput input.where_ |> Just ), ( "data", encodeAssetUpdateManyDataInput input.data |> Just ) ]


buildAssetUpdateManyWithoutImagesProjectInput : (AssetUpdateManyWithoutImagesProjectInputOptionalFields -> AssetUpdateManyWithoutImagesProjectInputOptionalFields) -> AssetUpdateManyWithoutImagesProjectInput
buildAssetUpdateManyWithoutImagesProjectInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, set = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    AssetUpdateManyWithoutImagesProjectInput { create = optionals.create, connect = optionals.connect, set = optionals.set, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias AssetUpdateManyWithoutImagesProjectInputOptionalFields =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    , set : OptionalArgument (List AssetWhereUniqueInput)
    , disconnect : OptionalArgument (List AssetWhereUniqueInput)
    , delete : OptionalArgument (List AssetWhereUniqueInput)
    , update : OptionalArgument (List AssetUpdateWithWhereUniqueWithoutImagesProjectInput)
    , updateMany : OptionalArgument (List AssetUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List AssetScalarWhereInput)
    , upsert : OptionalArgument (List AssetUpsertWithWhereUniqueWithoutImagesProjectInput)
    }


{-| Type alias for the `AssetUpdateManyWithoutImagesProjectInput` attributes. Note that this type
needs to use the `AssetUpdateManyWithoutImagesProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateManyWithoutImagesProjectInputRaw =
    { create : OptionalArgument (List AssetCreateWithoutImagesProjectInput)
    , connect : OptionalArgument (List AssetWhereUniqueInput)
    , set : OptionalArgument (List AssetWhereUniqueInput)
    , disconnect : OptionalArgument (List AssetWhereUniqueInput)
    , delete : OptionalArgument (List AssetWhereUniqueInput)
    , update : OptionalArgument (List AssetUpdateWithWhereUniqueWithoutImagesProjectInput)
    , updateMany : OptionalArgument (List AssetUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List AssetScalarWhereInput)
    , upsert : OptionalArgument (List AssetUpsertWithWhereUniqueWithoutImagesProjectInput)
    }


{-| Type for the AssetUpdateManyWithoutImagesProjectInput input object.
-}
type AssetUpdateManyWithoutImagesProjectInput
    = AssetUpdateManyWithoutImagesProjectInput AssetUpdateManyWithoutImagesProjectInputRaw


{-| Encode a AssetUpdateManyWithoutImagesProjectInput into a value that can be used as an argument.
-}
encodeAssetUpdateManyWithoutImagesProjectInput : AssetUpdateManyWithoutImagesProjectInput -> Value
encodeAssetUpdateManyWithoutImagesProjectInput (AssetUpdateManyWithoutImagesProjectInput input) =
    Encode.maybeObject
        [ ( "create", (encodeAssetCreateWithoutImagesProjectInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "set", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.set ), ( "disconnect", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeAssetWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeAssetUpdateWithWhereUniqueWithoutImagesProjectInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeAssetUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeAssetScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeAssetUpsertWithWhereUniqueWithoutImagesProjectInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildAssetUpdateOneWithoutPictureBlogPostInput : (AssetUpdateOneWithoutPictureBlogPostInputOptionalFields -> AssetUpdateOneWithoutPictureBlogPostInputOptionalFields) -> AssetUpdateOneWithoutPictureBlogPostInput
buildAssetUpdateOneWithoutPictureBlogPostInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    AssetUpdateOneWithoutPictureBlogPostInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias AssetUpdateOneWithoutPictureBlogPostInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureBlogPostDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureBlogPostInput
    }


{-| Type alias for the `AssetUpdateOneWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetUpdateOneWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateOneWithoutPictureBlogPostInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureBlogPostInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureBlogPostDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureBlogPostInput
    }


{-| Type for the AssetUpdateOneWithoutPictureBlogPostInput input object.
-}
type AssetUpdateOneWithoutPictureBlogPostInput
    = AssetUpdateOneWithoutPictureBlogPostInput AssetUpdateOneWithoutPictureBlogPostInputRaw


{-| Encode a AssetUpdateOneWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetUpdateOneWithoutPictureBlogPostInput : AssetUpdateOneWithoutPictureBlogPostInput -> Value
encodeAssetUpdateOneWithoutPictureBlogPostInput (AssetUpdateOneWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureBlogPostInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ), ( "disconnect", Encode.bool |> Encode.optional input.disconnect ), ( "delete", Encode.bool |> Encode.optional input.delete ), ( "update", encodeAssetUpdateWithoutPictureBlogPostDataInput |> Encode.optional input.update ), ( "upsert", encodeAssetUpsertWithoutPictureBlogPostInput |> Encode.optional input.upsert ) ]


buildAssetUpdateOneWithoutPictureProjectInput : (AssetUpdateOneWithoutPictureProjectInputOptionalFields -> AssetUpdateOneWithoutPictureProjectInputOptionalFields) -> AssetUpdateOneWithoutPictureProjectInput
buildAssetUpdateOneWithoutPictureProjectInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, disconnect = Absent, delete = Absent, update = Absent, upsert = Absent }
    in
    AssetUpdateOneWithoutPictureProjectInput { create = optionals.create, connect = optionals.connect, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, upsert = optionals.upsert }


type alias AssetUpdateOneWithoutPictureProjectInputOptionalFields =
    { create : OptionalArgument AssetCreateWithoutPictureProjectInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureProjectDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureProjectInput
    }


{-| Type alias for the `AssetUpdateOneWithoutPictureProjectInput` attributes. Note that this type
needs to use the `AssetUpdateOneWithoutPictureProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateOneWithoutPictureProjectInputRaw =
    { create : OptionalArgument AssetCreateWithoutPictureProjectInput
    , connect : OptionalArgument AssetWhereUniqueInput
    , disconnect : OptionalArgument Bool
    , delete : OptionalArgument Bool
    , update : OptionalArgument AssetUpdateWithoutPictureProjectDataInput
    , upsert : OptionalArgument AssetUpsertWithoutPictureProjectInput
    }


{-| Type for the AssetUpdateOneWithoutPictureProjectInput input object.
-}
type AssetUpdateOneWithoutPictureProjectInput
    = AssetUpdateOneWithoutPictureProjectInput AssetUpdateOneWithoutPictureProjectInputRaw


{-| Encode a AssetUpdateOneWithoutPictureProjectInput into a value that can be used as an argument.
-}
encodeAssetUpdateOneWithoutPictureProjectInput : AssetUpdateOneWithoutPictureProjectInput -> Value
encodeAssetUpdateOneWithoutPictureProjectInput (AssetUpdateOneWithoutPictureProjectInput input) =
    Encode.maybeObject
        [ ( "create", encodeAssetCreateWithoutPictureProjectInput |> Encode.optional input.create ), ( "connect", encodeAssetWhereUniqueInput |> Encode.optional input.connect ), ( "disconnect", Encode.bool |> Encode.optional input.disconnect ), ( "delete", Encode.bool |> Encode.optional input.delete ), ( "update", encodeAssetUpdateWithoutPictureProjectDataInput |> Encode.optional input.update ), ( "upsert", encodeAssetUpsertWithoutPictureProjectInput |> Encode.optional input.upsert ) ]


buildAssetUpdateWithWhereUniqueWithoutImagesProjectInput : AssetUpdateWithWhereUniqueWithoutImagesProjectInputRequiredFields -> AssetUpdateWithWhereUniqueWithoutImagesProjectInput
buildAssetUpdateWithWhereUniqueWithoutImagesProjectInput required =
    AssetUpdateWithWhereUniqueWithoutImagesProjectInput { where_ = required.where_, data = required.data }


type alias AssetUpdateWithWhereUniqueWithoutImagesProjectInputRequiredFields =
    { where_ : AssetWhereUniqueInput
    , data : AssetUpdateWithoutImagesProjectDataInput
    }


{-| Type alias for the `AssetUpdateWithWhereUniqueWithoutImagesProjectInput` attributes. Note that this type
needs to use the `AssetUpdateWithWhereUniqueWithoutImagesProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithWhereUniqueWithoutImagesProjectInputRaw =
    { where_ : AssetWhereUniqueInput
    , data : AssetUpdateWithoutImagesProjectDataInput
    }


{-| Type for the AssetUpdateWithWhereUniqueWithoutImagesProjectInput input object.
-}
type AssetUpdateWithWhereUniqueWithoutImagesProjectInput
    = AssetUpdateWithWhereUniqueWithoutImagesProjectInput AssetUpdateWithWhereUniqueWithoutImagesProjectInputRaw


{-| Encode a AssetUpdateWithWhereUniqueWithoutImagesProjectInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithWhereUniqueWithoutImagesProjectInput : AssetUpdateWithWhereUniqueWithoutImagesProjectInput -> Value
encodeAssetUpdateWithWhereUniqueWithoutImagesProjectInput (AssetUpdateWithWhereUniqueWithoutImagesProjectInput input) =
    Encode.maybeObject
        [ ( "where", encodeAssetWhereUniqueInput input.where_ |> Just ), ( "data", encodeAssetUpdateWithoutImagesProjectDataInput input.data |> Just ) ]


buildAssetUpdateWithoutImagesProjectDataInput : (AssetUpdateWithoutImagesProjectDataInputOptionalFields -> AssetUpdateWithoutImagesProjectDataInputOptionalFields) -> AssetUpdateWithoutImagesProjectDataInput
buildAssetUpdateWithoutImagesProjectDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, pictureProject = Absent }
    in
    AssetUpdateWithoutImagesProjectDataInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, pictureProject = optionals.pictureProject }


type alias AssetUpdateWithoutImagesProjectDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , pictureProject : OptionalArgument ProjectUpdateManyWithoutPictureInput
    }


{-| Type alias for the `AssetUpdateWithoutImagesProjectDataInput` attributes. Note that this type
needs to use the `AssetUpdateWithoutImagesProjectDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithoutImagesProjectDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , pictureProject : OptionalArgument ProjectUpdateManyWithoutPictureInput
    }


{-| Type for the AssetUpdateWithoutImagesProjectDataInput input object.
-}
type AssetUpdateWithoutImagesProjectDataInput
    = AssetUpdateWithoutImagesProjectDataInput AssetUpdateWithoutImagesProjectDataInputRaw


{-| Encode a AssetUpdateWithoutImagesProjectDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithoutImagesProjectDataInput : AssetUpdateWithoutImagesProjectDataInput -> Value
encodeAssetUpdateWithoutImagesProjectDataInput (AssetUpdateWithoutImagesProjectDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostUpdateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "pictureProject", encodeProjectUpdateManyWithoutPictureInput |> Encode.optional input.pictureProject ) ]


buildAssetUpdateWithoutPictureBlogPostDataInput : (AssetUpdateWithoutPictureBlogPostDataInputOptionalFields -> AssetUpdateWithoutPictureBlogPostDataInputOptionalFields) -> AssetUpdateWithoutPictureBlogPostDataInput
buildAssetUpdateWithoutPictureBlogPostDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, imagesProject = Absent, pictureProject = Absent }
    in
    AssetUpdateWithoutPictureBlogPostDataInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, imagesProject = optionals.imagesProject, pictureProject = optionals.pictureProject }


type alias AssetUpdateWithoutPictureBlogPostDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProject : OptionalArgument ProjectUpdateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectUpdateManyWithoutPictureInput
    }


{-| Type alias for the `AssetUpdateWithoutPictureBlogPostDataInput` attributes. Note that this type
needs to use the `AssetUpdateWithoutPictureBlogPostDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithoutPictureBlogPostDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , imagesProject : OptionalArgument ProjectUpdateManyWithoutImagesInput
    , pictureProject : OptionalArgument ProjectUpdateManyWithoutPictureInput
    }


{-| Type for the AssetUpdateWithoutPictureBlogPostDataInput input object.
-}
type AssetUpdateWithoutPictureBlogPostDataInput
    = AssetUpdateWithoutPictureBlogPostDataInput AssetUpdateWithoutPictureBlogPostDataInputRaw


{-| Encode a AssetUpdateWithoutPictureBlogPostDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithoutPictureBlogPostDataInput : AssetUpdateWithoutPictureBlogPostDataInput -> Value
encodeAssetUpdateWithoutPictureBlogPostDataInput (AssetUpdateWithoutPictureBlogPostDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "imagesProject", encodeProjectUpdateManyWithoutImagesInput |> Encode.optional input.imagesProject ), ( "pictureProject", encodeProjectUpdateManyWithoutPictureInput |> Encode.optional input.pictureProject ) ]


buildAssetUpdateWithoutPictureProjectDataInput : (AssetUpdateWithoutPictureProjectDataInputOptionalFields -> AssetUpdateWithoutPictureProjectDataInputOptionalFields) -> AssetUpdateWithoutPictureProjectDataInput
buildAssetUpdateWithoutPictureProjectDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, handle = Absent, fileName = Absent, height = Absent, mimeType = Absent, size = Absent, width = Absent, pictureBlogPost = Absent, imagesProject = Absent }
    in
    AssetUpdateWithoutPictureProjectDataInput { status = optionals.status, handle = optionals.handle, fileName = optionals.fileName, height = optionals.height, mimeType = optionals.mimeType, size = optionals.size, width = optionals.width, pictureBlogPost = optionals.pictureBlogPost, imagesProject = optionals.imagesProject }


type alias AssetUpdateWithoutPictureProjectDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectUpdateManyWithoutImagesInput
    }


{-| Type alias for the `AssetUpdateWithoutPictureProjectDataInput` attributes. Note that this type
needs to use the `AssetUpdateWithoutPictureProjectDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpdateWithoutPictureProjectDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , handle : OptionalArgument String
    , fileName : OptionalArgument String
    , height : OptionalArgument Float
    , mimeType : OptionalArgument String
    , size : OptionalArgument Float
    , width : OptionalArgument Float
    , pictureBlogPost : OptionalArgument BlogPostUpdateManyWithoutPictureInput
    , imagesProject : OptionalArgument ProjectUpdateManyWithoutImagesInput
    }


{-| Type for the AssetUpdateWithoutPictureProjectDataInput input object.
-}
type AssetUpdateWithoutPictureProjectDataInput
    = AssetUpdateWithoutPictureProjectDataInput AssetUpdateWithoutPictureProjectDataInputRaw


{-| Encode a AssetUpdateWithoutPictureProjectDataInput into a value that can be used as an argument.
-}
encodeAssetUpdateWithoutPictureProjectDataInput : AssetUpdateWithoutPictureProjectDataInput -> Value
encodeAssetUpdateWithoutPictureProjectDataInput (AssetUpdateWithoutPictureProjectDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "height", Encode.float |> Encode.optional input.height ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "size", Encode.float |> Encode.optional input.size ), ( "width", Encode.float |> Encode.optional input.width ), ( "pictureBlogPost", encodeBlogPostUpdateManyWithoutPictureInput |> Encode.optional input.pictureBlogPost ), ( "imagesProject", encodeProjectUpdateManyWithoutImagesInput |> Encode.optional input.imagesProject ) ]


buildAssetUpsertWithWhereUniqueWithoutImagesProjectInput : AssetUpsertWithWhereUniqueWithoutImagesProjectInputRequiredFields -> AssetUpsertWithWhereUniqueWithoutImagesProjectInput
buildAssetUpsertWithWhereUniqueWithoutImagesProjectInput required =
    AssetUpsertWithWhereUniqueWithoutImagesProjectInput { where_ = required.where_, update = required.update, create = required.create }


type alias AssetUpsertWithWhereUniqueWithoutImagesProjectInputRequiredFields =
    { where_ : AssetWhereUniqueInput
    , update : AssetUpdateWithoutImagesProjectDataInput
    , create : AssetCreateWithoutImagesProjectInput
    }


{-| Type alias for the `AssetUpsertWithWhereUniqueWithoutImagesProjectInput` attributes. Note that this type
needs to use the `AssetUpsertWithWhereUniqueWithoutImagesProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpsertWithWhereUniqueWithoutImagesProjectInputRaw =
    { where_ : AssetWhereUniqueInput
    , update : AssetUpdateWithoutImagesProjectDataInput
    , create : AssetCreateWithoutImagesProjectInput
    }


{-| Type for the AssetUpsertWithWhereUniqueWithoutImagesProjectInput input object.
-}
type AssetUpsertWithWhereUniqueWithoutImagesProjectInput
    = AssetUpsertWithWhereUniqueWithoutImagesProjectInput AssetUpsertWithWhereUniqueWithoutImagesProjectInputRaw


{-| Encode a AssetUpsertWithWhereUniqueWithoutImagesProjectInput into a value that can be used as an argument.
-}
encodeAssetUpsertWithWhereUniqueWithoutImagesProjectInput : AssetUpsertWithWhereUniqueWithoutImagesProjectInput -> Value
encodeAssetUpsertWithWhereUniqueWithoutImagesProjectInput (AssetUpsertWithWhereUniqueWithoutImagesProjectInput input) =
    Encode.maybeObject
        [ ( "where", encodeAssetWhereUniqueInput input.where_ |> Just ), ( "update", encodeAssetUpdateWithoutImagesProjectDataInput input.update |> Just ), ( "create", encodeAssetCreateWithoutImagesProjectInput input.create |> Just ) ]


buildAssetUpsertWithoutPictureBlogPostInput : AssetUpsertWithoutPictureBlogPostInputRequiredFields -> AssetUpsertWithoutPictureBlogPostInput
buildAssetUpsertWithoutPictureBlogPostInput required =
    AssetUpsertWithoutPictureBlogPostInput { update = required.update, create = required.create }


type alias AssetUpsertWithoutPictureBlogPostInputRequiredFields =
    { update : AssetUpdateWithoutPictureBlogPostDataInput
    , create : AssetCreateWithoutPictureBlogPostInput
    }


{-| Type alias for the `AssetUpsertWithoutPictureBlogPostInput` attributes. Note that this type
needs to use the `AssetUpsertWithoutPictureBlogPostInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpsertWithoutPictureBlogPostInputRaw =
    { update : AssetUpdateWithoutPictureBlogPostDataInput
    , create : AssetCreateWithoutPictureBlogPostInput
    }


{-| Type for the AssetUpsertWithoutPictureBlogPostInput input object.
-}
type AssetUpsertWithoutPictureBlogPostInput
    = AssetUpsertWithoutPictureBlogPostInput AssetUpsertWithoutPictureBlogPostInputRaw


{-| Encode a AssetUpsertWithoutPictureBlogPostInput into a value that can be used as an argument.
-}
encodeAssetUpsertWithoutPictureBlogPostInput : AssetUpsertWithoutPictureBlogPostInput -> Value
encodeAssetUpsertWithoutPictureBlogPostInput (AssetUpsertWithoutPictureBlogPostInput input) =
    Encode.maybeObject
        [ ( "update", encodeAssetUpdateWithoutPictureBlogPostDataInput input.update |> Just ), ( "create", encodeAssetCreateWithoutPictureBlogPostInput input.create |> Just ) ]


buildAssetUpsertWithoutPictureProjectInput : AssetUpsertWithoutPictureProjectInputRequiredFields -> AssetUpsertWithoutPictureProjectInput
buildAssetUpsertWithoutPictureProjectInput required =
    AssetUpsertWithoutPictureProjectInput { update = required.update, create = required.create }


type alias AssetUpsertWithoutPictureProjectInputRequiredFields =
    { update : AssetUpdateWithoutPictureProjectDataInput
    , create : AssetCreateWithoutPictureProjectInput
    }


{-| Type alias for the `AssetUpsertWithoutPictureProjectInput` attributes. Note that this type
needs to use the `AssetUpsertWithoutPictureProjectInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetUpsertWithoutPictureProjectInputRaw =
    { update : AssetUpdateWithoutPictureProjectDataInput
    , create : AssetCreateWithoutPictureProjectInput
    }


{-| Type for the AssetUpsertWithoutPictureProjectInput input object.
-}
type AssetUpsertWithoutPictureProjectInput
    = AssetUpsertWithoutPictureProjectInput AssetUpsertWithoutPictureProjectInputRaw


{-| Encode a AssetUpsertWithoutPictureProjectInput into a value that can be used as an argument.
-}
encodeAssetUpsertWithoutPictureProjectInput : AssetUpsertWithoutPictureProjectInput -> Value
encodeAssetUpsertWithoutPictureProjectInput (AssetUpsertWithoutPictureProjectInput input) =
    Encode.maybeObject
        [ ( "update", encodeAssetUpdateWithoutPictureProjectDataInput input.update |> Just ), ( "create", encodeAssetCreateWithoutPictureProjectInput input.create |> Just ) ]


buildAssetWhereInput : (AssetWhereInputOptionalFields -> AssetWhereInputOptionalFields) -> AssetWhereInput
buildAssetWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, handle = Absent, handle_not = Absent, handle_in = Absent, handle_not_in = Absent, handle_lt = Absent, handle_lte = Absent, handle_gt = Absent, handle_gte = Absent, handle_contains = Absent, handle_not_contains = Absent, handle_starts_with = Absent, handle_not_starts_with = Absent, handle_ends_with = Absent, handle_not_ends_with = Absent, fileName = Absent, fileName_not = Absent, fileName_in = Absent, fileName_not_in = Absent, fileName_lt = Absent, fileName_lte = Absent, fileName_gt = Absent, fileName_gte = Absent, fileName_contains = Absent, fileName_not_contains = Absent, fileName_starts_with = Absent, fileName_not_starts_with = Absent, fileName_ends_with = Absent, fileName_not_ends_with = Absent, height = Absent, height_not = Absent, height_in = Absent, height_not_in = Absent, height_lt = Absent, height_lte = Absent, height_gt = Absent, height_gte = Absent, mimeType = Absent, mimeType_not = Absent, mimeType_in = Absent, mimeType_not_in = Absent, mimeType_lt = Absent, mimeType_lte = Absent, mimeType_gt = Absent, mimeType_gte = Absent, mimeType_contains = Absent, mimeType_not_contains = Absent, mimeType_starts_with = Absent, mimeType_not_starts_with = Absent, mimeType_ends_with = Absent, mimeType_not_ends_with = Absent, size = Absent, size_not = Absent, size_in = Absent, size_not_in = Absent, size_lt = Absent, size_lte = Absent, size_gt = Absent, size_gte = Absent, width = Absent, width_not = Absent, width_in = Absent, width_not_in = Absent, width_lt = Absent, width_lte = Absent, width_gt = Absent, width_gte = Absent, pictureBlogPost_every = Absent, pictureBlogPost_some = Absent, pictureBlogPost_none = Absent, imagesProject_every = Absent, imagesProject_some = Absent, imagesProject_none = Absent, pictureProject_every = Absent, pictureProject_some = Absent, pictureProject_none = Absent }
    in
    AssetWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, handle = optionals.handle, handle_not = optionals.handle_not, handle_in = optionals.handle_in, handle_not_in = optionals.handle_not_in, handle_lt = optionals.handle_lt, handle_lte = optionals.handle_lte, handle_gt = optionals.handle_gt, handle_gte = optionals.handle_gte, handle_contains = optionals.handle_contains, handle_not_contains = optionals.handle_not_contains, handle_starts_with = optionals.handle_starts_with, handle_not_starts_with = optionals.handle_not_starts_with, handle_ends_with = optionals.handle_ends_with, handle_not_ends_with = optionals.handle_not_ends_with, fileName = optionals.fileName, fileName_not = optionals.fileName_not, fileName_in = optionals.fileName_in, fileName_not_in = optionals.fileName_not_in, fileName_lt = optionals.fileName_lt, fileName_lte = optionals.fileName_lte, fileName_gt = optionals.fileName_gt, fileName_gte = optionals.fileName_gte, fileName_contains = optionals.fileName_contains, fileName_not_contains = optionals.fileName_not_contains, fileName_starts_with = optionals.fileName_starts_with, fileName_not_starts_with = optionals.fileName_not_starts_with, fileName_ends_with = optionals.fileName_ends_with, fileName_not_ends_with = optionals.fileName_not_ends_with, height = optionals.height, height_not = optionals.height_not, height_in = optionals.height_in, height_not_in = optionals.height_not_in, height_lt = optionals.height_lt, height_lte = optionals.height_lte, height_gt = optionals.height_gt, height_gte = optionals.height_gte, mimeType = optionals.mimeType, mimeType_not = optionals.mimeType_not, mimeType_in = optionals.mimeType_in, mimeType_not_in = optionals.mimeType_not_in, mimeType_lt = optionals.mimeType_lt, mimeType_lte = optionals.mimeType_lte, mimeType_gt = optionals.mimeType_gt, mimeType_gte = optionals.mimeType_gte, mimeType_contains = optionals.mimeType_contains, mimeType_not_contains = optionals.mimeType_not_contains, mimeType_starts_with = optionals.mimeType_starts_with, mimeType_not_starts_with = optionals.mimeType_not_starts_with, mimeType_ends_with = optionals.mimeType_ends_with, mimeType_not_ends_with = optionals.mimeType_not_ends_with, size = optionals.size, size_not = optionals.size_not, size_in = optionals.size_in, size_not_in = optionals.size_not_in, size_lt = optionals.size_lt, size_lte = optionals.size_lte, size_gt = optionals.size_gt, size_gte = optionals.size_gte, width = optionals.width, width_not = optionals.width_not, width_in = optionals.width_in, width_not_in = optionals.width_not_in, width_lt = optionals.width_lt, width_lte = optionals.width_lte, width_gt = optionals.width_gt, width_gte = optionals.width_gte, pictureBlogPost_every = optionals.pictureBlogPost_every, pictureBlogPost_some = optionals.pictureBlogPost_some, pictureBlogPost_none = optionals.pictureBlogPost_none, imagesProject_every = optionals.imagesProject_every, imagesProject_some = optionals.imagesProject_some, imagesProject_none = optionals.imagesProject_none, pictureProject_every = optionals.pictureProject_every, pictureProject_some = optionals.pictureProject_some, pictureProject_none = optionals.pictureProject_none }


type alias AssetWhereInputOptionalFields =
    { and : OptionalArgument (List AssetWhereInput)
    , or : OptionalArgument (List AssetWhereInput)
    , not : OptionalArgument (List AssetWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    , pictureBlogPost_every : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_some : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_none : OptionalArgument BlogPostWhereInput
    , imagesProject_every : OptionalArgument ProjectWhereInput
    , imagesProject_some : OptionalArgument ProjectWhereInput
    , imagesProject_none : OptionalArgument ProjectWhereInput
    , pictureProject_every : OptionalArgument ProjectWhereInput
    , pictureProject_some : OptionalArgument ProjectWhereInput
    , pictureProject_none : OptionalArgument ProjectWhereInput
    }


{-| Type alias for the `AssetWhereInput` attributes. Note that this type
needs to use the `AssetWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias AssetWhereInputRaw =
    { and : OptionalArgument (List AssetWhereInput)
    , or : OptionalArgument (List AssetWhereInput)
    , not : OptionalArgument (List AssetWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , fileName : OptionalArgument String
    , fileName_not : OptionalArgument String
    , fileName_in : OptionalArgument (List String)
    , fileName_not_in : OptionalArgument (List String)
    , fileName_lt : OptionalArgument String
    , fileName_lte : OptionalArgument String
    , fileName_gt : OptionalArgument String
    , fileName_gte : OptionalArgument String
    , fileName_contains : OptionalArgument String
    , fileName_not_contains : OptionalArgument String
    , fileName_starts_with : OptionalArgument String
    , fileName_not_starts_with : OptionalArgument String
    , fileName_ends_with : OptionalArgument String
    , fileName_not_ends_with : OptionalArgument String
    , height : OptionalArgument Float
    , height_not : OptionalArgument Float
    , height_in : OptionalArgument (List Float)
    , height_not_in : OptionalArgument (List Float)
    , height_lt : OptionalArgument Float
    , height_lte : OptionalArgument Float
    , height_gt : OptionalArgument Float
    , height_gte : OptionalArgument Float
    , mimeType : OptionalArgument String
    , mimeType_not : OptionalArgument String
    , mimeType_in : OptionalArgument (List String)
    , mimeType_not_in : OptionalArgument (List String)
    , mimeType_lt : OptionalArgument String
    , mimeType_lte : OptionalArgument String
    , mimeType_gt : OptionalArgument String
    , mimeType_gte : OptionalArgument String
    , mimeType_contains : OptionalArgument String
    , mimeType_not_contains : OptionalArgument String
    , mimeType_starts_with : OptionalArgument String
    , mimeType_not_starts_with : OptionalArgument String
    , mimeType_ends_with : OptionalArgument String
    , mimeType_not_ends_with : OptionalArgument String
    , size : OptionalArgument Float
    , size_not : OptionalArgument Float
    , size_in : OptionalArgument (List Float)
    , size_not_in : OptionalArgument (List Float)
    , size_lt : OptionalArgument Float
    , size_lte : OptionalArgument Float
    , size_gt : OptionalArgument Float
    , size_gte : OptionalArgument Float
    , width : OptionalArgument Float
    , width_not : OptionalArgument Float
    , width_in : OptionalArgument (List Float)
    , width_not_in : OptionalArgument (List Float)
    , width_lt : OptionalArgument Float
    , width_lte : OptionalArgument Float
    , width_gt : OptionalArgument Float
    , width_gte : OptionalArgument Float
    , pictureBlogPost_every : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_some : OptionalArgument BlogPostWhereInput
    , pictureBlogPost_none : OptionalArgument BlogPostWhereInput
    , imagesProject_every : OptionalArgument ProjectWhereInput
    , imagesProject_some : OptionalArgument ProjectWhereInput
    , imagesProject_none : OptionalArgument ProjectWhereInput
    , pictureProject_every : OptionalArgument ProjectWhereInput
    , pictureProject_some : OptionalArgument ProjectWhereInput
    , pictureProject_none : OptionalArgument ProjectWhereInput
    }


{-| Type for the AssetWhereInput input object.
-}
type AssetWhereInput
    = AssetWhereInput AssetWhereInputRaw


{-| Encode a AssetWhereInput into a value that can be used as an argument.
-}
encodeAssetWhereInput : AssetWhereInput -> Value
encodeAssetWhereInput (AssetWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeAssetWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "handle_not", Encode.string |> Encode.optional input.handle_not ), ( "handle_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_in ), ( "handle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_not_in ), ( "handle_lt", Encode.string |> Encode.optional input.handle_lt ), ( "handle_lte", Encode.string |> Encode.optional input.handle_lte ), ( "handle_gt", Encode.string |> Encode.optional input.handle_gt ), ( "handle_gte", Encode.string |> Encode.optional input.handle_gte ), ( "handle_contains", Encode.string |> Encode.optional input.handle_contains ), ( "handle_not_contains", Encode.string |> Encode.optional input.handle_not_contains ), ( "handle_starts_with", Encode.string |> Encode.optional input.handle_starts_with ), ( "handle_not_starts_with", Encode.string |> Encode.optional input.handle_not_starts_with ), ( "handle_ends_with", Encode.string |> Encode.optional input.handle_ends_with ), ( "handle_not_ends_with", Encode.string |> Encode.optional input.handle_not_ends_with ), ( "fileName", Encode.string |> Encode.optional input.fileName ), ( "fileName_not", Encode.string |> Encode.optional input.fileName_not ), ( "fileName_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_in ), ( "fileName_not_in", (Encode.string |> Encode.list) |> Encode.optional input.fileName_not_in ), ( "fileName_lt", Encode.string |> Encode.optional input.fileName_lt ), ( "fileName_lte", Encode.string |> Encode.optional input.fileName_lte ), ( "fileName_gt", Encode.string |> Encode.optional input.fileName_gt ), ( "fileName_gte", Encode.string |> Encode.optional input.fileName_gte ), ( "fileName_contains", Encode.string |> Encode.optional input.fileName_contains ), ( "fileName_not_contains", Encode.string |> Encode.optional input.fileName_not_contains ), ( "fileName_starts_with", Encode.string |> Encode.optional input.fileName_starts_with ), ( "fileName_not_starts_with", Encode.string |> Encode.optional input.fileName_not_starts_with ), ( "fileName_ends_with", Encode.string |> Encode.optional input.fileName_ends_with ), ( "fileName_not_ends_with", Encode.string |> Encode.optional input.fileName_not_ends_with ), ( "height", Encode.float |> Encode.optional input.height ), ( "height_not", Encode.float |> Encode.optional input.height_not ), ( "height_in", (Encode.float |> Encode.list) |> Encode.optional input.height_in ), ( "height_not_in", (Encode.float |> Encode.list) |> Encode.optional input.height_not_in ), ( "height_lt", Encode.float |> Encode.optional input.height_lt ), ( "height_lte", Encode.float |> Encode.optional input.height_lte ), ( "height_gt", Encode.float |> Encode.optional input.height_gt ), ( "height_gte", Encode.float |> Encode.optional input.height_gte ), ( "mimeType", Encode.string |> Encode.optional input.mimeType ), ( "mimeType_not", Encode.string |> Encode.optional input.mimeType_not ), ( "mimeType_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_in ), ( "mimeType_not_in", (Encode.string |> Encode.list) |> Encode.optional input.mimeType_not_in ), ( "mimeType_lt", Encode.string |> Encode.optional input.mimeType_lt ), ( "mimeType_lte", Encode.string |> Encode.optional input.mimeType_lte ), ( "mimeType_gt", Encode.string |> Encode.optional input.mimeType_gt ), ( "mimeType_gte", Encode.string |> Encode.optional input.mimeType_gte ), ( "mimeType_contains", Encode.string |> Encode.optional input.mimeType_contains ), ( "mimeType_not_contains", Encode.string |> Encode.optional input.mimeType_not_contains ), ( "mimeType_starts_with", Encode.string |> Encode.optional input.mimeType_starts_with ), ( "mimeType_not_starts_with", Encode.string |> Encode.optional input.mimeType_not_starts_with ), ( "mimeType_ends_with", Encode.string |> Encode.optional input.mimeType_ends_with ), ( "mimeType_not_ends_with", Encode.string |> Encode.optional input.mimeType_not_ends_with ), ( "size", Encode.float |> Encode.optional input.size ), ( "size_not", Encode.float |> Encode.optional input.size_not ), ( "size_in", (Encode.float |> Encode.list) |> Encode.optional input.size_in ), ( "size_not_in", (Encode.float |> Encode.list) |> Encode.optional input.size_not_in ), ( "size_lt", Encode.float |> Encode.optional input.size_lt ), ( "size_lte", Encode.float |> Encode.optional input.size_lte ), ( "size_gt", Encode.float |> Encode.optional input.size_gt ), ( "size_gte", Encode.float |> Encode.optional input.size_gte ), ( "width", Encode.float |> Encode.optional input.width ), ( "width_not", Encode.float |> Encode.optional input.width_not ), ( "width_in", (Encode.float |> Encode.list) |> Encode.optional input.width_in ), ( "width_not_in", (Encode.float |> Encode.list) |> Encode.optional input.width_not_in ), ( "width_lt", Encode.float |> Encode.optional input.width_lt ), ( "width_lte", Encode.float |> Encode.optional input.width_lte ), ( "width_gt", Encode.float |> Encode.optional input.width_gt ), ( "width_gte", Encode.float |> Encode.optional input.width_gte ), ( "pictureBlogPost_every", encodeBlogPostWhereInput |> Encode.optional input.pictureBlogPost_every ), ( "pictureBlogPost_some", encodeBlogPostWhereInput |> Encode.optional input.pictureBlogPost_some ), ( "pictureBlogPost_none", encodeBlogPostWhereInput |> Encode.optional input.pictureBlogPost_none ), ( "imagesProject_every", encodeProjectWhereInput |> Encode.optional input.imagesProject_every ), ( "imagesProject_some", encodeProjectWhereInput |> Encode.optional input.imagesProject_some ), ( "imagesProject_none", encodeProjectWhereInput |> Encode.optional input.imagesProject_none ), ( "pictureProject_every", encodeProjectWhereInput |> Encode.optional input.pictureProject_every ), ( "pictureProject_some", encodeProjectWhereInput |> Encode.optional input.pictureProject_some ), ( "pictureProject_none", encodeProjectWhereInput |> Encode.optional input.pictureProject_none ) ]


buildAssetWhereUniqueInput : (AssetWhereUniqueInputOptionalFields -> AssetWhereUniqueInputOptionalFields) -> AssetWhereUniqueInput
buildAssetWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent, handle = Absent }
    in
    { id = optionals.id, handle = optionals.handle }


type alias AssetWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id
    , handle : OptionalArgument String
    }


{-| Type for the AssetWhereUniqueInput input object.
-}
type alias AssetWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id
    , handle : OptionalArgument String
    }


{-| Encode a AssetWhereUniqueInput into a value that can be used as an argument.
-}
encodeAssetWhereUniqueInput : AssetWhereUniqueInput -> Value
encodeAssetWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "handle", Encode.string |> Encode.optional input.handle ) ]


buildBlogPostCreateInput : BlogPostCreateInputRequiredFields -> (BlogPostCreateInputOptionalFields -> BlogPostCreateInputOptionalFields) -> BlogPostCreateInput
buildBlogPostCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, teaser = Absent, views = Absent, tags = Absent, picture = Absent }
    in
    BlogPostCreateInput { status = optionals.status, title = required.title, teaser = optionals.teaser, body = required.body, views = optionals.views, tags = optionals.tags, picture = optionals.picture }


type alias BlogPostCreateInputRequiredFields =
    { title : String
    , body : String
    }


type alias BlogPostCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , teaser : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureBlogPostInput
    }


{-| Type alias for the `BlogPostCreateInput` attributes. Note that this type
needs to use the `BlogPostCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostCreateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : String
    , teaser : OptionalArgument String
    , body : String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureBlogPostInput
    }


{-| Type for the BlogPostCreateInput input object.
-}
type BlogPostCreateInput
    = BlogPostCreateInput BlogPostCreateInputRaw


{-| Encode a BlogPostCreateInput into a value that can be used as an argument.
-}
encodeBlogPostCreateInput : BlogPostCreateInput -> Value
encodeBlogPostCreateInput (BlogPostCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string input.title |> Just ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string input.body |> Just ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostCreatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetCreateOneWithoutPictureBlogPostInput |> Encode.optional input.picture ) ]


buildBlogPostCreateManyWithoutPictureInput : (BlogPostCreateManyWithoutPictureInputOptionalFields -> BlogPostCreateManyWithoutPictureInputOptionalFields) -> BlogPostCreateManyWithoutPictureInput
buildBlogPostCreateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    BlogPostCreateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect }


type alias BlogPostCreateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    }


{-| Type alias for the `BlogPostCreateManyWithoutPictureInput` attributes. Note that this type
needs to use the `BlogPostCreateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostCreateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    }


{-| Type for the BlogPostCreateManyWithoutPictureInput input object.
-}
type BlogPostCreateManyWithoutPictureInput
    = BlogPostCreateManyWithoutPictureInput BlogPostCreateManyWithoutPictureInputRaw


{-| Encode a BlogPostCreateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostCreateManyWithoutPictureInput : BlogPostCreateManyWithoutPictureInput -> Value
encodeBlogPostCreateManyWithoutPictureInput (BlogPostCreateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeBlogPostCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildBlogPostCreateWithoutPictureInput : BlogPostCreateWithoutPictureInputRequiredFields -> (BlogPostCreateWithoutPictureInputOptionalFields -> BlogPostCreateWithoutPictureInputOptionalFields) -> BlogPostCreateWithoutPictureInput
buildBlogPostCreateWithoutPictureInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, teaser = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = required.title, teaser = optionals.teaser, body = required.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostCreateWithoutPictureInputRequiredFields =
    { title : String
    , body : String
    }


type alias BlogPostCreateWithoutPictureInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , teaser : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    }


{-| Type for the BlogPostCreateWithoutPictureInput input object.
-}
type alias BlogPostCreateWithoutPictureInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : String
    , teaser : OptionalArgument String
    , body : String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostCreatetagsInput
    }


{-| Encode a BlogPostCreateWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostCreateWithoutPictureInput : BlogPostCreateWithoutPictureInput -> Value
encodeBlogPostCreateWithoutPictureInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string input.title |> Just ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string input.body |> Just ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostCreatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostCreatetagsInput : (BlogPostCreatetagsInputOptionalFields -> BlogPostCreatetagsInputOptionalFields) -> BlogPostCreatetagsInput
buildBlogPostCreatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias BlogPostCreatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the BlogPostCreatetagsInput input object.
-}
type alias BlogPostCreatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a BlogPostCreatetagsInput into a value that can be used as an argument.
-}
encodeBlogPostCreatetagsInput : BlogPostCreatetagsInput -> Value
encodeBlogPostCreatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildBlogPostScalarWhereInput : (BlogPostScalarWhereInputOptionalFields -> BlogPostScalarWhereInputOptionalFields) -> BlogPostScalarWhereInput
buildBlogPostScalarWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, teaser = Absent, teaser_not = Absent, teaser_in = Absent, teaser_not_in = Absent, teaser_lt = Absent, teaser_lte = Absent, teaser_gt = Absent, teaser_gte = Absent, teaser_contains = Absent, teaser_not_contains = Absent, teaser_starts_with = Absent, teaser_not_starts_with = Absent, teaser_ends_with = Absent, teaser_not_ends_with = Absent, body = Absent, body_not = Absent, body_in = Absent, body_not_in = Absent, body_lt = Absent, body_lte = Absent, body_gt = Absent, body_gte = Absent, body_contains = Absent, body_not_contains = Absent, body_starts_with = Absent, body_not_starts_with = Absent, body_ends_with = Absent, body_not_ends_with = Absent, views = Absent, views_not = Absent, views_in = Absent, views_not_in = Absent, views_lt = Absent, views_lte = Absent, views_gt = Absent, views_gte = Absent }
    in
    BlogPostScalarWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, teaser = optionals.teaser, teaser_not = optionals.teaser_not, teaser_in = optionals.teaser_in, teaser_not_in = optionals.teaser_not_in, teaser_lt = optionals.teaser_lt, teaser_lte = optionals.teaser_lte, teaser_gt = optionals.teaser_gt, teaser_gte = optionals.teaser_gte, teaser_contains = optionals.teaser_contains, teaser_not_contains = optionals.teaser_not_contains, teaser_starts_with = optionals.teaser_starts_with, teaser_not_starts_with = optionals.teaser_not_starts_with, teaser_ends_with = optionals.teaser_ends_with, teaser_not_ends_with = optionals.teaser_not_ends_with, body = optionals.body, body_not = optionals.body_not, body_in = optionals.body_in, body_not_in = optionals.body_not_in, body_lt = optionals.body_lt, body_lte = optionals.body_lte, body_gt = optionals.body_gt, body_gte = optionals.body_gte, body_contains = optionals.body_contains, body_not_contains = optionals.body_not_contains, body_starts_with = optionals.body_starts_with, body_not_starts_with = optionals.body_not_starts_with, body_ends_with = optionals.body_ends_with, body_not_ends_with = optionals.body_not_ends_with, views = optionals.views, views_not = optionals.views_not, views_in = optionals.views_in, views_not_in = optionals.views_not_in, views_lt = optionals.views_lt, views_lte = optionals.views_lte, views_gt = optionals.views_gt, views_gte = optionals.views_gte }


type alias BlogPostScalarWhereInputOptionalFields =
    { and : OptionalArgument (List BlogPostScalarWhereInput)
    , or : OptionalArgument (List BlogPostScalarWhereInput)
    , not : OptionalArgument (List BlogPostScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    }


{-| Type alias for the `BlogPostScalarWhereInput` attributes. Note that this type
needs to use the `BlogPostScalarWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostScalarWhereInputRaw =
    { and : OptionalArgument (List BlogPostScalarWhereInput)
    , or : OptionalArgument (List BlogPostScalarWhereInput)
    , not : OptionalArgument (List BlogPostScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    }


{-| Type for the BlogPostScalarWhereInput input object.
-}
type BlogPostScalarWhereInput
    = BlogPostScalarWhereInput BlogPostScalarWhereInputRaw


{-| Encode a BlogPostScalarWhereInput into a value that can be used as an argument.
-}
encodeBlogPostScalarWhereInput : BlogPostScalarWhereInput -> Value
encodeBlogPostScalarWhereInput (BlogPostScalarWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "teaser_not", Encode.string |> Encode.optional input.teaser_not ), ( "teaser_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_in ), ( "teaser_not_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_not_in ), ( "teaser_lt", Encode.string |> Encode.optional input.teaser_lt ), ( "teaser_lte", Encode.string |> Encode.optional input.teaser_lte ), ( "teaser_gt", Encode.string |> Encode.optional input.teaser_gt ), ( "teaser_gte", Encode.string |> Encode.optional input.teaser_gte ), ( "teaser_contains", Encode.string |> Encode.optional input.teaser_contains ), ( "teaser_not_contains", Encode.string |> Encode.optional input.teaser_not_contains ), ( "teaser_starts_with", Encode.string |> Encode.optional input.teaser_starts_with ), ( "teaser_not_starts_with", Encode.string |> Encode.optional input.teaser_not_starts_with ), ( "teaser_ends_with", Encode.string |> Encode.optional input.teaser_ends_with ), ( "teaser_not_ends_with", Encode.string |> Encode.optional input.teaser_not_ends_with ), ( "body", Encode.string |> Encode.optional input.body ), ( "body_not", Encode.string |> Encode.optional input.body_not ), ( "body_in", (Encode.string |> Encode.list) |> Encode.optional input.body_in ), ( "body_not_in", (Encode.string |> Encode.list) |> Encode.optional input.body_not_in ), ( "body_lt", Encode.string |> Encode.optional input.body_lt ), ( "body_lte", Encode.string |> Encode.optional input.body_lte ), ( "body_gt", Encode.string |> Encode.optional input.body_gt ), ( "body_gte", Encode.string |> Encode.optional input.body_gte ), ( "body_contains", Encode.string |> Encode.optional input.body_contains ), ( "body_not_contains", Encode.string |> Encode.optional input.body_not_contains ), ( "body_starts_with", Encode.string |> Encode.optional input.body_starts_with ), ( "body_not_starts_with", Encode.string |> Encode.optional input.body_not_starts_with ), ( "body_ends_with", Encode.string |> Encode.optional input.body_ends_with ), ( "body_not_ends_with", Encode.string |> Encode.optional input.body_not_ends_with ), ( "views", Encode.int |> Encode.optional input.views ), ( "views_not", Encode.int |> Encode.optional input.views_not ), ( "views_in", (Encode.int |> Encode.list) |> Encode.optional input.views_in ), ( "views_not_in", (Encode.int |> Encode.list) |> Encode.optional input.views_not_in ), ( "views_lt", Encode.int |> Encode.optional input.views_lt ), ( "views_lte", Encode.int |> Encode.optional input.views_lte ), ( "views_gt", Encode.int |> Encode.optional input.views_gt ), ( "views_gte", Encode.int |> Encode.optional input.views_gte ) ]


buildBlogPostSubscriptionWhereInput : (BlogPostSubscriptionWhereInputOptionalFields -> BlogPostSubscriptionWhereInputOptionalFields) -> BlogPostSubscriptionWhereInput
buildBlogPostSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    BlogPostSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias BlogPostSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , or : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , not : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument BlogPostWhereInput
    }


{-| Type alias for the `BlogPostSubscriptionWhereInput` attributes. Note that this type
needs to use the `BlogPostSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostSubscriptionWhereInputRaw =
    { and : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , or : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , not : OptionalArgument (List BlogPostSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument BlogPostWhereInput
    }


{-| Type for the BlogPostSubscriptionWhereInput input object.
-}
type BlogPostSubscriptionWhereInput
    = BlogPostSubscriptionWhereInput BlogPostSubscriptionWhereInputRaw


{-| Encode a BlogPostSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeBlogPostSubscriptionWhereInput : BlogPostSubscriptionWhereInput -> Value
encodeBlogPostSubscriptionWhereInput (BlogPostSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeBlogPostSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeBlogPostSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeBlogPostSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeBlogPostWhereInput |> Encode.optional input.node ) ]


buildBlogPostUpdateInput : (BlogPostUpdateInputOptionalFields -> BlogPostUpdateInputOptionalFields) -> BlogPostUpdateInput
buildBlogPostUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent, picture = Absent }
    in
    BlogPostUpdateInput { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags, picture = optionals.picture }


type alias BlogPostUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureBlogPostInput
    }


{-| Type alias for the `BlogPostUpdateInput` attributes. Note that this type
needs to use the `BlogPostUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostUpdateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureBlogPostInput
    }


{-| Type for the BlogPostUpdateInput input object.
-}
type BlogPostUpdateInput
    = BlogPostUpdateInput BlogPostUpdateInputRaw


{-| Encode a BlogPostUpdateInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateInput : BlogPostUpdateInput -> Value
encodeBlogPostUpdateInput (BlogPostUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetUpdateOneWithoutPictureBlogPostInput |> Encode.optional input.picture ) ]


buildBlogPostUpdateManyDataInput : (BlogPostUpdateManyDataInputOptionalFields -> BlogPostUpdateManyDataInputOptionalFields) -> BlogPostUpdateManyDataInput
buildBlogPostUpdateManyDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostUpdateManyDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Type for the BlogPostUpdateManyDataInput input object.
-}
type alias BlogPostUpdateManyDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Encode a BlogPostUpdateManyDataInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyDataInput : BlogPostUpdateManyDataInput -> Value
encodeBlogPostUpdateManyDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostUpdateManyMutationInput : (BlogPostUpdateManyMutationInputOptionalFields -> BlogPostUpdateManyMutationInputOptionalFields) -> BlogPostUpdateManyMutationInput
buildBlogPostUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Type for the BlogPostUpdateManyMutationInput input object.
-}
type alias BlogPostUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Encode a BlogPostUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyMutationInput : BlogPostUpdateManyMutationInput -> Value
encodeBlogPostUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostUpdateManyWithWhereNestedInput : BlogPostUpdateManyWithWhereNestedInputRequiredFields -> BlogPostUpdateManyWithWhereNestedInput
buildBlogPostUpdateManyWithWhereNestedInput required =
    BlogPostUpdateManyWithWhereNestedInput { where_ = required.where_, data = required.data }


type alias BlogPostUpdateManyWithWhereNestedInputRequiredFields =
    { where_ : BlogPostScalarWhereInput
    , data : BlogPostUpdateManyDataInput
    }


{-| Type alias for the `BlogPostUpdateManyWithWhereNestedInput` attributes. Note that this type
needs to use the `BlogPostUpdateManyWithWhereNestedInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostUpdateManyWithWhereNestedInputRaw =
    { where_ : BlogPostScalarWhereInput
    , data : BlogPostUpdateManyDataInput
    }


{-| Type for the BlogPostUpdateManyWithWhereNestedInput input object.
-}
type BlogPostUpdateManyWithWhereNestedInput
    = BlogPostUpdateManyWithWhereNestedInput BlogPostUpdateManyWithWhereNestedInputRaw


{-| Encode a BlogPostUpdateManyWithWhereNestedInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyWithWhereNestedInput : BlogPostUpdateManyWithWhereNestedInput -> Value
encodeBlogPostUpdateManyWithWhereNestedInput (BlogPostUpdateManyWithWhereNestedInput input) =
    Encode.maybeObject
        [ ( "where", encodeBlogPostScalarWhereInput input.where_ |> Just ), ( "data", encodeBlogPostUpdateManyDataInput input.data |> Just ) ]


buildBlogPostUpdateManyWithoutPictureInput : (BlogPostUpdateManyWithoutPictureInputOptionalFields -> BlogPostUpdateManyWithoutPictureInputOptionalFields) -> BlogPostUpdateManyWithoutPictureInput
buildBlogPostUpdateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, set = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    BlogPostUpdateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect, set = optionals.set, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias BlogPostUpdateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    , set : OptionalArgument (List BlogPostWhereUniqueInput)
    , disconnect : OptionalArgument (List BlogPostWhereUniqueInput)
    , delete : OptionalArgument (List BlogPostWhereUniqueInput)
    , update : OptionalArgument (List BlogPostUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List BlogPostUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List BlogPostScalarWhereInput)
    , upsert : OptionalArgument (List BlogPostUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type alias for the `BlogPostUpdateManyWithoutPictureInput` attributes. Note that this type
needs to use the `BlogPostUpdateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostUpdateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List BlogPostCreateWithoutPictureInput)
    , connect : OptionalArgument (List BlogPostWhereUniqueInput)
    , set : OptionalArgument (List BlogPostWhereUniqueInput)
    , disconnect : OptionalArgument (List BlogPostWhereUniqueInput)
    , delete : OptionalArgument (List BlogPostWhereUniqueInput)
    , update : OptionalArgument (List BlogPostUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List BlogPostUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List BlogPostScalarWhereInput)
    , upsert : OptionalArgument (List BlogPostUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type for the BlogPostUpdateManyWithoutPictureInput input object.
-}
type BlogPostUpdateManyWithoutPictureInput
    = BlogPostUpdateManyWithoutPictureInput BlogPostUpdateManyWithoutPictureInputRaw


{-| Encode a BlogPostUpdateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateManyWithoutPictureInput : BlogPostUpdateManyWithoutPictureInput -> Value
encodeBlogPostUpdateManyWithoutPictureInput (BlogPostUpdateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeBlogPostCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "set", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.set ), ( "disconnect", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeBlogPostWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeBlogPostUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeBlogPostScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildBlogPostUpdateWithWhereUniqueWithoutPictureInput : BlogPostUpdateWithWhereUniqueWithoutPictureInputRequiredFields -> BlogPostUpdateWithWhereUniqueWithoutPictureInput
buildBlogPostUpdateWithWhereUniqueWithoutPictureInput required =
    { where_ = required.where_, data = required.data }


type alias BlogPostUpdateWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : BlogPostWhereUniqueInput
    , data : BlogPostUpdateWithoutPictureDataInput
    }


{-| Type for the BlogPostUpdateWithWhereUniqueWithoutPictureInput input object.
-}
type alias BlogPostUpdateWithWhereUniqueWithoutPictureInput =
    { where_ : BlogPostWhereUniqueInput
    , data : BlogPostUpdateWithoutPictureDataInput
    }


{-| Encode a BlogPostUpdateWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput : BlogPostUpdateWithWhereUniqueWithoutPictureInput -> Value
encodeBlogPostUpdateWithWhereUniqueWithoutPictureInput input =
    Encode.maybeObject
        [ ( "where", encodeBlogPostWhereUniqueInput input.where_ |> Just ), ( "data", encodeBlogPostUpdateWithoutPictureDataInput input.data |> Just ) ]


buildBlogPostUpdateWithoutPictureDataInput : (BlogPostUpdateWithoutPictureDataInputOptionalFields -> BlogPostUpdateWithoutPictureDataInputOptionalFields) -> BlogPostUpdateWithoutPictureDataInput
buildBlogPostUpdateWithoutPictureDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, title = Absent, teaser = Absent, body = Absent, views = Absent, tags = Absent }
    in
    { status = optionals.status, title = optionals.title, teaser = optionals.teaser, body = optionals.body, views = optionals.views, tags = optionals.tags }


type alias BlogPostUpdateWithoutPictureDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Type for the BlogPostUpdateWithoutPictureDataInput input object.
-}
type alias BlogPostUpdateWithoutPictureDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , title : OptionalArgument String
    , teaser : OptionalArgument String
    , body : OptionalArgument String
    , views : OptionalArgument Int
    , tags : OptionalArgument BlogPostUpdatetagsInput
    }


{-| Encode a BlogPostUpdateWithoutPictureDataInput into a value that can be used as an argument.
-}
encodeBlogPostUpdateWithoutPictureDataInput : BlogPostUpdateWithoutPictureDataInput -> Value
encodeBlogPostUpdateWithoutPictureDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "title", Encode.string |> Encode.optional input.title ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "body", Encode.string |> Encode.optional input.body ), ( "views", Encode.int |> Encode.optional input.views ), ( "tags", encodeBlogPostUpdatetagsInput |> Encode.optional input.tags ) ]


buildBlogPostUpdatetagsInput : (BlogPostUpdatetagsInputOptionalFields -> BlogPostUpdatetagsInputOptionalFields) -> BlogPostUpdatetagsInput
buildBlogPostUpdatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias BlogPostUpdatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the BlogPostUpdatetagsInput input object.
-}
type alias BlogPostUpdatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a BlogPostUpdatetagsInput into a value that can be used as an argument.
-}
encodeBlogPostUpdatetagsInput : BlogPostUpdatetagsInput -> Value
encodeBlogPostUpdatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildBlogPostUpsertWithWhereUniqueWithoutPictureInput : BlogPostUpsertWithWhereUniqueWithoutPictureInputRequiredFields -> BlogPostUpsertWithWhereUniqueWithoutPictureInput
buildBlogPostUpsertWithWhereUniqueWithoutPictureInput required =
    { where_ = required.where_, update = required.update, create = required.create }


type alias BlogPostUpsertWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : BlogPostWhereUniqueInput
    , update : BlogPostUpdateWithoutPictureDataInput
    , create : BlogPostCreateWithoutPictureInput
    }


{-| Type for the BlogPostUpsertWithWhereUniqueWithoutPictureInput input object.
-}
type alias BlogPostUpsertWithWhereUniqueWithoutPictureInput =
    { where_ : BlogPostWhereUniqueInput
    , update : BlogPostUpdateWithoutPictureDataInput
    , create : BlogPostCreateWithoutPictureInput
    }


{-| Encode a BlogPostUpsertWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput : BlogPostUpsertWithWhereUniqueWithoutPictureInput -> Value
encodeBlogPostUpsertWithWhereUniqueWithoutPictureInput input =
    Encode.maybeObject
        [ ( "where", encodeBlogPostWhereUniqueInput input.where_ |> Just ), ( "update", encodeBlogPostUpdateWithoutPictureDataInput input.update |> Just ), ( "create", encodeBlogPostCreateWithoutPictureInput input.create |> Just ) ]


buildBlogPostWhereInput : (BlogPostWhereInputOptionalFields -> BlogPostWhereInputOptionalFields) -> BlogPostWhereInput
buildBlogPostWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, title = Absent, title_not = Absent, title_in = Absent, title_not_in = Absent, title_lt = Absent, title_lte = Absent, title_gt = Absent, title_gte = Absent, title_contains = Absent, title_not_contains = Absent, title_starts_with = Absent, title_not_starts_with = Absent, title_ends_with = Absent, title_not_ends_with = Absent, teaser = Absent, teaser_not = Absent, teaser_in = Absent, teaser_not_in = Absent, teaser_lt = Absent, teaser_lte = Absent, teaser_gt = Absent, teaser_gte = Absent, teaser_contains = Absent, teaser_not_contains = Absent, teaser_starts_with = Absent, teaser_not_starts_with = Absent, teaser_ends_with = Absent, teaser_not_ends_with = Absent, body = Absent, body_not = Absent, body_in = Absent, body_not_in = Absent, body_lt = Absent, body_lte = Absent, body_gt = Absent, body_gte = Absent, body_contains = Absent, body_not_contains = Absent, body_starts_with = Absent, body_not_starts_with = Absent, body_ends_with = Absent, body_not_ends_with = Absent, views = Absent, views_not = Absent, views_in = Absent, views_not_in = Absent, views_lt = Absent, views_lte = Absent, views_gt = Absent, views_gte = Absent, picture = Absent }
    in
    BlogPostWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, title = optionals.title, title_not = optionals.title_not, title_in = optionals.title_in, title_not_in = optionals.title_not_in, title_lt = optionals.title_lt, title_lte = optionals.title_lte, title_gt = optionals.title_gt, title_gte = optionals.title_gte, title_contains = optionals.title_contains, title_not_contains = optionals.title_not_contains, title_starts_with = optionals.title_starts_with, title_not_starts_with = optionals.title_not_starts_with, title_ends_with = optionals.title_ends_with, title_not_ends_with = optionals.title_not_ends_with, teaser = optionals.teaser, teaser_not = optionals.teaser_not, teaser_in = optionals.teaser_in, teaser_not_in = optionals.teaser_not_in, teaser_lt = optionals.teaser_lt, teaser_lte = optionals.teaser_lte, teaser_gt = optionals.teaser_gt, teaser_gte = optionals.teaser_gte, teaser_contains = optionals.teaser_contains, teaser_not_contains = optionals.teaser_not_contains, teaser_starts_with = optionals.teaser_starts_with, teaser_not_starts_with = optionals.teaser_not_starts_with, teaser_ends_with = optionals.teaser_ends_with, teaser_not_ends_with = optionals.teaser_not_ends_with, body = optionals.body, body_not = optionals.body_not, body_in = optionals.body_in, body_not_in = optionals.body_not_in, body_lt = optionals.body_lt, body_lte = optionals.body_lte, body_gt = optionals.body_gt, body_gte = optionals.body_gte, body_contains = optionals.body_contains, body_not_contains = optionals.body_not_contains, body_starts_with = optionals.body_starts_with, body_not_starts_with = optionals.body_not_starts_with, body_ends_with = optionals.body_ends_with, body_not_ends_with = optionals.body_not_ends_with, views = optionals.views, views_not = optionals.views_not, views_in = optionals.views_in, views_not_in = optionals.views_not_in, views_lt = optionals.views_lt, views_lte = optionals.views_lte, views_gt = optionals.views_gt, views_gte = optionals.views_gte, picture = optionals.picture }


type alias BlogPostWhereInputOptionalFields =
    { and : OptionalArgument (List BlogPostWhereInput)
    , or : OptionalArgument (List BlogPostWhereInput)
    , not : OptionalArgument (List BlogPostWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `BlogPostWhereInput` attributes. Note that this type
needs to use the `BlogPostWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias BlogPostWhereInputRaw =
    { and : OptionalArgument (List BlogPostWhereInput)
    , or : OptionalArgument (List BlogPostWhereInput)
    , not : OptionalArgument (List BlogPostWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , title : OptionalArgument String
    , title_not : OptionalArgument String
    , title_in : OptionalArgument (List String)
    , title_not_in : OptionalArgument (List String)
    , title_lt : OptionalArgument String
    , title_lte : OptionalArgument String
    , title_gt : OptionalArgument String
    , title_gte : OptionalArgument String
    , title_contains : OptionalArgument String
    , title_not_contains : OptionalArgument String
    , title_starts_with : OptionalArgument String
    , title_not_starts_with : OptionalArgument String
    , title_ends_with : OptionalArgument String
    , title_not_ends_with : OptionalArgument String
    , teaser : OptionalArgument String
    , teaser_not : OptionalArgument String
    , teaser_in : OptionalArgument (List String)
    , teaser_not_in : OptionalArgument (List String)
    , teaser_lt : OptionalArgument String
    , teaser_lte : OptionalArgument String
    , teaser_gt : OptionalArgument String
    , teaser_gte : OptionalArgument String
    , teaser_contains : OptionalArgument String
    , teaser_not_contains : OptionalArgument String
    , teaser_starts_with : OptionalArgument String
    , teaser_not_starts_with : OptionalArgument String
    , teaser_ends_with : OptionalArgument String
    , teaser_not_ends_with : OptionalArgument String
    , body : OptionalArgument String
    , body_not : OptionalArgument String
    , body_in : OptionalArgument (List String)
    , body_not_in : OptionalArgument (List String)
    , body_lt : OptionalArgument String
    , body_lte : OptionalArgument String
    , body_gt : OptionalArgument String
    , body_gte : OptionalArgument String
    , body_contains : OptionalArgument String
    , body_not_contains : OptionalArgument String
    , body_starts_with : OptionalArgument String
    , body_not_starts_with : OptionalArgument String
    , body_ends_with : OptionalArgument String
    , body_not_ends_with : OptionalArgument String
    , views : OptionalArgument Int
    , views_not : OptionalArgument Int
    , views_in : OptionalArgument (List Int)
    , views_not_in : OptionalArgument (List Int)
    , views_lt : OptionalArgument Int
    , views_lte : OptionalArgument Int
    , views_gt : OptionalArgument Int
    , views_gte : OptionalArgument Int
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type for the BlogPostWhereInput input object.
-}
type BlogPostWhereInput
    = BlogPostWhereInput BlogPostWhereInputRaw


{-| Encode a BlogPostWhereInput into a value that can be used as an argument.
-}
encodeBlogPostWhereInput : BlogPostWhereInput -> Value
encodeBlogPostWhereInput (BlogPostWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeBlogPostWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeBlogPostWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeBlogPostWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "title", Encode.string |> Encode.optional input.title ), ( "title_not", Encode.string |> Encode.optional input.title_not ), ( "title_in", (Encode.string |> Encode.list) |> Encode.optional input.title_in ), ( "title_not_in", (Encode.string |> Encode.list) |> Encode.optional input.title_not_in ), ( "title_lt", Encode.string |> Encode.optional input.title_lt ), ( "title_lte", Encode.string |> Encode.optional input.title_lte ), ( "title_gt", Encode.string |> Encode.optional input.title_gt ), ( "title_gte", Encode.string |> Encode.optional input.title_gte ), ( "title_contains", Encode.string |> Encode.optional input.title_contains ), ( "title_not_contains", Encode.string |> Encode.optional input.title_not_contains ), ( "title_starts_with", Encode.string |> Encode.optional input.title_starts_with ), ( "title_not_starts_with", Encode.string |> Encode.optional input.title_not_starts_with ), ( "title_ends_with", Encode.string |> Encode.optional input.title_ends_with ), ( "title_not_ends_with", Encode.string |> Encode.optional input.title_not_ends_with ), ( "teaser", Encode.string |> Encode.optional input.teaser ), ( "teaser_not", Encode.string |> Encode.optional input.teaser_not ), ( "teaser_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_in ), ( "teaser_not_in", (Encode.string |> Encode.list) |> Encode.optional input.teaser_not_in ), ( "teaser_lt", Encode.string |> Encode.optional input.teaser_lt ), ( "teaser_lte", Encode.string |> Encode.optional input.teaser_lte ), ( "teaser_gt", Encode.string |> Encode.optional input.teaser_gt ), ( "teaser_gte", Encode.string |> Encode.optional input.teaser_gte ), ( "teaser_contains", Encode.string |> Encode.optional input.teaser_contains ), ( "teaser_not_contains", Encode.string |> Encode.optional input.teaser_not_contains ), ( "teaser_starts_with", Encode.string |> Encode.optional input.teaser_starts_with ), ( "teaser_not_starts_with", Encode.string |> Encode.optional input.teaser_not_starts_with ), ( "teaser_ends_with", Encode.string |> Encode.optional input.teaser_ends_with ), ( "teaser_not_ends_with", Encode.string |> Encode.optional input.teaser_not_ends_with ), ( "body", Encode.string |> Encode.optional input.body ), ( "body_not", Encode.string |> Encode.optional input.body_not ), ( "body_in", (Encode.string |> Encode.list) |> Encode.optional input.body_in ), ( "body_not_in", (Encode.string |> Encode.list) |> Encode.optional input.body_not_in ), ( "body_lt", Encode.string |> Encode.optional input.body_lt ), ( "body_lte", Encode.string |> Encode.optional input.body_lte ), ( "body_gt", Encode.string |> Encode.optional input.body_gt ), ( "body_gte", Encode.string |> Encode.optional input.body_gte ), ( "body_contains", Encode.string |> Encode.optional input.body_contains ), ( "body_not_contains", Encode.string |> Encode.optional input.body_not_contains ), ( "body_starts_with", Encode.string |> Encode.optional input.body_starts_with ), ( "body_not_starts_with", Encode.string |> Encode.optional input.body_not_starts_with ), ( "body_ends_with", Encode.string |> Encode.optional input.body_ends_with ), ( "body_not_ends_with", Encode.string |> Encode.optional input.body_not_ends_with ), ( "views", Encode.int |> Encode.optional input.views ), ( "views_not", Encode.int |> Encode.optional input.views_not ), ( "views_in", (Encode.int |> Encode.list) |> Encode.optional input.views_in ), ( "views_not_in", (Encode.int |> Encode.list) |> Encode.optional input.views_not_in ), ( "views_lt", Encode.int |> Encode.optional input.views_lt ), ( "views_lte", Encode.int |> Encode.optional input.views_lte ), ( "views_gt", Encode.int |> Encode.optional input.views_gt ), ( "views_gte", Encode.int |> Encode.optional input.views_gte ), ( "picture", encodeAssetWhereInput |> Encode.optional input.picture ) ]


buildBlogPostWhereUniqueInput : (BlogPostWhereUniqueInputOptionalFields -> BlogPostWhereUniqueInputOptionalFields) -> BlogPostWhereUniqueInput
buildBlogPostWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias BlogPostWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the BlogPostWhereUniqueInput input object.
-}
type alias BlogPostWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a BlogPostWhereUniqueInput into a value that can be used as an argument.
-}
encodeBlogPostWhereUniqueInput : BlogPostWhereUniqueInput -> Value
encodeBlogPostWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildColorSubscriptionWhereInput : (ColorSubscriptionWhereInputOptionalFields -> ColorSubscriptionWhereInputOptionalFields) -> ColorSubscriptionWhereInput
buildColorSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ColorSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ColorSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ColorSubscriptionWhereInput)
    , or : OptionalArgument (List ColorSubscriptionWhereInput)
    , not : OptionalArgument (List ColorSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ColorWhereInput
    }


{-| Type alias for the `ColorSubscriptionWhereInput` attributes. Note that this type
needs to use the `ColorSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ColorSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ColorSubscriptionWhereInput)
    , or : OptionalArgument (List ColorSubscriptionWhereInput)
    , not : OptionalArgument (List ColorSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ColorWhereInput
    }


{-| Type for the ColorSubscriptionWhereInput input object.
-}
type ColorSubscriptionWhereInput
    = ColorSubscriptionWhereInput ColorSubscriptionWhereInputRaw


{-| Encode a ColorSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeColorSubscriptionWhereInput : ColorSubscriptionWhereInput -> Value
encodeColorSubscriptionWhereInput (ColorSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeColorSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeColorWhereInput |> Encode.optional input.node ) ]


buildColorWhereInput : (ColorWhereInputOptionalFields -> ColorWhereInputOptionalFields) -> ColorWhereInput
buildColorWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent }
    in
    ColorWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte }


type alias ColorWhereInputOptionalFields =
    { and : OptionalArgument (List ColorWhereInput)
    , or : OptionalArgument (List ColorWhereInput)
    , not : OptionalArgument (List ColorWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type alias for the `ColorWhereInput` attributes. Note that this type
needs to use the `ColorWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ColorWhereInputRaw =
    { and : OptionalArgument (List ColorWhereInput)
    , or : OptionalArgument (List ColorWhereInput)
    , not : OptionalArgument (List ColorWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type for the ColorWhereInput input object.
-}
type ColorWhereInput
    = ColorWhereInput ColorWhereInputRaw


{-| Encode a ColorWhereInput into a value that can be used as an argument.
-}
encodeColorWhereInput : ColorWhereInput -> Value
encodeColorWhereInput (ColorWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeColorWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ) ]


buildColorWhereUniqueInput : (ColorWhereUniqueInputOptionalFields -> ColorWhereUniqueInputOptionalFields) -> ColorWhereUniqueInput
buildColorWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ColorWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the ColorWhereUniqueInput input object.
-}
type alias ColorWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a ColorWhereUniqueInput into a value that can be used as an argument.
-}
encodeColorWhereUniqueInput : ColorWhereUniqueInput -> Value
encodeColorWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildContactCreateInput : ContactCreateInputRequiredFields -> (ContactCreateInputOptionalFields -> ContactCreateInputOptionalFields) -> ContactCreateInput
buildContactCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, color = Absent, hue = Absent }
    in
    { status = optionals.status, name = required.name, color = optionals.color, href = required.href, action = required.action, handle = required.handle, hue = optionals.hue }


type alias ContactCreateInputRequiredFields =
    { name : String
    , href : String
    , action : String
    , handle : String
    }


type alias ContactCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , color : OptionalArgument String
    , hue : OptionalArgument Float
    }


{-| Type for the ContactCreateInput input object.
-}
type alias ContactCreateInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , color : OptionalArgument String
    , href : String
    , action : String
    , handle : String
    , hue : OptionalArgument Float
    }


{-| Encode a ContactCreateInput into a value that can be used as an argument.
-}
encodeContactCreateInput : ContactCreateInput -> Value
encodeContactCreateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "color", Encode.string |> Encode.optional input.color ), ( "href", Encode.string input.href |> Just ), ( "action", Encode.string input.action |> Just ), ( "handle", Encode.string input.handle |> Just ), ( "hue", Encode.float |> Encode.optional input.hue ) ]


buildContactSubscriptionWhereInput : (ContactSubscriptionWhereInputOptionalFields -> ContactSubscriptionWhereInputOptionalFields) -> ContactSubscriptionWhereInput
buildContactSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ContactSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ContactSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ContactSubscriptionWhereInput)
    , or : OptionalArgument (List ContactSubscriptionWhereInput)
    , not : OptionalArgument (List ContactSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ContactWhereInput
    }


{-| Type alias for the `ContactSubscriptionWhereInput` attributes. Note that this type
needs to use the `ContactSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ContactSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ContactSubscriptionWhereInput)
    , or : OptionalArgument (List ContactSubscriptionWhereInput)
    , not : OptionalArgument (List ContactSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ContactWhereInput
    }


{-| Type for the ContactSubscriptionWhereInput input object.
-}
type ContactSubscriptionWhereInput
    = ContactSubscriptionWhereInput ContactSubscriptionWhereInputRaw


{-| Encode a ContactSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeContactSubscriptionWhereInput : ContactSubscriptionWhereInput -> Value
encodeContactSubscriptionWhereInput (ContactSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeContactSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeContactSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeContactSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeContactWhereInput |> Encode.optional input.node ) ]


buildContactUpdateInput : (ContactUpdateInputOptionalFields -> ContactUpdateInputOptionalFields) -> ContactUpdateInput
buildContactUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, color = Absent, href = Absent, action = Absent, handle = Absent, hue = Absent }
    in
    { status = optionals.status, name = optionals.name, color = optionals.color, href = optionals.href, action = optionals.action, handle = optionals.handle, hue = optionals.hue }


type alias ContactUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    , hue : OptionalArgument Float
    }


{-| Type for the ContactUpdateInput input object.
-}
type alias ContactUpdateInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    , hue : OptionalArgument Float
    }


{-| Encode a ContactUpdateInput into a value that can be used as an argument.
-}
encodeContactUpdateInput : ContactUpdateInput -> Value
encodeContactUpdateInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "color", Encode.string |> Encode.optional input.color ), ( "href", Encode.string |> Encode.optional input.href ), ( "action", Encode.string |> Encode.optional input.action ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "hue", Encode.float |> Encode.optional input.hue ) ]


buildContactUpdateManyMutationInput : (ContactUpdateManyMutationInputOptionalFields -> ContactUpdateManyMutationInputOptionalFields) -> ContactUpdateManyMutationInput
buildContactUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, color = Absent, href = Absent, action = Absent, handle = Absent, hue = Absent }
    in
    { status = optionals.status, name = optionals.name, color = optionals.color, href = optionals.href, action = optionals.action, handle = optionals.handle, hue = optionals.hue }


type alias ContactUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    , hue : OptionalArgument Float
    }


{-| Type for the ContactUpdateManyMutationInput input object.
-}
type alias ContactUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , color : OptionalArgument String
    , href : OptionalArgument String
    , action : OptionalArgument String
    , handle : OptionalArgument String
    , hue : OptionalArgument Float
    }


{-| Encode a ContactUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeContactUpdateManyMutationInput : ContactUpdateManyMutationInput -> Value
encodeContactUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "color", Encode.string |> Encode.optional input.color ), ( "href", Encode.string |> Encode.optional input.href ), ( "action", Encode.string |> Encode.optional input.action ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "hue", Encode.float |> Encode.optional input.hue ) ]


buildContactWhereInput : (ContactWhereInputOptionalFields -> ContactWhereInputOptionalFields) -> ContactWhereInput
buildContactWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, color = Absent, color_not = Absent, color_in = Absent, color_not_in = Absent, color_lt = Absent, color_lte = Absent, color_gt = Absent, color_gte = Absent, color_contains = Absent, color_not_contains = Absent, color_starts_with = Absent, color_not_starts_with = Absent, color_ends_with = Absent, color_not_ends_with = Absent, href = Absent, href_not = Absent, href_in = Absent, href_not_in = Absent, href_lt = Absent, href_lte = Absent, href_gt = Absent, href_gte = Absent, href_contains = Absent, href_not_contains = Absent, href_starts_with = Absent, href_not_starts_with = Absent, href_ends_with = Absent, href_not_ends_with = Absent, action = Absent, action_not = Absent, action_in = Absent, action_not_in = Absent, action_lt = Absent, action_lte = Absent, action_gt = Absent, action_gte = Absent, action_contains = Absent, action_not_contains = Absent, action_starts_with = Absent, action_not_starts_with = Absent, action_ends_with = Absent, action_not_ends_with = Absent, handle = Absent, handle_not = Absent, handle_in = Absent, handle_not_in = Absent, handle_lt = Absent, handle_lte = Absent, handle_gt = Absent, handle_gte = Absent, handle_contains = Absent, handle_not_contains = Absent, handle_starts_with = Absent, handle_not_starts_with = Absent, handle_ends_with = Absent, handle_not_ends_with = Absent, hue = Absent, hue_not = Absent, hue_in = Absent, hue_not_in = Absent, hue_lt = Absent, hue_lte = Absent, hue_gt = Absent, hue_gte = Absent }
    in
    ContactWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, color = optionals.color, color_not = optionals.color_not, color_in = optionals.color_in, color_not_in = optionals.color_not_in, color_lt = optionals.color_lt, color_lte = optionals.color_lte, color_gt = optionals.color_gt, color_gte = optionals.color_gte, color_contains = optionals.color_contains, color_not_contains = optionals.color_not_contains, color_starts_with = optionals.color_starts_with, color_not_starts_with = optionals.color_not_starts_with, color_ends_with = optionals.color_ends_with, color_not_ends_with = optionals.color_not_ends_with, href = optionals.href, href_not = optionals.href_not, href_in = optionals.href_in, href_not_in = optionals.href_not_in, href_lt = optionals.href_lt, href_lte = optionals.href_lte, href_gt = optionals.href_gt, href_gte = optionals.href_gte, href_contains = optionals.href_contains, href_not_contains = optionals.href_not_contains, href_starts_with = optionals.href_starts_with, href_not_starts_with = optionals.href_not_starts_with, href_ends_with = optionals.href_ends_with, href_not_ends_with = optionals.href_not_ends_with, action = optionals.action, action_not = optionals.action_not, action_in = optionals.action_in, action_not_in = optionals.action_not_in, action_lt = optionals.action_lt, action_lte = optionals.action_lte, action_gt = optionals.action_gt, action_gte = optionals.action_gte, action_contains = optionals.action_contains, action_not_contains = optionals.action_not_contains, action_starts_with = optionals.action_starts_with, action_not_starts_with = optionals.action_not_starts_with, action_ends_with = optionals.action_ends_with, action_not_ends_with = optionals.action_not_ends_with, handle = optionals.handle, handle_not = optionals.handle_not, handle_in = optionals.handle_in, handle_not_in = optionals.handle_not_in, handle_lt = optionals.handle_lt, handle_lte = optionals.handle_lte, handle_gt = optionals.handle_gt, handle_gte = optionals.handle_gte, handle_contains = optionals.handle_contains, handle_not_contains = optionals.handle_not_contains, handle_starts_with = optionals.handle_starts_with, handle_not_starts_with = optionals.handle_not_starts_with, handle_ends_with = optionals.handle_ends_with, handle_not_ends_with = optionals.handle_not_ends_with, hue = optionals.hue, hue_not = optionals.hue_not, hue_in = optionals.hue_in, hue_not_in = optionals.hue_not_in, hue_lt = optionals.hue_lt, hue_lte = optionals.hue_lte, hue_gt = optionals.hue_gt, hue_gte = optionals.hue_gte }


type alias ContactWhereInputOptionalFields =
    { and : OptionalArgument (List ContactWhereInput)
    , or : OptionalArgument (List ContactWhereInput)
    , not : OptionalArgument (List ContactWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , color : OptionalArgument String
    , color_not : OptionalArgument String
    , color_in : OptionalArgument (List String)
    , color_not_in : OptionalArgument (List String)
    , color_lt : OptionalArgument String
    , color_lte : OptionalArgument String
    , color_gt : OptionalArgument String
    , color_gte : OptionalArgument String
    , color_contains : OptionalArgument String
    , color_not_contains : OptionalArgument String
    , color_starts_with : OptionalArgument String
    , color_not_starts_with : OptionalArgument String
    , color_ends_with : OptionalArgument String
    , color_not_ends_with : OptionalArgument String
    , href : OptionalArgument String
    , href_not : OptionalArgument String
    , href_in : OptionalArgument (List String)
    , href_not_in : OptionalArgument (List String)
    , href_lt : OptionalArgument String
    , href_lte : OptionalArgument String
    , href_gt : OptionalArgument String
    , href_gte : OptionalArgument String
    , href_contains : OptionalArgument String
    , href_not_contains : OptionalArgument String
    , href_starts_with : OptionalArgument String
    , href_not_starts_with : OptionalArgument String
    , href_ends_with : OptionalArgument String
    , href_not_ends_with : OptionalArgument String
    , action : OptionalArgument String
    , action_not : OptionalArgument String
    , action_in : OptionalArgument (List String)
    , action_not_in : OptionalArgument (List String)
    , action_lt : OptionalArgument String
    , action_lte : OptionalArgument String
    , action_gt : OptionalArgument String
    , action_gte : OptionalArgument String
    , action_contains : OptionalArgument String
    , action_not_contains : OptionalArgument String
    , action_starts_with : OptionalArgument String
    , action_not_starts_with : OptionalArgument String
    , action_ends_with : OptionalArgument String
    , action_not_ends_with : OptionalArgument String
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , hue : OptionalArgument Float
    , hue_not : OptionalArgument Float
    , hue_in : OptionalArgument (List Float)
    , hue_not_in : OptionalArgument (List Float)
    , hue_lt : OptionalArgument Float
    , hue_lte : OptionalArgument Float
    , hue_gt : OptionalArgument Float
    , hue_gte : OptionalArgument Float
    }


{-| Type alias for the `ContactWhereInput` attributes. Note that this type
needs to use the `ContactWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ContactWhereInputRaw =
    { and : OptionalArgument (List ContactWhereInput)
    , or : OptionalArgument (List ContactWhereInput)
    , not : OptionalArgument (List ContactWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , color : OptionalArgument String
    , color_not : OptionalArgument String
    , color_in : OptionalArgument (List String)
    , color_not_in : OptionalArgument (List String)
    , color_lt : OptionalArgument String
    , color_lte : OptionalArgument String
    , color_gt : OptionalArgument String
    , color_gte : OptionalArgument String
    , color_contains : OptionalArgument String
    , color_not_contains : OptionalArgument String
    , color_starts_with : OptionalArgument String
    , color_not_starts_with : OptionalArgument String
    , color_ends_with : OptionalArgument String
    , color_not_ends_with : OptionalArgument String
    , href : OptionalArgument String
    , href_not : OptionalArgument String
    , href_in : OptionalArgument (List String)
    , href_not_in : OptionalArgument (List String)
    , href_lt : OptionalArgument String
    , href_lte : OptionalArgument String
    , href_gt : OptionalArgument String
    , href_gte : OptionalArgument String
    , href_contains : OptionalArgument String
    , href_not_contains : OptionalArgument String
    , href_starts_with : OptionalArgument String
    , href_not_starts_with : OptionalArgument String
    , href_ends_with : OptionalArgument String
    , href_not_ends_with : OptionalArgument String
    , action : OptionalArgument String
    , action_not : OptionalArgument String
    , action_in : OptionalArgument (List String)
    , action_not_in : OptionalArgument (List String)
    , action_lt : OptionalArgument String
    , action_lte : OptionalArgument String
    , action_gt : OptionalArgument String
    , action_gte : OptionalArgument String
    , action_contains : OptionalArgument String
    , action_not_contains : OptionalArgument String
    , action_starts_with : OptionalArgument String
    , action_not_starts_with : OptionalArgument String
    , action_ends_with : OptionalArgument String
    , action_not_ends_with : OptionalArgument String
    , handle : OptionalArgument String
    , handle_not : OptionalArgument String
    , handle_in : OptionalArgument (List String)
    , handle_not_in : OptionalArgument (List String)
    , handle_lt : OptionalArgument String
    , handle_lte : OptionalArgument String
    , handle_gt : OptionalArgument String
    , handle_gte : OptionalArgument String
    , handle_contains : OptionalArgument String
    , handle_not_contains : OptionalArgument String
    , handle_starts_with : OptionalArgument String
    , handle_not_starts_with : OptionalArgument String
    , handle_ends_with : OptionalArgument String
    , handle_not_ends_with : OptionalArgument String
    , hue : OptionalArgument Float
    , hue_not : OptionalArgument Float
    , hue_in : OptionalArgument (List Float)
    , hue_not_in : OptionalArgument (List Float)
    , hue_lt : OptionalArgument Float
    , hue_lte : OptionalArgument Float
    , hue_gt : OptionalArgument Float
    , hue_gte : OptionalArgument Float
    }


{-| Type for the ContactWhereInput input object.
-}
type ContactWhereInput
    = ContactWhereInput ContactWhereInputRaw


{-| Encode a ContactWhereInput into a value that can be used as an argument.
-}
encodeContactWhereInput : ContactWhereInput -> Value
encodeContactWhereInput (ContactWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeContactWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeContactWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeContactWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "color", Encode.string |> Encode.optional input.color ), ( "color_not", Encode.string |> Encode.optional input.color_not ), ( "color_in", (Encode.string |> Encode.list) |> Encode.optional input.color_in ), ( "color_not_in", (Encode.string |> Encode.list) |> Encode.optional input.color_not_in ), ( "color_lt", Encode.string |> Encode.optional input.color_lt ), ( "color_lte", Encode.string |> Encode.optional input.color_lte ), ( "color_gt", Encode.string |> Encode.optional input.color_gt ), ( "color_gte", Encode.string |> Encode.optional input.color_gte ), ( "color_contains", Encode.string |> Encode.optional input.color_contains ), ( "color_not_contains", Encode.string |> Encode.optional input.color_not_contains ), ( "color_starts_with", Encode.string |> Encode.optional input.color_starts_with ), ( "color_not_starts_with", Encode.string |> Encode.optional input.color_not_starts_with ), ( "color_ends_with", Encode.string |> Encode.optional input.color_ends_with ), ( "color_not_ends_with", Encode.string |> Encode.optional input.color_not_ends_with ), ( "href", Encode.string |> Encode.optional input.href ), ( "href_not", Encode.string |> Encode.optional input.href_not ), ( "href_in", (Encode.string |> Encode.list) |> Encode.optional input.href_in ), ( "href_not_in", (Encode.string |> Encode.list) |> Encode.optional input.href_not_in ), ( "href_lt", Encode.string |> Encode.optional input.href_lt ), ( "href_lte", Encode.string |> Encode.optional input.href_lte ), ( "href_gt", Encode.string |> Encode.optional input.href_gt ), ( "href_gte", Encode.string |> Encode.optional input.href_gte ), ( "href_contains", Encode.string |> Encode.optional input.href_contains ), ( "href_not_contains", Encode.string |> Encode.optional input.href_not_contains ), ( "href_starts_with", Encode.string |> Encode.optional input.href_starts_with ), ( "href_not_starts_with", Encode.string |> Encode.optional input.href_not_starts_with ), ( "href_ends_with", Encode.string |> Encode.optional input.href_ends_with ), ( "href_not_ends_with", Encode.string |> Encode.optional input.href_not_ends_with ), ( "action", Encode.string |> Encode.optional input.action ), ( "action_not", Encode.string |> Encode.optional input.action_not ), ( "action_in", (Encode.string |> Encode.list) |> Encode.optional input.action_in ), ( "action_not_in", (Encode.string |> Encode.list) |> Encode.optional input.action_not_in ), ( "action_lt", Encode.string |> Encode.optional input.action_lt ), ( "action_lte", Encode.string |> Encode.optional input.action_lte ), ( "action_gt", Encode.string |> Encode.optional input.action_gt ), ( "action_gte", Encode.string |> Encode.optional input.action_gte ), ( "action_contains", Encode.string |> Encode.optional input.action_contains ), ( "action_not_contains", Encode.string |> Encode.optional input.action_not_contains ), ( "action_starts_with", Encode.string |> Encode.optional input.action_starts_with ), ( "action_not_starts_with", Encode.string |> Encode.optional input.action_not_starts_with ), ( "action_ends_with", Encode.string |> Encode.optional input.action_ends_with ), ( "action_not_ends_with", Encode.string |> Encode.optional input.action_not_ends_with ), ( "handle", Encode.string |> Encode.optional input.handle ), ( "handle_not", Encode.string |> Encode.optional input.handle_not ), ( "handle_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_in ), ( "handle_not_in", (Encode.string |> Encode.list) |> Encode.optional input.handle_not_in ), ( "handle_lt", Encode.string |> Encode.optional input.handle_lt ), ( "handle_lte", Encode.string |> Encode.optional input.handle_lte ), ( "handle_gt", Encode.string |> Encode.optional input.handle_gt ), ( "handle_gte", Encode.string |> Encode.optional input.handle_gte ), ( "handle_contains", Encode.string |> Encode.optional input.handle_contains ), ( "handle_not_contains", Encode.string |> Encode.optional input.handle_not_contains ), ( "handle_starts_with", Encode.string |> Encode.optional input.handle_starts_with ), ( "handle_not_starts_with", Encode.string |> Encode.optional input.handle_not_starts_with ), ( "handle_ends_with", Encode.string |> Encode.optional input.handle_ends_with ), ( "handle_not_ends_with", Encode.string |> Encode.optional input.handle_not_ends_with ), ( "hue", Encode.float |> Encode.optional input.hue ), ( "hue_not", Encode.float |> Encode.optional input.hue_not ), ( "hue_in", (Encode.float |> Encode.list) |> Encode.optional input.hue_in ), ( "hue_not_in", (Encode.float |> Encode.list) |> Encode.optional input.hue_not_in ), ( "hue_lt", Encode.float |> Encode.optional input.hue_lt ), ( "hue_lte", Encode.float |> Encode.optional input.hue_lte ), ( "hue_gt", Encode.float |> Encode.optional input.hue_gt ), ( "hue_gte", Encode.float |> Encode.optional input.hue_gte ) ]


buildContactWhereUniqueInput : (ContactWhereUniqueInputOptionalFields -> ContactWhereUniqueInputOptionalFields) -> ContactWhereUniqueInput
buildContactWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ContactWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the ContactWhereUniqueInput input object.
-}
type alias ContactWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a ContactWhereUniqueInput into a value that can be used as an argument.
-}
encodeContactWhereUniqueInput : ContactWhereUniqueInput -> Value
encodeContactWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildDocumentOutputInput : (DocumentOutputInputOptionalFields -> DocumentOutputInputOptionalFields) -> DocumentOutputInput
buildDocumentOutputInput fillOptionals =
    let
        optionals =
            fillOptionals
                { format = Absent }
    in
    { format = optionals.format }


type alias DocumentOutputInputOptionalFields =
    { format : OptionalArgument DB.Enum.DocumentFileTypes.DocumentFileTypes }


{-| Type for the DocumentOutputInput input object.
-}
type alias DocumentOutputInput =
    { format : OptionalArgument DB.Enum.DocumentFileTypes.DocumentFileTypes }


{-| Encode a DocumentOutputInput into a value that can be used as an argument.
-}
encodeDocumentOutputInput : DocumentOutputInput -> Value
encodeDocumentOutputInput input =
    Encode.maybeObject
        [ ( "format", Encode.enum DB.Enum.DocumentFileTypes.toString |> Encode.optional input.format ) ]


buildDocumentTransformationInput : (DocumentTransformationInputOptionalFields -> DocumentTransformationInputOptionalFields) -> DocumentTransformationInput
buildDocumentTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { output = Absent }
    in
    { output = optionals.output }


type alias DocumentTransformationInputOptionalFields =
    { output : OptionalArgument DocumentOutputInput }


{-| Type for the DocumentTransformationInput input object.
-}
type alias DocumentTransformationInput =
    { output : OptionalArgument DocumentOutputInput }


{-| Encode a DocumentTransformationInput into a value that can be used as an argument.
-}
encodeDocumentTransformationInput : DocumentTransformationInput -> Value
encodeDocumentTransformationInput input =
    Encode.maybeObject
        [ ( "output", encodeDocumentOutputInput |> Encode.optional input.output ) ]


buildImageResizeInput : (ImageResizeInputOptionalFields -> ImageResizeInputOptionalFields) -> ImageResizeInput
buildImageResizeInput fillOptionals =
    let
        optionals =
            fillOptionals
                { width = Absent, height = Absent, fit = Absent }
    in
    { width = optionals.width, height = optionals.height, fit = optionals.fit }


type alias ImageResizeInputOptionalFields =
    { width : OptionalArgument Int
    , height : OptionalArgument Int
    , fit : OptionalArgument DB.Enum.ImageFit.ImageFit
    }


{-| Type for the ImageResizeInput input object.
-}
type alias ImageResizeInput =
    { width : OptionalArgument Int
    , height : OptionalArgument Int
    , fit : OptionalArgument DB.Enum.ImageFit.ImageFit
    }


{-| Encode a ImageResizeInput into a value that can be used as an argument.
-}
encodeImageResizeInput : ImageResizeInput -> Value
encodeImageResizeInput input =
    Encode.maybeObject
        [ ( "width", Encode.int |> Encode.optional input.width ), ( "height", Encode.int |> Encode.optional input.height ), ( "fit", Encode.enum DB.Enum.ImageFit.toString |> Encode.optional input.fit ) ]


buildImageTransformationInput : (ImageTransformationInputOptionalFields -> ImageTransformationInputOptionalFields) -> ImageTransformationInput
buildImageTransformationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { resize = Absent }
    in
    { resize = optionals.resize }


type alias ImageTransformationInputOptionalFields =
    { resize : OptionalArgument ImageResizeInput }


{-| Type for the ImageTransformationInput input object.
-}
type alias ImageTransformationInput =
    { resize : OptionalArgument ImageResizeInput }


{-| Encode a ImageTransformationInput into a value that can be used as an argument.
-}
encodeImageTransformationInput : ImageTransformationInput -> Value
encodeImageTransformationInput input =
    Encode.maybeObject
        [ ( "resize", encodeImageResizeInput |> Encode.optional input.resize ) ]


buildLocationSubscriptionWhereInput : (LocationSubscriptionWhereInputOptionalFields -> LocationSubscriptionWhereInputOptionalFields) -> LocationSubscriptionWhereInput
buildLocationSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    LocationSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias LocationSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List LocationSubscriptionWhereInput)
    , or : OptionalArgument (List LocationSubscriptionWhereInput)
    , not : OptionalArgument (List LocationSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument LocationWhereInput
    }


{-| Type alias for the `LocationSubscriptionWhereInput` attributes. Note that this type
needs to use the `LocationSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias LocationSubscriptionWhereInputRaw =
    { and : OptionalArgument (List LocationSubscriptionWhereInput)
    , or : OptionalArgument (List LocationSubscriptionWhereInput)
    , not : OptionalArgument (List LocationSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument LocationWhereInput
    }


{-| Type for the LocationSubscriptionWhereInput input object.
-}
type LocationSubscriptionWhereInput
    = LocationSubscriptionWhereInput LocationSubscriptionWhereInputRaw


{-| Encode a LocationSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeLocationSubscriptionWhereInput : LocationSubscriptionWhereInput -> Value
encodeLocationSubscriptionWhereInput (LocationSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeLocationSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeLocationWhereInput |> Encode.optional input.node ) ]


buildLocationWhereInput : (LocationWhereInputOptionalFields -> LocationWhereInputOptionalFields) -> LocationWhereInput
buildLocationWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent }
    in
    LocationWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte }


type alias LocationWhereInputOptionalFields =
    { and : OptionalArgument (List LocationWhereInput)
    , or : OptionalArgument (List LocationWhereInput)
    , not : OptionalArgument (List LocationWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type alias for the `LocationWhereInput` attributes. Note that this type
needs to use the `LocationWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias LocationWhereInputRaw =
    { and : OptionalArgument (List LocationWhereInput)
    , or : OptionalArgument (List LocationWhereInput)
    , not : OptionalArgument (List LocationWhereInput)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    }


{-| Type for the LocationWhereInput input object.
-}
type LocationWhereInput
    = LocationWhereInput LocationWhereInputRaw


{-| Encode a LocationWhereInput into a value that can be used as an argument.
-}
encodeLocationWhereInput : LocationWhereInput -> Value
encodeLocationWhereInput (LocationWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeLocationWhereInput |> Encode.list) |> Encode.optional input.not ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ) ]


buildLocationWhereUniqueInput : (LocationWhereUniqueInputOptionalFields -> LocationWhereUniqueInputOptionalFields) -> LocationWhereUniqueInput
buildLocationWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias LocationWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the LocationWhereUniqueInput input object.
-}
type alias LocationWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a LocationWhereUniqueInput into a value that can be used as an argument.
-}
encodeLocationWhereUniqueInput : LocationWhereUniqueInput -> Value
encodeLocationWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]


buildProjectCreateInput : ProjectCreateInputRequiredFields -> (ProjectCreateInputOptionalFields -> ProjectCreateInputOptionalFields) -> ProjectCreateInput
buildProjectCreateInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent, picture = Absent }
    in
    ProjectCreateInput { status = optionals.status, name = required.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images, picture = optionals.picture }


type alias ProjectCreateInputRequiredFields =
    { name : String }


type alias ProjectCreateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectInput
    }


{-| Type alias for the `ProjectCreateInput` attributes. Note that this type
needs to use the `ProjectCreateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectCreateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectInput
    }


{-| Type for the ProjectCreateInput input object.
-}
type ProjectCreateInput
    = ProjectCreateInput ProjectCreateInputRaw


{-| Encode a ProjectCreateInput into a value that can be used as an argument.
-}
encodeProjectCreateInput : ProjectCreateInput -> Value
encodeProjectCreateInput (ProjectCreateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectCreatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetCreateManyWithoutImagesProjectInput |> Encode.optional input.images ), ( "picture", encodeAssetCreateOneWithoutPictureProjectInput |> Encode.optional input.picture ) ]


buildProjectCreateManyWithoutImagesInput : (ProjectCreateManyWithoutImagesInputOptionalFields -> ProjectCreateManyWithoutImagesInputOptionalFields) -> ProjectCreateManyWithoutImagesInput
buildProjectCreateManyWithoutImagesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    ProjectCreateManyWithoutImagesInput { create = optionals.create, connect = optionals.connect }


type alias ProjectCreateManyWithoutImagesInputOptionalFields =
    { create : OptionalArgument (List ProjectCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    }


{-| Type alias for the `ProjectCreateManyWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectCreateManyWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectCreateManyWithoutImagesInputRaw =
    { create : OptionalArgument (List ProjectCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    }


{-| Type for the ProjectCreateManyWithoutImagesInput input object.
-}
type ProjectCreateManyWithoutImagesInput
    = ProjectCreateManyWithoutImagesInput ProjectCreateManyWithoutImagesInputRaw


{-| Encode a ProjectCreateManyWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectCreateManyWithoutImagesInput : ProjectCreateManyWithoutImagesInput -> Value
encodeProjectCreateManyWithoutImagesInput (ProjectCreateManyWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectCreateWithoutImagesInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildProjectCreateManyWithoutPictureInput : (ProjectCreateManyWithoutPictureInputOptionalFields -> ProjectCreateManyWithoutPictureInputOptionalFields) -> ProjectCreateManyWithoutPictureInput
buildProjectCreateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent }
    in
    ProjectCreateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect }


type alias ProjectCreateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List ProjectCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    }


{-| Type alias for the `ProjectCreateManyWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectCreateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectCreateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List ProjectCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    }


{-| Type for the ProjectCreateManyWithoutPictureInput input object.
-}
type ProjectCreateManyWithoutPictureInput
    = ProjectCreateManyWithoutPictureInput ProjectCreateManyWithoutPictureInputRaw


{-| Encode a ProjectCreateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectCreateManyWithoutPictureInput : ProjectCreateManyWithoutPictureInput -> Value
encodeProjectCreateManyWithoutPictureInput (ProjectCreateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ) ]


buildProjectCreateWithoutImagesInput : ProjectCreateWithoutImagesInputRequiredFields -> (ProjectCreateWithoutImagesInputOptionalFields -> ProjectCreateWithoutImagesInputOptionalFields) -> ProjectCreateWithoutImagesInput
buildProjectCreateWithoutImagesInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, picture = Absent }
    in
    ProjectCreateWithoutImagesInput { status = optionals.status, name = required.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, picture = optionals.picture }


type alias ProjectCreateWithoutImagesInputRequiredFields =
    { name : String }


type alias ProjectCreateWithoutImagesInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectInput
    }


{-| Type alias for the `ProjectCreateWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectCreateWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectCreateWithoutImagesInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectCreatetagsInput
    , picture : OptionalArgument AssetCreateOneWithoutPictureProjectInput
    }


{-| Type for the ProjectCreateWithoutImagesInput input object.
-}
type ProjectCreateWithoutImagesInput
    = ProjectCreateWithoutImagesInput ProjectCreateWithoutImagesInputRaw


{-| Encode a ProjectCreateWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectCreateWithoutImagesInput : ProjectCreateWithoutImagesInput -> Value
encodeProjectCreateWithoutImagesInput (ProjectCreateWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectCreatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetCreateOneWithoutPictureProjectInput |> Encode.optional input.picture ) ]


buildProjectCreateWithoutPictureInput : ProjectCreateWithoutPictureInputRequiredFields -> (ProjectCreateWithoutPictureInputOptionalFields -> ProjectCreateWithoutPictureInputOptionalFields) -> ProjectCreateWithoutPictureInput
buildProjectCreateWithoutPictureInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent }
    in
    ProjectCreateWithoutPictureInput { status = optionals.status, name = required.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images }


type alias ProjectCreateWithoutPictureInputRequiredFields =
    { name : String }


type alias ProjectCreateWithoutPictureInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectInput
    }


{-| Type alias for the `ProjectCreateWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectCreateWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectCreateWithoutPictureInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectCreatetagsInput
    , images : OptionalArgument AssetCreateManyWithoutImagesProjectInput
    }


{-| Type for the ProjectCreateWithoutPictureInput input object.
-}
type ProjectCreateWithoutPictureInput
    = ProjectCreateWithoutPictureInput ProjectCreateWithoutPictureInputRaw


{-| Encode a ProjectCreateWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectCreateWithoutPictureInput : ProjectCreateWithoutPictureInput -> Value
encodeProjectCreateWithoutPictureInput (ProjectCreateWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectCreatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetCreateManyWithoutImagesProjectInput |> Encode.optional input.images ) ]


buildProjectCreatetagsInput : (ProjectCreatetagsInputOptionalFields -> ProjectCreatetagsInputOptionalFields) -> ProjectCreatetagsInput
buildProjectCreatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias ProjectCreatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the ProjectCreatetagsInput input object.
-}
type alias ProjectCreatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a ProjectCreatetagsInput into a value that can be used as an argument.
-}
encodeProjectCreatetagsInput : ProjectCreatetagsInput -> Value
encodeProjectCreatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildProjectScalarWhereInput : (ProjectScalarWhereInputOptionalFields -> ProjectScalarWhereInputOptionalFields) -> ProjectScalarWhereInput
buildProjectScalarWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, description = Absent, description_not = Absent, description_in = Absent, description_not_in = Absent, description_lt = Absent, description_lte = Absent, description_gt = Absent, description_gte = Absent, description_contains = Absent, description_not_contains = Absent, description_starts_with = Absent, description_not_starts_with = Absent, description_ends_with = Absent, description_not_ends_with = Absent, myWork = Absent, myWork_not = Absent, myWork_in = Absent, myWork_not_in = Absent, myWork_lt = Absent, myWork_lte = Absent, myWork_gt = Absent, myWork_gte = Absent, myWork_contains = Absent, myWork_not_contains = Absent, myWork_starts_with = Absent, myWork_not_starts_with = Absent, myWork_ends_with = Absent, myWork_not_ends_with = Absent, link = Absent, link_not = Absent, link_in = Absent, link_not_in = Absent, link_lt = Absent, link_lte = Absent, link_gt = Absent, link_gte = Absent, link_contains = Absent, link_not_contains = Absent, link_starts_with = Absent, link_not_starts_with = Absent, link_ends_with = Absent, link_not_ends_with = Absent }
    in
    ProjectScalarWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, description = optionals.description, description_not = optionals.description_not, description_in = optionals.description_in, description_not_in = optionals.description_not_in, description_lt = optionals.description_lt, description_lte = optionals.description_lte, description_gt = optionals.description_gt, description_gte = optionals.description_gte, description_contains = optionals.description_contains, description_not_contains = optionals.description_not_contains, description_starts_with = optionals.description_starts_with, description_not_starts_with = optionals.description_not_starts_with, description_ends_with = optionals.description_ends_with, description_not_ends_with = optionals.description_not_ends_with, myWork = optionals.myWork, myWork_not = optionals.myWork_not, myWork_in = optionals.myWork_in, myWork_not_in = optionals.myWork_not_in, myWork_lt = optionals.myWork_lt, myWork_lte = optionals.myWork_lte, myWork_gt = optionals.myWork_gt, myWork_gte = optionals.myWork_gte, myWork_contains = optionals.myWork_contains, myWork_not_contains = optionals.myWork_not_contains, myWork_starts_with = optionals.myWork_starts_with, myWork_not_starts_with = optionals.myWork_not_starts_with, myWork_ends_with = optionals.myWork_ends_with, myWork_not_ends_with = optionals.myWork_not_ends_with, link = optionals.link, link_not = optionals.link_not, link_in = optionals.link_in, link_not_in = optionals.link_not_in, link_lt = optionals.link_lt, link_lte = optionals.link_lte, link_gt = optionals.link_gt, link_gte = optionals.link_gte, link_contains = optionals.link_contains, link_not_contains = optionals.link_not_contains, link_starts_with = optionals.link_starts_with, link_not_starts_with = optionals.link_not_starts_with, link_ends_with = optionals.link_ends_with, link_not_ends_with = optionals.link_not_ends_with }


type alias ProjectScalarWhereInputOptionalFields =
    { and : OptionalArgument (List ProjectScalarWhereInput)
    , or : OptionalArgument (List ProjectScalarWhereInput)
    , not : OptionalArgument (List ProjectScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    }


{-| Type alias for the `ProjectScalarWhereInput` attributes. Note that this type
needs to use the `ProjectScalarWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectScalarWhereInputRaw =
    { and : OptionalArgument (List ProjectScalarWhereInput)
    , or : OptionalArgument (List ProjectScalarWhereInput)
    , not : OptionalArgument (List ProjectScalarWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    }


{-| Type for the ProjectScalarWhereInput input object.
-}
type ProjectScalarWhereInput
    = ProjectScalarWhereInput ProjectScalarWhereInputRaw


{-| Encode a ProjectScalarWhereInput into a value that can be used as an argument.
-}
encodeProjectScalarWhereInput : ProjectScalarWhereInput -> Value
encodeProjectScalarWhereInput (ProjectScalarWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeProjectScalarWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeProjectScalarWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeProjectScalarWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "myWork_not", Encode.string |> Encode.optional input.myWork_not ), ( "myWork_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_in ), ( "myWork_not_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_not_in ), ( "myWork_lt", Encode.string |> Encode.optional input.myWork_lt ), ( "myWork_lte", Encode.string |> Encode.optional input.myWork_lte ), ( "myWork_gt", Encode.string |> Encode.optional input.myWork_gt ), ( "myWork_gte", Encode.string |> Encode.optional input.myWork_gte ), ( "myWork_contains", Encode.string |> Encode.optional input.myWork_contains ), ( "myWork_not_contains", Encode.string |> Encode.optional input.myWork_not_contains ), ( "myWork_starts_with", Encode.string |> Encode.optional input.myWork_starts_with ), ( "myWork_not_starts_with", Encode.string |> Encode.optional input.myWork_not_starts_with ), ( "myWork_ends_with", Encode.string |> Encode.optional input.myWork_ends_with ), ( "myWork_not_ends_with", Encode.string |> Encode.optional input.myWork_not_ends_with ), ( "link", Encode.string |> Encode.optional input.link ), ( "link_not", Encode.string |> Encode.optional input.link_not ), ( "link_in", (Encode.string |> Encode.list) |> Encode.optional input.link_in ), ( "link_not_in", (Encode.string |> Encode.list) |> Encode.optional input.link_not_in ), ( "link_lt", Encode.string |> Encode.optional input.link_lt ), ( "link_lte", Encode.string |> Encode.optional input.link_lte ), ( "link_gt", Encode.string |> Encode.optional input.link_gt ), ( "link_gte", Encode.string |> Encode.optional input.link_gte ), ( "link_contains", Encode.string |> Encode.optional input.link_contains ), ( "link_not_contains", Encode.string |> Encode.optional input.link_not_contains ), ( "link_starts_with", Encode.string |> Encode.optional input.link_starts_with ), ( "link_not_starts_with", Encode.string |> Encode.optional input.link_not_starts_with ), ( "link_ends_with", Encode.string |> Encode.optional input.link_ends_with ), ( "link_not_ends_with", Encode.string |> Encode.optional input.link_not_ends_with ) ]


buildProjectSubscriptionWhereInput : (ProjectSubscriptionWhereInputOptionalFields -> ProjectSubscriptionWhereInputOptionalFields) -> ProjectSubscriptionWhereInput
buildProjectSubscriptionWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, mutation_in = Absent, updatedFields_contains = Absent, updatedFields_contains_every = Absent, updatedFields_contains_some = Absent, node = Absent }
    in
    ProjectSubscriptionWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, mutation_in = optionals.mutation_in, updatedFields_contains = optionals.updatedFields_contains, updatedFields_contains_every = optionals.updatedFields_contains_every, updatedFields_contains_some = optionals.updatedFields_contains_some, node = optionals.node }


type alias ProjectSubscriptionWhereInputOptionalFields =
    { and : OptionalArgument (List ProjectSubscriptionWhereInput)
    , or : OptionalArgument (List ProjectSubscriptionWhereInput)
    , not : OptionalArgument (List ProjectSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ProjectWhereInput
    }


{-| Type alias for the `ProjectSubscriptionWhereInput` attributes. Note that this type
needs to use the `ProjectSubscriptionWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectSubscriptionWhereInputRaw =
    { and : OptionalArgument (List ProjectSubscriptionWhereInput)
    , or : OptionalArgument (List ProjectSubscriptionWhereInput)
    , not : OptionalArgument (List ProjectSubscriptionWhereInput)
    , mutation_in : OptionalArgument (List DB.Enum.MutationType.MutationType)
    , updatedFields_contains : OptionalArgument String
    , updatedFields_contains_every : OptionalArgument (List String)
    , updatedFields_contains_some : OptionalArgument (List String)
    , node : OptionalArgument ProjectWhereInput
    }


{-| Type for the ProjectSubscriptionWhereInput input object.
-}
type ProjectSubscriptionWhereInput
    = ProjectSubscriptionWhereInput ProjectSubscriptionWhereInputRaw


{-| Encode a ProjectSubscriptionWhereInput into a value that can be used as an argument.
-}
encodeProjectSubscriptionWhereInput : ProjectSubscriptionWhereInput -> Value
encodeProjectSubscriptionWhereInput (ProjectSubscriptionWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeProjectSubscriptionWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeProjectSubscriptionWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeProjectSubscriptionWhereInput |> Encode.list) |> Encode.optional input.not ), ( "mutation_in", (Encode.enum DB.Enum.MutationType.toString |> Encode.list) |> Encode.optional input.mutation_in ), ( "updatedFields_contains", Encode.string |> Encode.optional input.updatedFields_contains ), ( "updatedFields_contains_every", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_every ), ( "updatedFields_contains_some", (Encode.string |> Encode.list) |> Encode.optional input.updatedFields_contains_some ), ( "node", encodeProjectWhereInput |> Encode.optional input.node ) ]


buildProjectUpdateInput : (ProjectUpdateInputOptionalFields -> ProjectUpdateInputOptionalFields) -> ProjectUpdateInput
buildProjectUpdateInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent, picture = Absent }
    in
    ProjectUpdateInput { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images, picture = optionals.picture }


type alias ProjectUpdateInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectInput
    }


{-| Type alias for the `ProjectUpdateInput` attributes. Note that this type
needs to use the `ProjectUpdateInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectInput
    }


{-| Type for the ProjectUpdateInput input object.
-}
type ProjectUpdateInput
    = ProjectUpdateInput ProjectUpdateInputRaw


{-| Encode a ProjectUpdateInput into a value that can be used as an argument.
-}
encodeProjectUpdateInput : ProjectUpdateInput -> Value
encodeProjectUpdateInput (ProjectUpdateInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectUpdatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetUpdateManyWithoutImagesProjectInput |> Encode.optional input.images ), ( "picture", encodeAssetUpdateOneWithoutPictureProjectInput |> Encode.optional input.picture ) ]


buildProjectUpdateManyDataInput : (ProjectUpdateManyDataInputOptionalFields -> ProjectUpdateManyDataInputOptionalFields) -> ProjectUpdateManyDataInput
buildProjectUpdateManyDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent }
    in
    { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags }


type alias ProjectUpdateManyDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    }


{-| Type for the ProjectUpdateManyDataInput input object.
-}
type alias ProjectUpdateManyDataInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    }


{-| Encode a ProjectUpdateManyDataInput into a value that can be used as an argument.
-}
encodeProjectUpdateManyDataInput : ProjectUpdateManyDataInput -> Value
encodeProjectUpdateManyDataInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectUpdatetagsInput |> Encode.optional input.tags ) ]


buildProjectUpdateManyMutationInput : (ProjectUpdateManyMutationInputOptionalFields -> ProjectUpdateManyMutationInputOptionalFields) -> ProjectUpdateManyMutationInput
buildProjectUpdateManyMutationInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent }
    in
    { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags }


type alias ProjectUpdateManyMutationInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    }


{-| Type for the ProjectUpdateManyMutationInput input object.
-}
type alias ProjectUpdateManyMutationInput =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    }


{-| Encode a ProjectUpdateManyMutationInput into a value that can be used as an argument.
-}
encodeProjectUpdateManyMutationInput : ProjectUpdateManyMutationInput -> Value
encodeProjectUpdateManyMutationInput input =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectUpdatetagsInput |> Encode.optional input.tags ) ]


buildProjectUpdateManyWithWhereNestedInput : ProjectUpdateManyWithWhereNestedInputRequiredFields -> ProjectUpdateManyWithWhereNestedInput
buildProjectUpdateManyWithWhereNestedInput required =
    ProjectUpdateManyWithWhereNestedInput { where_ = required.where_, data = required.data }


type alias ProjectUpdateManyWithWhereNestedInputRequiredFields =
    { where_ : ProjectScalarWhereInput
    , data : ProjectUpdateManyDataInput
    }


{-| Type alias for the `ProjectUpdateManyWithWhereNestedInput` attributes. Note that this type
needs to use the `ProjectUpdateManyWithWhereNestedInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateManyWithWhereNestedInputRaw =
    { where_ : ProjectScalarWhereInput
    , data : ProjectUpdateManyDataInput
    }


{-| Type for the ProjectUpdateManyWithWhereNestedInput input object.
-}
type ProjectUpdateManyWithWhereNestedInput
    = ProjectUpdateManyWithWhereNestedInput ProjectUpdateManyWithWhereNestedInputRaw


{-| Encode a ProjectUpdateManyWithWhereNestedInput into a value that can be used as an argument.
-}
encodeProjectUpdateManyWithWhereNestedInput : ProjectUpdateManyWithWhereNestedInput -> Value
encodeProjectUpdateManyWithWhereNestedInput (ProjectUpdateManyWithWhereNestedInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectScalarWhereInput input.where_ |> Just ), ( "data", encodeProjectUpdateManyDataInput input.data |> Just ) ]


buildProjectUpdateManyWithoutImagesInput : (ProjectUpdateManyWithoutImagesInputOptionalFields -> ProjectUpdateManyWithoutImagesInputOptionalFields) -> ProjectUpdateManyWithoutImagesInput
buildProjectUpdateManyWithoutImagesInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, set = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    ProjectUpdateManyWithoutImagesInput { create = optionals.create, connect = optionals.connect, set = optionals.set, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias ProjectUpdateManyWithoutImagesInputOptionalFields =
    { create : OptionalArgument (List ProjectCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    , set : OptionalArgument (List ProjectWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectWhereUniqueInput)
    , delete : OptionalArgument (List ProjectWhereUniqueInput)
    , update : OptionalArgument (List ProjectUpdateWithWhereUniqueWithoutImagesInput)
    , updateMany : OptionalArgument (List ProjectUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectScalarWhereInput)
    , upsert : OptionalArgument (List ProjectUpsertWithWhereUniqueWithoutImagesInput)
    }


{-| Type alias for the `ProjectUpdateManyWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectUpdateManyWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateManyWithoutImagesInputRaw =
    { create : OptionalArgument (List ProjectCreateWithoutImagesInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    , set : OptionalArgument (List ProjectWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectWhereUniqueInput)
    , delete : OptionalArgument (List ProjectWhereUniqueInput)
    , update : OptionalArgument (List ProjectUpdateWithWhereUniqueWithoutImagesInput)
    , updateMany : OptionalArgument (List ProjectUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectScalarWhereInput)
    , upsert : OptionalArgument (List ProjectUpsertWithWhereUniqueWithoutImagesInput)
    }


{-| Type for the ProjectUpdateManyWithoutImagesInput input object.
-}
type ProjectUpdateManyWithoutImagesInput
    = ProjectUpdateManyWithoutImagesInput ProjectUpdateManyWithoutImagesInputRaw


{-| Encode a ProjectUpdateManyWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectUpdateManyWithoutImagesInput : ProjectUpdateManyWithoutImagesInput -> Value
encodeProjectUpdateManyWithoutImagesInput (ProjectUpdateManyWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectCreateWithoutImagesInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "set", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.set ), ( "disconnect", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeProjectUpdateWithWhereUniqueWithoutImagesInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeProjectUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeProjectScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeProjectUpsertWithWhereUniqueWithoutImagesInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildProjectUpdateManyWithoutPictureInput : (ProjectUpdateManyWithoutPictureInputOptionalFields -> ProjectUpdateManyWithoutPictureInputOptionalFields) -> ProjectUpdateManyWithoutPictureInput
buildProjectUpdateManyWithoutPictureInput fillOptionals =
    let
        optionals =
            fillOptionals
                { create = Absent, connect = Absent, set = Absent, disconnect = Absent, delete = Absent, update = Absent, updateMany = Absent, deleteMany = Absent, upsert = Absent }
    in
    ProjectUpdateManyWithoutPictureInput { create = optionals.create, connect = optionals.connect, set = optionals.set, disconnect = optionals.disconnect, delete = optionals.delete, update = optionals.update, updateMany = optionals.updateMany, deleteMany = optionals.deleteMany, upsert = optionals.upsert }


type alias ProjectUpdateManyWithoutPictureInputOptionalFields =
    { create : OptionalArgument (List ProjectCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    , set : OptionalArgument (List ProjectWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectWhereUniqueInput)
    , delete : OptionalArgument (List ProjectWhereUniqueInput)
    , update : OptionalArgument (List ProjectUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List ProjectUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectScalarWhereInput)
    , upsert : OptionalArgument (List ProjectUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type alias for the `ProjectUpdateManyWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectUpdateManyWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateManyWithoutPictureInputRaw =
    { create : OptionalArgument (List ProjectCreateWithoutPictureInput)
    , connect : OptionalArgument (List ProjectWhereUniqueInput)
    , set : OptionalArgument (List ProjectWhereUniqueInput)
    , disconnect : OptionalArgument (List ProjectWhereUniqueInput)
    , delete : OptionalArgument (List ProjectWhereUniqueInput)
    , update : OptionalArgument (List ProjectUpdateWithWhereUniqueWithoutPictureInput)
    , updateMany : OptionalArgument (List ProjectUpdateManyWithWhereNestedInput)
    , deleteMany : OptionalArgument (List ProjectScalarWhereInput)
    , upsert : OptionalArgument (List ProjectUpsertWithWhereUniqueWithoutPictureInput)
    }


{-| Type for the ProjectUpdateManyWithoutPictureInput input object.
-}
type ProjectUpdateManyWithoutPictureInput
    = ProjectUpdateManyWithoutPictureInput ProjectUpdateManyWithoutPictureInputRaw


{-| Encode a ProjectUpdateManyWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectUpdateManyWithoutPictureInput : ProjectUpdateManyWithoutPictureInput -> Value
encodeProjectUpdateManyWithoutPictureInput (ProjectUpdateManyWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "create", (encodeProjectCreateWithoutPictureInput |> Encode.list) |> Encode.optional input.create ), ( "connect", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.connect ), ( "set", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.set ), ( "disconnect", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.disconnect ), ( "delete", (encodeProjectWhereUniqueInput |> Encode.list) |> Encode.optional input.delete ), ( "update", (encodeProjectUpdateWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.update ), ( "updateMany", (encodeProjectUpdateManyWithWhereNestedInput |> Encode.list) |> Encode.optional input.updateMany ), ( "deleteMany", (encodeProjectScalarWhereInput |> Encode.list) |> Encode.optional input.deleteMany ), ( "upsert", (encodeProjectUpsertWithWhereUniqueWithoutPictureInput |> Encode.list) |> Encode.optional input.upsert ) ]


buildProjectUpdateWithWhereUniqueWithoutImagesInput : ProjectUpdateWithWhereUniqueWithoutImagesInputRequiredFields -> ProjectUpdateWithWhereUniqueWithoutImagesInput
buildProjectUpdateWithWhereUniqueWithoutImagesInput required =
    ProjectUpdateWithWhereUniqueWithoutImagesInput { where_ = required.where_, data = required.data }


type alias ProjectUpdateWithWhereUniqueWithoutImagesInputRequiredFields =
    { where_ : ProjectWhereUniqueInput
    , data : ProjectUpdateWithoutImagesDataInput
    }


{-| Type alias for the `ProjectUpdateWithWhereUniqueWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectUpdateWithWhereUniqueWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateWithWhereUniqueWithoutImagesInputRaw =
    { where_ : ProjectWhereUniqueInput
    , data : ProjectUpdateWithoutImagesDataInput
    }


{-| Type for the ProjectUpdateWithWhereUniqueWithoutImagesInput input object.
-}
type ProjectUpdateWithWhereUniqueWithoutImagesInput
    = ProjectUpdateWithWhereUniqueWithoutImagesInput ProjectUpdateWithWhereUniqueWithoutImagesInputRaw


{-| Encode a ProjectUpdateWithWhereUniqueWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectUpdateWithWhereUniqueWithoutImagesInput : ProjectUpdateWithWhereUniqueWithoutImagesInput -> Value
encodeProjectUpdateWithWhereUniqueWithoutImagesInput (ProjectUpdateWithWhereUniqueWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectWhereUniqueInput input.where_ |> Just ), ( "data", encodeProjectUpdateWithoutImagesDataInput input.data |> Just ) ]


buildProjectUpdateWithWhereUniqueWithoutPictureInput : ProjectUpdateWithWhereUniqueWithoutPictureInputRequiredFields -> ProjectUpdateWithWhereUniqueWithoutPictureInput
buildProjectUpdateWithWhereUniqueWithoutPictureInput required =
    ProjectUpdateWithWhereUniqueWithoutPictureInput { where_ = required.where_, data = required.data }


type alias ProjectUpdateWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : ProjectWhereUniqueInput
    , data : ProjectUpdateWithoutPictureDataInput
    }


{-| Type alias for the `ProjectUpdateWithWhereUniqueWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectUpdateWithWhereUniqueWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateWithWhereUniqueWithoutPictureInputRaw =
    { where_ : ProjectWhereUniqueInput
    , data : ProjectUpdateWithoutPictureDataInput
    }


{-| Type for the ProjectUpdateWithWhereUniqueWithoutPictureInput input object.
-}
type ProjectUpdateWithWhereUniqueWithoutPictureInput
    = ProjectUpdateWithWhereUniqueWithoutPictureInput ProjectUpdateWithWhereUniqueWithoutPictureInputRaw


{-| Encode a ProjectUpdateWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectUpdateWithWhereUniqueWithoutPictureInput : ProjectUpdateWithWhereUniqueWithoutPictureInput -> Value
encodeProjectUpdateWithWhereUniqueWithoutPictureInput (ProjectUpdateWithWhereUniqueWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectWhereUniqueInput input.where_ |> Just ), ( "data", encodeProjectUpdateWithoutPictureDataInput input.data |> Just ) ]


buildProjectUpdateWithoutImagesDataInput : (ProjectUpdateWithoutImagesDataInputOptionalFields -> ProjectUpdateWithoutImagesDataInputOptionalFields) -> ProjectUpdateWithoutImagesDataInput
buildProjectUpdateWithoutImagesDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, picture = Absent }
    in
    ProjectUpdateWithoutImagesDataInput { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, picture = optionals.picture }


type alias ProjectUpdateWithoutImagesDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectInput
    }


{-| Type alias for the `ProjectUpdateWithoutImagesDataInput` attributes. Note that this type
needs to use the `ProjectUpdateWithoutImagesDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateWithoutImagesDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    , picture : OptionalArgument AssetUpdateOneWithoutPictureProjectInput
    }


{-| Type for the ProjectUpdateWithoutImagesDataInput input object.
-}
type ProjectUpdateWithoutImagesDataInput
    = ProjectUpdateWithoutImagesDataInput ProjectUpdateWithoutImagesDataInputRaw


{-| Encode a ProjectUpdateWithoutImagesDataInput into a value that can be used as an argument.
-}
encodeProjectUpdateWithoutImagesDataInput : ProjectUpdateWithoutImagesDataInput -> Value
encodeProjectUpdateWithoutImagesDataInput (ProjectUpdateWithoutImagesDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectUpdatetagsInput |> Encode.optional input.tags ), ( "picture", encodeAssetUpdateOneWithoutPictureProjectInput |> Encode.optional input.picture ) ]


buildProjectUpdateWithoutPictureDataInput : (ProjectUpdateWithoutPictureDataInputOptionalFields -> ProjectUpdateWithoutPictureDataInputOptionalFields) -> ProjectUpdateWithoutPictureDataInput
buildProjectUpdateWithoutPictureDataInput fillOptionals =
    let
        optionals =
            fillOptionals
                { status = Absent, name = Absent, description = Absent, myWork = Absent, link = Absent, tags = Absent, images = Absent }
    in
    ProjectUpdateWithoutPictureDataInput { status = optionals.status, name = optionals.name, description = optionals.description, myWork = optionals.myWork, link = optionals.link, tags = optionals.tags, images = optionals.images }


type alias ProjectUpdateWithoutPictureDataInputOptionalFields =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectInput
    }


{-| Type alias for the `ProjectUpdateWithoutPictureDataInput` attributes. Note that this type
needs to use the `ProjectUpdateWithoutPictureDataInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpdateWithoutPictureDataInputRaw =
    { status : OptionalArgument DB.Enum.Status.Status
    , name : OptionalArgument String
    , description : OptionalArgument String
    , myWork : OptionalArgument String
    , link : OptionalArgument String
    , tags : OptionalArgument ProjectUpdatetagsInput
    , images : OptionalArgument AssetUpdateManyWithoutImagesProjectInput
    }


{-| Type for the ProjectUpdateWithoutPictureDataInput input object.
-}
type ProjectUpdateWithoutPictureDataInput
    = ProjectUpdateWithoutPictureDataInput ProjectUpdateWithoutPictureDataInputRaw


{-| Encode a ProjectUpdateWithoutPictureDataInput into a value that can be used as an argument.
-}
encodeProjectUpdateWithoutPictureDataInput : ProjectUpdateWithoutPictureDataInput -> Value
encodeProjectUpdateWithoutPictureDataInput (ProjectUpdateWithoutPictureDataInput input) =
    Encode.maybeObject
        [ ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "description", Encode.string |> Encode.optional input.description ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "link", Encode.string |> Encode.optional input.link ), ( "tags", encodeProjectUpdatetagsInput |> Encode.optional input.tags ), ( "images", encodeAssetUpdateManyWithoutImagesProjectInput |> Encode.optional input.images ) ]


buildProjectUpdatetagsInput : (ProjectUpdatetagsInputOptionalFields -> ProjectUpdatetagsInputOptionalFields) -> ProjectUpdatetagsInput
buildProjectUpdatetagsInput fillOptionals =
    let
        optionals =
            fillOptionals
                { set = Absent }
    in
    { set = optionals.set }


type alias ProjectUpdatetagsInputOptionalFields =
    { set : OptionalArgument (List String) }


{-| Type for the ProjectUpdatetagsInput input object.
-}
type alias ProjectUpdatetagsInput =
    { set : OptionalArgument (List String) }


{-| Encode a ProjectUpdatetagsInput into a value that can be used as an argument.
-}
encodeProjectUpdatetagsInput : ProjectUpdatetagsInput -> Value
encodeProjectUpdatetagsInput input =
    Encode.maybeObject
        [ ( "set", (Encode.string |> Encode.list) |> Encode.optional input.set ) ]


buildProjectUpsertWithWhereUniqueWithoutImagesInput : ProjectUpsertWithWhereUniqueWithoutImagesInputRequiredFields -> ProjectUpsertWithWhereUniqueWithoutImagesInput
buildProjectUpsertWithWhereUniqueWithoutImagesInput required =
    ProjectUpsertWithWhereUniqueWithoutImagesInput { where_ = required.where_, update = required.update, create = required.create }


type alias ProjectUpsertWithWhereUniqueWithoutImagesInputRequiredFields =
    { where_ : ProjectWhereUniqueInput
    , update : ProjectUpdateWithoutImagesDataInput
    , create : ProjectCreateWithoutImagesInput
    }


{-| Type alias for the `ProjectUpsertWithWhereUniqueWithoutImagesInput` attributes. Note that this type
needs to use the `ProjectUpsertWithWhereUniqueWithoutImagesInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpsertWithWhereUniqueWithoutImagesInputRaw =
    { where_ : ProjectWhereUniqueInput
    , update : ProjectUpdateWithoutImagesDataInput
    , create : ProjectCreateWithoutImagesInput
    }


{-| Type for the ProjectUpsertWithWhereUniqueWithoutImagesInput input object.
-}
type ProjectUpsertWithWhereUniqueWithoutImagesInput
    = ProjectUpsertWithWhereUniqueWithoutImagesInput ProjectUpsertWithWhereUniqueWithoutImagesInputRaw


{-| Encode a ProjectUpsertWithWhereUniqueWithoutImagesInput into a value that can be used as an argument.
-}
encodeProjectUpsertWithWhereUniqueWithoutImagesInput : ProjectUpsertWithWhereUniqueWithoutImagesInput -> Value
encodeProjectUpsertWithWhereUniqueWithoutImagesInput (ProjectUpsertWithWhereUniqueWithoutImagesInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectWhereUniqueInput input.where_ |> Just ), ( "update", encodeProjectUpdateWithoutImagesDataInput input.update |> Just ), ( "create", encodeProjectCreateWithoutImagesInput input.create |> Just ) ]


buildProjectUpsertWithWhereUniqueWithoutPictureInput : ProjectUpsertWithWhereUniqueWithoutPictureInputRequiredFields -> ProjectUpsertWithWhereUniqueWithoutPictureInput
buildProjectUpsertWithWhereUniqueWithoutPictureInput required =
    ProjectUpsertWithWhereUniqueWithoutPictureInput { where_ = required.where_, update = required.update, create = required.create }


type alias ProjectUpsertWithWhereUniqueWithoutPictureInputRequiredFields =
    { where_ : ProjectWhereUniqueInput
    , update : ProjectUpdateWithoutPictureDataInput
    , create : ProjectCreateWithoutPictureInput
    }


{-| Type alias for the `ProjectUpsertWithWhereUniqueWithoutPictureInput` attributes. Note that this type
needs to use the `ProjectUpsertWithWhereUniqueWithoutPictureInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectUpsertWithWhereUniqueWithoutPictureInputRaw =
    { where_ : ProjectWhereUniqueInput
    , update : ProjectUpdateWithoutPictureDataInput
    , create : ProjectCreateWithoutPictureInput
    }


{-| Type for the ProjectUpsertWithWhereUniqueWithoutPictureInput input object.
-}
type ProjectUpsertWithWhereUniqueWithoutPictureInput
    = ProjectUpsertWithWhereUniqueWithoutPictureInput ProjectUpsertWithWhereUniqueWithoutPictureInputRaw


{-| Encode a ProjectUpsertWithWhereUniqueWithoutPictureInput into a value that can be used as an argument.
-}
encodeProjectUpsertWithWhereUniqueWithoutPictureInput : ProjectUpsertWithWhereUniqueWithoutPictureInput -> Value
encodeProjectUpsertWithWhereUniqueWithoutPictureInput (ProjectUpsertWithWhereUniqueWithoutPictureInput input) =
    Encode.maybeObject
        [ ( "where", encodeProjectWhereUniqueInput input.where_ |> Just ), ( "update", encodeProjectUpdateWithoutPictureDataInput input.update |> Just ), ( "create", encodeProjectCreateWithoutPictureInput input.create |> Just ) ]


buildProjectWhereInput : (ProjectWhereInputOptionalFields -> ProjectWhereInputOptionalFields) -> ProjectWhereInput
buildProjectWhereInput fillOptionals =
    let
        optionals =
            fillOptionals
                { and = Absent, or = Absent, not = Absent, status = Absent, status_not = Absent, status_in = Absent, status_not_in = Absent, id = Absent, id_not = Absent, id_in = Absent, id_not_in = Absent, id_lt = Absent, id_lte = Absent, id_gt = Absent, id_gte = Absent, id_contains = Absent, id_not_contains = Absent, id_starts_with = Absent, id_not_starts_with = Absent, id_ends_with = Absent, id_not_ends_with = Absent, createdAt = Absent, createdAt_not = Absent, createdAt_in = Absent, createdAt_not_in = Absent, createdAt_lt = Absent, createdAt_lte = Absent, createdAt_gt = Absent, createdAt_gte = Absent, updatedAt = Absent, updatedAt_not = Absent, updatedAt_in = Absent, updatedAt_not_in = Absent, updatedAt_lt = Absent, updatedAt_lte = Absent, updatedAt_gt = Absent, updatedAt_gte = Absent, name = Absent, name_not = Absent, name_in = Absent, name_not_in = Absent, name_lt = Absent, name_lte = Absent, name_gt = Absent, name_gte = Absent, name_contains = Absent, name_not_contains = Absent, name_starts_with = Absent, name_not_starts_with = Absent, name_ends_with = Absent, name_not_ends_with = Absent, description = Absent, description_not = Absent, description_in = Absent, description_not_in = Absent, description_lt = Absent, description_lte = Absent, description_gt = Absent, description_gte = Absent, description_contains = Absent, description_not_contains = Absent, description_starts_with = Absent, description_not_starts_with = Absent, description_ends_with = Absent, description_not_ends_with = Absent, myWork = Absent, myWork_not = Absent, myWork_in = Absent, myWork_not_in = Absent, myWork_lt = Absent, myWork_lte = Absent, myWork_gt = Absent, myWork_gte = Absent, myWork_contains = Absent, myWork_not_contains = Absent, myWork_starts_with = Absent, myWork_not_starts_with = Absent, myWork_ends_with = Absent, myWork_not_ends_with = Absent, link = Absent, link_not = Absent, link_in = Absent, link_not_in = Absent, link_lt = Absent, link_lte = Absent, link_gt = Absent, link_gte = Absent, link_contains = Absent, link_not_contains = Absent, link_starts_with = Absent, link_not_starts_with = Absent, link_ends_with = Absent, link_not_ends_with = Absent, images_every = Absent, images_some = Absent, images_none = Absent, picture = Absent }
    in
    ProjectWhereInput { and = optionals.and, or = optionals.or, not = optionals.not, status = optionals.status, status_not = optionals.status_not, status_in = optionals.status_in, status_not_in = optionals.status_not_in, id = optionals.id, id_not = optionals.id_not, id_in = optionals.id_in, id_not_in = optionals.id_not_in, id_lt = optionals.id_lt, id_lte = optionals.id_lte, id_gt = optionals.id_gt, id_gte = optionals.id_gte, id_contains = optionals.id_contains, id_not_contains = optionals.id_not_contains, id_starts_with = optionals.id_starts_with, id_not_starts_with = optionals.id_not_starts_with, id_ends_with = optionals.id_ends_with, id_not_ends_with = optionals.id_not_ends_with, createdAt = optionals.createdAt, createdAt_not = optionals.createdAt_not, createdAt_in = optionals.createdAt_in, createdAt_not_in = optionals.createdAt_not_in, createdAt_lt = optionals.createdAt_lt, createdAt_lte = optionals.createdAt_lte, createdAt_gt = optionals.createdAt_gt, createdAt_gte = optionals.createdAt_gte, updatedAt = optionals.updatedAt, updatedAt_not = optionals.updatedAt_not, updatedAt_in = optionals.updatedAt_in, updatedAt_not_in = optionals.updatedAt_not_in, updatedAt_lt = optionals.updatedAt_lt, updatedAt_lte = optionals.updatedAt_lte, updatedAt_gt = optionals.updatedAt_gt, updatedAt_gte = optionals.updatedAt_gte, name = optionals.name, name_not = optionals.name_not, name_in = optionals.name_in, name_not_in = optionals.name_not_in, name_lt = optionals.name_lt, name_lte = optionals.name_lte, name_gt = optionals.name_gt, name_gte = optionals.name_gte, name_contains = optionals.name_contains, name_not_contains = optionals.name_not_contains, name_starts_with = optionals.name_starts_with, name_not_starts_with = optionals.name_not_starts_with, name_ends_with = optionals.name_ends_with, name_not_ends_with = optionals.name_not_ends_with, description = optionals.description, description_not = optionals.description_not, description_in = optionals.description_in, description_not_in = optionals.description_not_in, description_lt = optionals.description_lt, description_lte = optionals.description_lte, description_gt = optionals.description_gt, description_gte = optionals.description_gte, description_contains = optionals.description_contains, description_not_contains = optionals.description_not_contains, description_starts_with = optionals.description_starts_with, description_not_starts_with = optionals.description_not_starts_with, description_ends_with = optionals.description_ends_with, description_not_ends_with = optionals.description_not_ends_with, myWork = optionals.myWork, myWork_not = optionals.myWork_not, myWork_in = optionals.myWork_in, myWork_not_in = optionals.myWork_not_in, myWork_lt = optionals.myWork_lt, myWork_lte = optionals.myWork_lte, myWork_gt = optionals.myWork_gt, myWork_gte = optionals.myWork_gte, myWork_contains = optionals.myWork_contains, myWork_not_contains = optionals.myWork_not_contains, myWork_starts_with = optionals.myWork_starts_with, myWork_not_starts_with = optionals.myWork_not_starts_with, myWork_ends_with = optionals.myWork_ends_with, myWork_not_ends_with = optionals.myWork_not_ends_with, link = optionals.link, link_not = optionals.link_not, link_in = optionals.link_in, link_not_in = optionals.link_not_in, link_lt = optionals.link_lt, link_lte = optionals.link_lte, link_gt = optionals.link_gt, link_gte = optionals.link_gte, link_contains = optionals.link_contains, link_not_contains = optionals.link_not_contains, link_starts_with = optionals.link_starts_with, link_not_starts_with = optionals.link_not_starts_with, link_ends_with = optionals.link_ends_with, link_not_ends_with = optionals.link_not_ends_with, images_every = optionals.images_every, images_some = optionals.images_some, images_none = optionals.images_none, picture = optionals.picture }


type alias ProjectWhereInputOptionalFields =
    { and : OptionalArgument (List ProjectWhereInput)
    , or : OptionalArgument (List ProjectWhereInput)
    , not : OptionalArgument (List ProjectWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    , images_every : OptionalArgument AssetWhereInput
    , images_some : OptionalArgument AssetWhereInput
    , images_none : OptionalArgument AssetWhereInput
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type alias for the `ProjectWhereInput` attributes. Note that this type
needs to use the `ProjectWhereInput` type (not just a plain type alias) because it has
references to itself either directly (recursive) or indirectly (circular). See
<https://github.com/dillonkearns/elm-graphql/issues/33>.
-}
type alias ProjectWhereInputRaw =
    { and : OptionalArgument (List ProjectWhereInput)
    , or : OptionalArgument (List ProjectWhereInput)
    , not : OptionalArgument (List ProjectWhereInput)
    , status : OptionalArgument DB.Enum.Status.Status
    , status_not : OptionalArgument DB.Enum.Status.Status
    , status_in : OptionalArgument (List DB.Enum.Status.Status)
    , status_not_in : OptionalArgument (List DB.Enum.Status.Status)
    , id : OptionalArgument DB.ScalarDecoders.Id
    , id_not : OptionalArgument DB.ScalarDecoders.Id
    , id_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_not_in : OptionalArgument (List DB.ScalarDecoders.Id)
    , id_lt : OptionalArgument DB.ScalarDecoders.Id
    , id_lte : OptionalArgument DB.ScalarDecoders.Id
    , id_gt : OptionalArgument DB.ScalarDecoders.Id
    , id_gte : OptionalArgument DB.ScalarDecoders.Id
    , id_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_not_contains : OptionalArgument DB.ScalarDecoders.Id
    , id_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_starts_with : OptionalArgument DB.ScalarDecoders.Id
    , id_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , id_not_ends_with : OptionalArgument DB.ScalarDecoders.Id
    , createdAt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , createdAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , createdAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_not : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_not_in : OptionalArgument (List DB.ScalarDecoders.DateTime)
    , updatedAt_lt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_lte : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gt : OptionalArgument DB.ScalarDecoders.DateTime
    , updatedAt_gte : OptionalArgument DB.ScalarDecoders.DateTime
    , name : OptionalArgument String
    , name_not : OptionalArgument String
    , name_in : OptionalArgument (List String)
    , name_not_in : OptionalArgument (List String)
    , name_lt : OptionalArgument String
    , name_lte : OptionalArgument String
    , name_gt : OptionalArgument String
    , name_gte : OptionalArgument String
    , name_contains : OptionalArgument String
    , name_not_contains : OptionalArgument String
    , name_starts_with : OptionalArgument String
    , name_not_starts_with : OptionalArgument String
    , name_ends_with : OptionalArgument String
    , name_not_ends_with : OptionalArgument String
    , description : OptionalArgument String
    , description_not : OptionalArgument String
    , description_in : OptionalArgument (List String)
    , description_not_in : OptionalArgument (List String)
    , description_lt : OptionalArgument String
    , description_lte : OptionalArgument String
    , description_gt : OptionalArgument String
    , description_gte : OptionalArgument String
    , description_contains : OptionalArgument String
    , description_not_contains : OptionalArgument String
    , description_starts_with : OptionalArgument String
    , description_not_starts_with : OptionalArgument String
    , description_ends_with : OptionalArgument String
    , description_not_ends_with : OptionalArgument String
    , myWork : OptionalArgument String
    , myWork_not : OptionalArgument String
    , myWork_in : OptionalArgument (List String)
    , myWork_not_in : OptionalArgument (List String)
    , myWork_lt : OptionalArgument String
    , myWork_lte : OptionalArgument String
    , myWork_gt : OptionalArgument String
    , myWork_gte : OptionalArgument String
    , myWork_contains : OptionalArgument String
    , myWork_not_contains : OptionalArgument String
    , myWork_starts_with : OptionalArgument String
    , myWork_not_starts_with : OptionalArgument String
    , myWork_ends_with : OptionalArgument String
    , myWork_not_ends_with : OptionalArgument String
    , link : OptionalArgument String
    , link_not : OptionalArgument String
    , link_in : OptionalArgument (List String)
    , link_not_in : OptionalArgument (List String)
    , link_lt : OptionalArgument String
    , link_lte : OptionalArgument String
    , link_gt : OptionalArgument String
    , link_gte : OptionalArgument String
    , link_contains : OptionalArgument String
    , link_not_contains : OptionalArgument String
    , link_starts_with : OptionalArgument String
    , link_not_starts_with : OptionalArgument String
    , link_ends_with : OptionalArgument String
    , link_not_ends_with : OptionalArgument String
    , images_every : OptionalArgument AssetWhereInput
    , images_some : OptionalArgument AssetWhereInput
    , images_none : OptionalArgument AssetWhereInput
    , picture : OptionalArgument AssetWhereInput
    }


{-| Type for the ProjectWhereInput input object.
-}
type ProjectWhereInput
    = ProjectWhereInput ProjectWhereInputRaw


{-| Encode a ProjectWhereInput into a value that can be used as an argument.
-}
encodeProjectWhereInput : ProjectWhereInput -> Value
encodeProjectWhereInput (ProjectWhereInput input) =
    Encode.maybeObject
        [ ( "AND", (encodeProjectWhereInput |> Encode.list) |> Encode.optional input.and ), ( "OR", (encodeProjectWhereInput |> Encode.list) |> Encode.optional input.or ), ( "NOT", (encodeProjectWhereInput |> Encode.list) |> Encode.optional input.not ), ( "status", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status ), ( "status_not", Encode.enum DB.Enum.Status.toString |> Encode.optional input.status_not ), ( "status_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_in ), ( "status_not_in", (Encode.enum DB.Enum.Status.toString |> Encode.list) |> Encode.optional input.status_not_in ), ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ), ( "id_not", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not ), ( "id_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_in ), ( "id_not_in", ((\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.id_not_in ), ( "id_lt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lt ), ( "id_lte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_lte ), ( "id_gt", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gt ), ( "id_gte", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_gte ), ( "id_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_contains ), ( "id_not_contains", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_contains ), ( "id_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_starts_with ), ( "id_not_starts_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_starts_with ), ( "id_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_ends_with ), ( "id_not_ends_with", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id_not_ends_with ), ( "createdAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt ), ( "createdAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_not ), ( "createdAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_in ), ( "createdAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.createdAt_not_in ), ( "createdAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lt ), ( "createdAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_lte ), ( "createdAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gt ), ( "createdAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.createdAt_gte ), ( "updatedAt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt ), ( "updatedAt_not", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_not ), ( "updatedAt_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_in ), ( "updatedAt_not_in", ((\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.list) |> Encode.optional input.updatedAt_not_in ), ( "updatedAt_lt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lt ), ( "updatedAt_lte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_lte ), ( "updatedAt_gt", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gt ), ( "updatedAt_gte", (\(DB.Scalar.DateTime raw) -> Encode.string raw) |> Encode.optional input.updatedAt_gte ), ( "name", Encode.string |> Encode.optional input.name ), ( "name_not", Encode.string |> Encode.optional input.name_not ), ( "name_in", (Encode.string |> Encode.list) |> Encode.optional input.name_in ), ( "name_not_in", (Encode.string |> Encode.list) |> Encode.optional input.name_not_in ), ( "name_lt", Encode.string |> Encode.optional input.name_lt ), ( "name_lte", Encode.string |> Encode.optional input.name_lte ), ( "name_gt", Encode.string |> Encode.optional input.name_gt ), ( "name_gte", Encode.string |> Encode.optional input.name_gte ), ( "name_contains", Encode.string |> Encode.optional input.name_contains ), ( "name_not_contains", Encode.string |> Encode.optional input.name_not_contains ), ( "name_starts_with", Encode.string |> Encode.optional input.name_starts_with ), ( "name_not_starts_with", Encode.string |> Encode.optional input.name_not_starts_with ), ( "name_ends_with", Encode.string |> Encode.optional input.name_ends_with ), ( "name_not_ends_with", Encode.string |> Encode.optional input.name_not_ends_with ), ( "description", Encode.string |> Encode.optional input.description ), ( "description_not", Encode.string |> Encode.optional input.description_not ), ( "description_in", (Encode.string |> Encode.list) |> Encode.optional input.description_in ), ( "description_not_in", (Encode.string |> Encode.list) |> Encode.optional input.description_not_in ), ( "description_lt", Encode.string |> Encode.optional input.description_lt ), ( "description_lte", Encode.string |> Encode.optional input.description_lte ), ( "description_gt", Encode.string |> Encode.optional input.description_gt ), ( "description_gte", Encode.string |> Encode.optional input.description_gte ), ( "description_contains", Encode.string |> Encode.optional input.description_contains ), ( "description_not_contains", Encode.string |> Encode.optional input.description_not_contains ), ( "description_starts_with", Encode.string |> Encode.optional input.description_starts_with ), ( "description_not_starts_with", Encode.string |> Encode.optional input.description_not_starts_with ), ( "description_ends_with", Encode.string |> Encode.optional input.description_ends_with ), ( "description_not_ends_with", Encode.string |> Encode.optional input.description_not_ends_with ), ( "myWork", Encode.string |> Encode.optional input.myWork ), ( "myWork_not", Encode.string |> Encode.optional input.myWork_not ), ( "myWork_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_in ), ( "myWork_not_in", (Encode.string |> Encode.list) |> Encode.optional input.myWork_not_in ), ( "myWork_lt", Encode.string |> Encode.optional input.myWork_lt ), ( "myWork_lte", Encode.string |> Encode.optional input.myWork_lte ), ( "myWork_gt", Encode.string |> Encode.optional input.myWork_gt ), ( "myWork_gte", Encode.string |> Encode.optional input.myWork_gte ), ( "myWork_contains", Encode.string |> Encode.optional input.myWork_contains ), ( "myWork_not_contains", Encode.string |> Encode.optional input.myWork_not_contains ), ( "myWork_starts_with", Encode.string |> Encode.optional input.myWork_starts_with ), ( "myWork_not_starts_with", Encode.string |> Encode.optional input.myWork_not_starts_with ), ( "myWork_ends_with", Encode.string |> Encode.optional input.myWork_ends_with ), ( "myWork_not_ends_with", Encode.string |> Encode.optional input.myWork_not_ends_with ), ( "link", Encode.string |> Encode.optional input.link ), ( "link_not", Encode.string |> Encode.optional input.link_not ), ( "link_in", (Encode.string |> Encode.list) |> Encode.optional input.link_in ), ( "link_not_in", (Encode.string |> Encode.list) |> Encode.optional input.link_not_in ), ( "link_lt", Encode.string |> Encode.optional input.link_lt ), ( "link_lte", Encode.string |> Encode.optional input.link_lte ), ( "link_gt", Encode.string |> Encode.optional input.link_gt ), ( "link_gte", Encode.string |> Encode.optional input.link_gte ), ( "link_contains", Encode.string |> Encode.optional input.link_contains ), ( "link_not_contains", Encode.string |> Encode.optional input.link_not_contains ), ( "link_starts_with", Encode.string |> Encode.optional input.link_starts_with ), ( "link_not_starts_with", Encode.string |> Encode.optional input.link_not_starts_with ), ( "link_ends_with", Encode.string |> Encode.optional input.link_ends_with ), ( "link_not_ends_with", Encode.string |> Encode.optional input.link_not_ends_with ), ( "images_every", encodeAssetWhereInput |> Encode.optional input.images_every ), ( "images_some", encodeAssetWhereInput |> Encode.optional input.images_some ), ( "images_none", encodeAssetWhereInput |> Encode.optional input.images_none ), ( "picture", encodeAssetWhereInput |> Encode.optional input.picture ) ]


buildProjectWhereUniqueInput : (ProjectWhereUniqueInputOptionalFields -> ProjectWhereUniqueInputOptionalFields) -> ProjectWhereUniqueInput
buildProjectWhereUniqueInput fillOptionals =
    let
        optionals =
            fillOptionals
                { id = Absent }
    in
    { id = optionals.id }


type alias ProjectWhereUniqueInputOptionalFields =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Type for the ProjectWhereUniqueInput input object.
-}
type alias ProjectWhereUniqueInput =
    { id : OptionalArgument DB.ScalarDecoders.Id }


{-| Encode a ProjectWhereUniqueInput into a value that can be used as an argument.
-}
encodeProjectWhereUniqueInput : ProjectWhereUniqueInput -> Value
encodeProjectWhereUniqueInput input =
    Encode.maybeObject
        [ ( "id", (\(DB.Scalar.Id raw) -> Encode.string raw) |> Encode.optional input.id ) ]
